
treinamento_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003874  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003980  08003980  00013980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a00  08003a00  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003a00  08003a00  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a00  08003a00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08003a78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003a78  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091b1  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016bb  00000000  00000000  0002924a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002a908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  0002b1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001718d  00000000  00000000  0002ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a300  00000000  00000000  00042bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084bed  00000000  00000000  0004ceb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1aa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002908  00000000  00000000  000d1af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003968 	.word	0x08003968

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003968 	.word	0x08003968

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_dmul>:
 800015c:	b570      	push	{r4, r5, r6, lr}
 800015e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000162:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016a:	bf1d      	ittte	ne
 800016c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000170:	ea94 0f0c 	teqne	r4, ip
 8000174:	ea95 0f0c 	teqne	r5, ip
 8000178:	f000 f8de 	bleq	8000338 <__aeabi_dmul+0x1dc>
 800017c:	442c      	add	r4, r5
 800017e:	ea81 0603 	eor.w	r6, r1, r3
 8000182:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000186:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800018e:	bf18      	it	ne
 8000190:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800019c:	d038      	beq.n	8000210 <__aeabi_dmul+0xb4>
 800019e:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a2:	f04f 0500 	mov.w	r5, #0
 80001a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b2:	f04f 0600 	mov.w	r6, #0
 80001b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ba:	f09c 0f00 	teq	ip, #0
 80001be:	bf18      	it	ne
 80001c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d0:	d204      	bcs.n	80001dc <__aeabi_dmul+0x80>
 80001d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001d6:	416d      	adcs	r5, r5
 80001d8:	eb46 0606 	adc.w	r6, r6, r6
 80001dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f4:	bf88      	it	hi
 80001f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fa:	d81e      	bhi.n	800023a <__aeabi_dmul+0xde>
 80001fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000200:	bf08      	it	eq
 8000202:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000206:	f150 0000 	adcs.w	r0, r0, #0
 800020a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800020e:	bd70      	pop	{r4, r5, r6, pc}
 8000210:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000214:	ea46 0101 	orr.w	r1, r6, r1
 8000218:	ea40 0002 	orr.w	r0, r0, r2
 800021c:	ea81 0103 	eor.w	r1, r1, r3
 8000220:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000224:	bfc2      	ittt	gt
 8000226:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800022e:	bd70      	popgt	{r4, r5, r6, pc}
 8000230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000234:	f04f 0e00 	mov.w	lr, #0
 8000238:	3c01      	subs	r4, #1
 800023a:	f300 80ab 	bgt.w	8000394 <__aeabi_dmul+0x238>
 800023e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000242:	bfde      	ittt	le
 8000244:	2000      	movle	r0, #0
 8000246:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024a:	bd70      	pople	{r4, r5, r6, pc}
 800024c:	f1c4 0400 	rsb	r4, r4, #0
 8000250:	3c20      	subs	r4, #32
 8000252:	da35      	bge.n	80002c0 <__aeabi_dmul+0x164>
 8000254:	340c      	adds	r4, #12
 8000256:	dc1b      	bgt.n	8000290 <__aeabi_dmul+0x134>
 8000258:	f104 0414 	add.w	r4, r4, #20
 800025c:	f1c4 0520 	rsb	r5, r4, #32
 8000260:	fa00 f305 	lsl.w	r3, r0, r5
 8000264:	fa20 f004 	lsr.w	r0, r0, r4
 8000268:	fa01 f205 	lsl.w	r2, r1, r5
 800026c:	ea40 0002 	orr.w	r0, r0, r2
 8000270:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000274:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000278:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800027c:	fa21 f604 	lsr.w	r6, r1, r4
 8000280:	eb42 0106 	adc.w	r1, r2, r6
 8000284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000288:	bf08      	it	eq
 800028a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800028e:	bd70      	pop	{r4, r5, r6, pc}
 8000290:	f1c4 040c 	rsb	r4, r4, #12
 8000294:	f1c4 0520 	rsb	r5, r4, #32
 8000298:	fa00 f304 	lsl.w	r3, r0, r4
 800029c:	fa20 f005 	lsr.w	r0, r0, r5
 80002a0:	fa01 f204 	lsl.w	r2, r1, r4
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f205 	lsl.w	r2, r0, r5
 80002c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002cc:	fa20 f304 	lsr.w	r3, r0, r4
 80002d0:	fa01 f205 	lsl.w	r2, r1, r5
 80002d4:	ea43 0302 	orr.w	r3, r3, r2
 80002d8:	fa21 f004 	lsr.w	r0, r1, r4
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	fa21 f204 	lsr.w	r2, r1, r4
 80002e4:	ea20 0002 	bic.w	r0, r0, r2
 80002e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f0:	bf08      	it	eq
 80002f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f094 0f00 	teq	r4, #0
 80002fc:	d10f      	bne.n	800031e <__aeabi_dmul+0x1c2>
 80002fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000302:	0040      	lsls	r0, r0, #1
 8000304:	eb41 0101 	adc.w	r1, r1, r1
 8000308:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030c:	bf08      	it	eq
 800030e:	3c01      	subeq	r4, #1
 8000310:	d0f7      	beq.n	8000302 <__aeabi_dmul+0x1a6>
 8000312:	ea41 0106 	orr.w	r1, r1, r6
 8000316:	f095 0f00 	teq	r5, #0
 800031a:	bf18      	it	ne
 800031c:	4770      	bxne	lr
 800031e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	eb43 0303 	adc.w	r3, r3, r3
 8000328:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800032c:	bf08      	it	eq
 800032e:	3d01      	subeq	r5, #1
 8000330:	d0f7      	beq.n	8000322 <__aeabi_dmul+0x1c6>
 8000332:	ea43 0306 	orr.w	r3, r3, r6
 8000336:	4770      	bx	lr
 8000338:	ea94 0f0c 	teq	r4, ip
 800033c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000340:	bf18      	it	ne
 8000342:	ea95 0f0c 	teqne	r5, ip
 8000346:	d00c      	beq.n	8000362 <__aeabi_dmul+0x206>
 8000348:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800034c:	bf18      	it	ne
 800034e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000352:	d1d1      	bne.n	80002f8 <__aeabi_dmul+0x19c>
 8000354:	ea81 0103 	eor.w	r1, r1, r3
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	f04f 0000 	mov.w	r0, #0
 8000360:	bd70      	pop	{r4, r5, r6, pc}
 8000362:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000366:	bf06      	itte	eq
 8000368:	4610      	moveq	r0, r2
 800036a:	4619      	moveq	r1, r3
 800036c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000370:	d019      	beq.n	80003a6 <__aeabi_dmul+0x24a>
 8000372:	ea94 0f0c 	teq	r4, ip
 8000376:	d102      	bne.n	800037e <__aeabi_dmul+0x222>
 8000378:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800037c:	d113      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 800037e:	ea95 0f0c 	teq	r5, ip
 8000382:	d105      	bne.n	8000390 <__aeabi_dmul+0x234>
 8000384:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000388:	bf1c      	itt	ne
 800038a:	4610      	movne	r0, r2
 800038c:	4619      	movne	r1, r3
 800038e:	d10a      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000398:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd70      	pop	{r4, r5, r6, pc}
 80003a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003ae:	bd70      	pop	{r4, r5, r6, pc}

080003b0 <__aeabi_fmul>:
 80003b0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003b4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003b8:	bf1e      	ittt	ne
 80003ba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003be:	ea92 0f0c 	teqne	r2, ip
 80003c2:	ea93 0f0c 	teqne	r3, ip
 80003c6:	d06f      	beq.n	80004a8 <__aeabi_fmul+0xf8>
 80003c8:	441a      	add	r2, r3
 80003ca:	ea80 0c01 	eor.w	ip, r0, r1
 80003ce:	0240      	lsls	r0, r0, #9
 80003d0:	bf18      	it	ne
 80003d2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003d6:	d01e      	beq.n	8000416 <__aeabi_fmul+0x66>
 80003d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003dc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003e0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003e4:	fba0 3101 	umull	r3, r1, r0, r1
 80003e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003ec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003f0:	bf3e      	ittt	cc
 80003f2:	0049      	lslcc	r1, r1, #1
 80003f4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003f8:	005b      	lslcc	r3, r3, #1
 80003fa:	ea40 0001 	orr.w	r0, r0, r1
 80003fe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000402:	2afd      	cmp	r2, #253	; 0xfd
 8000404:	d81d      	bhi.n	8000442 <__aeabi_fmul+0x92>
 8000406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800040a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800040e:	bf08      	it	eq
 8000410:	f020 0001 	biceq.w	r0, r0, #1
 8000414:	4770      	bx	lr
 8000416:	f090 0f00 	teq	r0, #0
 800041a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800041e:	bf08      	it	eq
 8000420:	0249      	lsleq	r1, r1, #9
 8000422:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000426:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800042a:	3a7f      	subs	r2, #127	; 0x7f
 800042c:	bfc2      	ittt	gt
 800042e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000432:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000436:	4770      	bxgt	lr
 8000438:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800043c:	f04f 0300 	mov.w	r3, #0
 8000440:	3a01      	subs	r2, #1
 8000442:	dc5d      	bgt.n	8000500 <__aeabi_fmul+0x150>
 8000444:	f112 0f19 	cmn.w	r2, #25
 8000448:	bfdc      	itt	le
 800044a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800044e:	4770      	bxle	lr
 8000450:	f1c2 0200 	rsb	r2, r2, #0
 8000454:	0041      	lsls	r1, r0, #1
 8000456:	fa21 f102 	lsr.w	r1, r1, r2
 800045a:	f1c2 0220 	rsb	r2, r2, #32
 800045e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000462:	ea5f 0031 	movs.w	r0, r1, rrx
 8000466:	f140 0000 	adc.w	r0, r0, #0
 800046a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800046e:	bf08      	it	eq
 8000470:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000474:	4770      	bx	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0040      	lsleq	r0, r0, #1
 8000482:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000486:	3a01      	subeq	r2, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xce>
 800048a:	ea40 000c 	orr.w	r0, r0, ip
 800048e:	f093 0f00 	teq	r3, #0
 8000492:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000496:	bf02      	ittt	eq
 8000498:	0049      	lsleq	r1, r1, #1
 800049a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800049e:	3b01      	subeq	r3, #1
 80004a0:	d0f9      	beq.n	8000496 <__aeabi_fmul+0xe6>
 80004a2:	ea41 010c 	orr.w	r1, r1, ip
 80004a6:	e78f      	b.n	80003c8 <__aeabi_fmul+0x18>
 80004a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	bf18      	it	ne
 80004b2:	ea93 0f0c 	teqne	r3, ip
 80004b6:	d00a      	beq.n	80004ce <__aeabi_fmul+0x11e>
 80004b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004bc:	bf18      	it	ne
 80004be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004c2:	d1d8      	bne.n	8000476 <__aeabi_fmul+0xc6>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	4770      	bx	lr
 80004ce:	f090 0f00 	teq	r0, #0
 80004d2:	bf17      	itett	ne
 80004d4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004d8:	4608      	moveq	r0, r1
 80004da:	f091 0f00 	teqne	r1, #0
 80004de:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004e2:	d014      	beq.n	800050e <__aeabi_fmul+0x15e>
 80004e4:	ea92 0f0c 	teq	r2, ip
 80004e8:	d101      	bne.n	80004ee <__aeabi_fmul+0x13e>
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	d10f      	bne.n	800050e <__aeabi_fmul+0x15e>
 80004ee:	ea93 0f0c 	teq	r3, ip
 80004f2:	d103      	bne.n	80004fc <__aeabi_fmul+0x14c>
 80004f4:	024b      	lsls	r3, r1, #9
 80004f6:	bf18      	it	ne
 80004f8:	4608      	movne	r0, r1
 80004fa:	d108      	bne.n	800050e <__aeabi_fmul+0x15e>
 80004fc:	ea80 0001 	eor.w	r0, r0, r1
 8000500:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000504:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000508:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800050c:	4770      	bx	lr
 800050e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000512:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000516:	4770      	bx	lr

08000518 <__aeabi_drsub>:
 8000518:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800051c:	e002      	b.n	8000524 <__adddf3>
 800051e:	bf00      	nop

08000520 <__aeabi_dsub>:
 8000520:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000524 <__adddf3>:
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800052a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052e:	ea94 0f05 	teq	r4, r5
 8000532:	bf08      	it	eq
 8000534:	ea90 0f02 	teqeq	r0, r2
 8000538:	bf1f      	itttt	ne
 800053a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000542:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000546:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800054a:	f000 80e2 	beq.w	8000712 <__adddf3+0x1ee>
 800054e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000552:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000556:	bfb8      	it	lt
 8000558:	426d      	neglt	r5, r5
 800055a:	dd0c      	ble.n	8000576 <__adddf3+0x52>
 800055c:	442c      	add	r4, r5
 800055e:	ea80 0202 	eor.w	r2, r0, r2
 8000562:	ea81 0303 	eor.w	r3, r1, r3
 8000566:	ea82 0000 	eor.w	r0, r2, r0
 800056a:	ea83 0101 	eor.w	r1, r3, r1
 800056e:	ea80 0202 	eor.w	r2, r0, r2
 8000572:	ea81 0303 	eor.w	r3, r1, r3
 8000576:	2d36      	cmp	r5, #54	; 0x36
 8000578:	bf88      	it	hi
 800057a:	bd30      	pophi	{r4, r5, pc}
 800057c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000580:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000584:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000588:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x70>
 800058e:	4240      	negs	r0, r0
 8000590:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000594:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000598:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800059c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005a0:	d002      	beq.n	80005a8 <__adddf3+0x84>
 80005a2:	4252      	negs	r2, r2
 80005a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a8:	ea94 0f05 	teq	r4, r5
 80005ac:	f000 80a7 	beq.w	80006fe <__adddf3+0x1da>
 80005b0:	f1a4 0401 	sub.w	r4, r4, #1
 80005b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b8:	db0d      	blt.n	80005d6 <__adddf3+0xb2>
 80005ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005be:	fa22 f205 	lsr.w	r2, r2, r5
 80005c2:	1880      	adds	r0, r0, r2
 80005c4:	f141 0100 	adc.w	r1, r1, #0
 80005c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80005cc:	1880      	adds	r0, r0, r2
 80005ce:	fa43 f305 	asr.w	r3, r3, r5
 80005d2:	4159      	adcs	r1, r3
 80005d4:	e00e      	b.n	80005f4 <__adddf3+0xd0>
 80005d6:	f1a5 0520 	sub.w	r5, r5, #32
 80005da:	f10e 0e20 	add.w	lr, lr, #32
 80005de:	2a01      	cmp	r2, #1
 80005e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e4:	bf28      	it	cs
 80005e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ea:	fa43 f305 	asr.w	r3, r3, r5
 80005ee:	18c0      	adds	r0, r0, r3
 80005f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f8:	d507      	bpl.n	800060a <__adddf3+0xe6>
 80005fa:	f04f 0e00 	mov.w	lr, #0
 80005fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000602:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000606:	eb6e 0101 	sbc.w	r1, lr, r1
 800060a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060e:	d31b      	bcc.n	8000648 <__adddf3+0x124>
 8000610:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000614:	d30c      	bcc.n	8000630 <__adddf3+0x10c>
 8000616:	0849      	lsrs	r1, r1, #1
 8000618:	ea5f 0030 	movs.w	r0, r0, rrx
 800061c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000620:	f104 0401 	add.w	r4, r4, #1
 8000624:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000628:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800062c:	f080 809a 	bcs.w	8000764 <__adddf3+0x240>
 8000630:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	ea41 0105 	orr.w	r1, r1, r5
 8000646:	bd30      	pop	{r4, r5, pc}
 8000648:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800064c:	4140      	adcs	r0, r0
 800064e:	eb41 0101 	adc.w	r1, r1, r1
 8000652:	3c01      	subs	r4, #1
 8000654:	bf28      	it	cs
 8000656:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800065a:	d2e9      	bcs.n	8000630 <__adddf3+0x10c>
 800065c:	f091 0f00 	teq	r1, #0
 8000660:	bf04      	itt	eq
 8000662:	4601      	moveq	r1, r0
 8000664:	2000      	moveq	r0, #0
 8000666:	fab1 f381 	clz	r3, r1
 800066a:	bf08      	it	eq
 800066c:	3320      	addeq	r3, #32
 800066e:	f1a3 030b 	sub.w	r3, r3, #11
 8000672:	f1b3 0220 	subs.w	r2, r3, #32
 8000676:	da0c      	bge.n	8000692 <__adddf3+0x16e>
 8000678:	320c      	adds	r2, #12
 800067a:	dd08      	ble.n	800068e <__adddf3+0x16a>
 800067c:	f102 0c14 	add.w	ip, r2, #20
 8000680:	f1c2 020c 	rsb	r2, r2, #12
 8000684:	fa01 f00c 	lsl.w	r0, r1, ip
 8000688:	fa21 f102 	lsr.w	r1, r1, r2
 800068c:	e00c      	b.n	80006a8 <__adddf3+0x184>
 800068e:	f102 0214 	add.w	r2, r2, #20
 8000692:	bfd8      	it	le
 8000694:	f1c2 0c20 	rsble	ip, r2, #32
 8000698:	fa01 f102 	lsl.w	r1, r1, r2
 800069c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006a0:	bfdc      	itt	le
 80006a2:	ea41 010c 	orrle.w	r1, r1, ip
 80006a6:	4090      	lslle	r0, r2
 80006a8:	1ae4      	subs	r4, r4, r3
 80006aa:	bfa2      	ittt	ge
 80006ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006b0:	4329      	orrge	r1, r5
 80006b2:	bd30      	popge	{r4, r5, pc}
 80006b4:	ea6f 0404 	mvn.w	r4, r4
 80006b8:	3c1f      	subs	r4, #31
 80006ba:	da1c      	bge.n	80006f6 <__adddf3+0x1d2>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc0e      	bgt.n	80006de <__adddf3+0x1ba>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0220 	rsb	r2, r4, #32
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f302 	lsl.w	r3, r1, r2
 80006d0:	ea40 0003 	orr.w	r0, r0, r3
 80006d4:	fa21 f304 	lsr.w	r3, r1, r4
 80006d8:	ea45 0103 	orr.w	r1, r5, r3
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	f1c4 040c 	rsb	r4, r4, #12
 80006e2:	f1c4 0220 	rsb	r2, r4, #32
 80006e6:	fa20 f002 	lsr.w	r0, r0, r2
 80006ea:	fa01 f304 	lsl.w	r3, r1, r4
 80006ee:	ea40 0003 	orr.w	r0, r0, r3
 80006f2:	4629      	mov	r1, r5
 80006f4:	bd30      	pop	{r4, r5, pc}
 80006f6:	fa21 f004 	lsr.w	r0, r1, r4
 80006fa:	4629      	mov	r1, r5
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	f094 0f00 	teq	r4, #0
 8000702:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000706:	bf06      	itte	eq
 8000708:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800070c:	3401      	addeq	r4, #1
 800070e:	3d01      	subne	r5, #1
 8000710:	e74e      	b.n	80005b0 <__adddf3+0x8c>
 8000712:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000716:	bf18      	it	ne
 8000718:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800071c:	d029      	beq.n	8000772 <__adddf3+0x24e>
 800071e:	ea94 0f05 	teq	r4, r5
 8000722:	bf08      	it	eq
 8000724:	ea90 0f02 	teqeq	r0, r2
 8000728:	d005      	beq.n	8000736 <__adddf3+0x212>
 800072a:	ea54 0c00 	orrs.w	ip, r4, r0
 800072e:	bf04      	itt	eq
 8000730:	4619      	moveq	r1, r3
 8000732:	4610      	moveq	r0, r2
 8000734:	bd30      	pop	{r4, r5, pc}
 8000736:	ea91 0f03 	teq	r1, r3
 800073a:	bf1e      	ittt	ne
 800073c:	2100      	movne	r1, #0
 800073e:	2000      	movne	r0, #0
 8000740:	bd30      	popne	{r4, r5, pc}
 8000742:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000746:	d105      	bne.n	8000754 <__adddf3+0x230>
 8000748:	0040      	lsls	r0, r0, #1
 800074a:	4149      	adcs	r1, r1
 800074c:	bf28      	it	cs
 800074e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000752:	bd30      	pop	{r4, r5, pc}
 8000754:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000758:	bf3c      	itt	cc
 800075a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075e:	bd30      	popcc	{r4, r5, pc}
 8000760:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000764:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000768:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	bd30      	pop	{r4, r5, pc}
 8000772:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000776:	bf1a      	itte	ne
 8000778:	4619      	movne	r1, r3
 800077a:	4610      	movne	r0, r2
 800077c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000780:	bf1c      	itt	ne
 8000782:	460b      	movne	r3, r1
 8000784:	4602      	movne	r2, r0
 8000786:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800078a:	bf06      	itte	eq
 800078c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000790:	ea91 0f03 	teqeq	r1, r3
 8000794:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000798:	bd30      	pop	{r4, r5, pc}
 800079a:	bf00      	nop

0800079c <__aeabi_ui2d>:
 800079c:	f090 0f00 	teq	r0, #0
 80007a0:	bf04      	itt	eq
 80007a2:	2100      	moveq	r1, #0
 80007a4:	4770      	bxeq	lr
 80007a6:	b530      	push	{r4, r5, lr}
 80007a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b0:	f04f 0500 	mov.w	r5, #0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e750      	b.n	800065c <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_i2d>:
 80007bc:	f090 0f00 	teq	r0, #0
 80007c0:	bf04      	itt	eq
 80007c2:	2100      	moveq	r1, #0
 80007c4:	4770      	bxeq	lr
 80007c6:	b530      	push	{r4, r5, lr}
 80007c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d4:	bf48      	it	mi
 80007d6:	4240      	negmi	r0, r0
 80007d8:	f04f 0100 	mov.w	r1, #0
 80007dc:	e73e      	b.n	800065c <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_f2d>:
 80007e0:	0042      	lsls	r2, r0, #1
 80007e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ee:	bf1f      	itttt	ne
 80007f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007fc:	4770      	bxne	lr
 80007fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000802:	bf08      	it	eq
 8000804:	4770      	bxeq	lr
 8000806:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800080a:	bf04      	itt	eq
 800080c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000810:	4770      	bxeq	lr
 8000812:	b530      	push	{r4, r5, lr}
 8000814:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000818:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800081c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000820:	e71c      	b.n	800065c <__adddf3+0x138>
 8000822:	bf00      	nop

08000824 <__aeabi_ul2d>:
 8000824:	ea50 0201 	orrs.w	r2, r0, r1
 8000828:	bf08      	it	eq
 800082a:	4770      	bxeq	lr
 800082c:	b530      	push	{r4, r5, lr}
 800082e:	f04f 0500 	mov.w	r5, #0
 8000832:	e00a      	b.n	800084a <__aeabi_l2d+0x16>

08000834 <__aeabi_l2d>:
 8000834:	ea50 0201 	orrs.w	r2, r0, r1
 8000838:	bf08      	it	eq
 800083a:	4770      	bxeq	lr
 800083c:	b530      	push	{r4, r5, lr}
 800083e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000842:	d502      	bpl.n	800084a <__aeabi_l2d+0x16>
 8000844:	4240      	negs	r0, r0
 8000846:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800084a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000852:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000856:	f43f aed8 	beq.w	800060a <__adddf3+0xe6>
 800085a:	f04f 0203 	mov.w	r2, #3
 800085e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000862:	bf18      	it	ne
 8000864:	3203      	addne	r2, #3
 8000866:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086a:	bf18      	it	ne
 800086c:	3203      	addne	r2, #3
 800086e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000872:	f1c2 0320 	rsb	r3, r2, #32
 8000876:	fa00 fc03 	lsl.w	ip, r0, r3
 800087a:	fa20 f002 	lsr.w	r0, r0, r2
 800087e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000882:	ea40 000e 	orr.w	r0, r0, lr
 8000886:	fa21 f102 	lsr.w	r1, r1, r2
 800088a:	4414      	add	r4, r2
 800088c:	e6bd      	b.n	800060a <__adddf3+0xe6>
 800088e:	bf00      	nop

08000890 <__aeabi_d2f>:
 8000890:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000894:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000898:	bf24      	itt	cs
 800089a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800089e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008a2:	d90d      	bls.n	80008c0 <__aeabi_d2f+0x30>
 80008a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b8:	bf08      	it	eq
 80008ba:	f020 0001 	biceq.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008c4:	d121      	bne.n	800090a <__aeabi_d2f+0x7a>
 80008c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008ca:	bfbc      	itt	lt
 80008cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008d0:	4770      	bxlt	lr
 80008d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008da:	f1c2 0218 	rsb	r2, r2, #24
 80008de:	f1c2 0c20 	rsb	ip, r2, #32
 80008e2:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e6:	fa20 f002 	lsr.w	r0, r0, r2
 80008ea:	bf18      	it	ne
 80008ec:	f040 0001 	orrne.w	r0, r0, #1
 80008f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008fc:	ea40 000c 	orr.w	r0, r0, ip
 8000900:	fa23 f302 	lsr.w	r3, r3, r2
 8000904:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000908:	e7cc      	b.n	80008a4 <__aeabi_d2f+0x14>
 800090a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090e:	d107      	bne.n	8000920 <__aeabi_d2f+0x90>
 8000910:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000914:	bf1e      	ittt	ne
 8000916:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800091a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800091e:	4770      	bxne	lr
 8000920:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000924:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000928:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <__aeabi_f2uiz>:
 8000930:	0042      	lsls	r2, r0, #1
 8000932:	d20e      	bcs.n	8000952 <__aeabi_f2uiz+0x22>
 8000934:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000938:	d30b      	bcc.n	8000952 <__aeabi_f2uiz+0x22>
 800093a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800093e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000942:	d409      	bmi.n	8000958 <__aeabi_f2uiz+0x28>
 8000944:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000948:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800094c:	fa23 f002 	lsr.w	r0, r3, r2
 8000950:	4770      	bx	lr
 8000952:	f04f 0000 	mov.w	r0, #0
 8000956:	4770      	bx	lr
 8000958:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800095c:	d101      	bne.n	8000962 <__aeabi_f2uiz+0x32>
 800095e:	0242      	lsls	r2, r0, #9
 8000960:	d102      	bne.n	8000968 <__aeabi_f2uiz+0x38>
 8000962:	f04f 30ff 	mov.w	r0, #4294967295
 8000966:	4770      	bx	lr
 8000968:	f04f 0000 	mov.w	r0, #0
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f000 fae5 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f8b1 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f000 f94b 	bl	8000c18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000982:	f000 f8f1 	bl	8000b68 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000986:	f000 f91d 	bl	8000bc4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Tell TMP102 that we want to read from the temperature register
	  buf[0] = REG_TEMP;
 800098a:	2300      	movs	r3, #0
 800098c:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 800098e:	2390      	movs	r3, #144	; 0x90
 8000990:	b299      	uxth	r1, r3
 8000992:	1d3a      	adds	r2, r7, #4
 8000994:	f04f 33ff 	mov.w	r3, #4294967295
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2301      	movs	r3, #1
 800099c:	4847      	ldr	r0, [pc, #284]	; (8000abc <main+0x14c>)
 800099e:	f000 ff1b 	bl	80017d8 <HAL_I2C_Master_Transmit>
 80009a2:	4603      	mov	r3, r0
 80009a4:	757b      	strb	r3, [r7, #21]
	  if ( ret != HAL_OK ) {
 80009a6:	7d7b      	ldrb	r3, [r7, #21]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d008      	beq.n	80009be <main+0x4e>
		  strcpy((char*)buf, "Error Tx\r\n");
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4a44      	ldr	r2, [pc, #272]	; (8000ac0 <main+0x150>)
 80009b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80009b2:	c303      	stmia	r3!, {r0, r1}
 80009b4:	801a      	strh	r2, [r3, #0]
 80009b6:	3302      	adds	r3, #2
 80009b8:	0c12      	lsrs	r2, r2, #16
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e05c      	b.n	8000a78 <main+0x108>
	  } else {

		  // Read 2 bytes from the temperature register
		  ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 80009be:	2390      	movs	r3, #144	; 0x90
 80009c0:	b299      	uxth	r1, r3
 80009c2:	1d3a      	adds	r2, r7, #4
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2302      	movs	r3, #2
 80009cc:	483b      	ldr	r0, [pc, #236]	; (8000abc <main+0x14c>)
 80009ce:	f001 f801 	bl	80019d4 <HAL_I2C_Master_Receive>
 80009d2:	4603      	mov	r3, r0
 80009d4:	757b      	strb	r3, [r7, #21]
		  if ( ret != HAL_OK ) {
 80009d6:	7d7b      	ldrb	r3, [r7, #21]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d008      	beq.n	80009ee <main+0x7e>
			  strcpy((char*)buf, "Error Rx\r\n");
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4a39      	ldr	r2, [pc, #228]	; (8000ac4 <main+0x154>)
 80009e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80009e2:	c303      	stmia	r3!, {r0, r1}
 80009e4:	801a      	strh	r2, [r3, #0]
 80009e6:	3302      	adds	r3, #2
 80009e8:	0c12      	lsrs	r2, r2, #16
 80009ea:	701a      	strb	r2, [r3, #0]
 80009ec:	e044      	b.n	8000a78 <main+0x108>
		  } else {

			  //Combine the bytes
			  val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 80009ee:	793b      	ldrb	r3, [r7, #4]
 80009f0:	011b      	lsls	r3, r3, #4
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	797b      	ldrb	r3, [r7, #5]
 80009f6:	091b      	lsrs	r3, r3, #4
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	82fb      	strh	r3, [r7, #22]

			  // Convert to 2's complement, since temperature can be negative
			  if ( val > 0x7FF ) {
 8000a00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a08:	db05      	blt.n	8000a16 <main+0xa6>
				  val |= 0xF000;
 8000a0a:	8afb      	ldrh	r3, [r7, #22]
 8000a0c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000a10:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000a14:	82fb      	strh	r3, [r7, #22]
			  }

			  // Convert to float temperature value (Celsius)
			  temp_c = val * 0.0625;
 8000a16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fece 	bl	80007bc <__aeabi_i2d>
 8000a20:	f04f 0200 	mov.w	r2, #0
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <main+0x158>)
 8000a26:	f7ff fb99 	bl	800015c <__aeabi_dmul>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	f7ff ff2d 	bl	8000890 <__aeabi_d2f>
 8000a36:	4603      	mov	r3, r0
 8000a38:	613b      	str	r3, [r7, #16]

			  // Convert temperature to decimal format
			  temp_c *= 100;
 8000a3a:	4924      	ldr	r1, [pc, #144]	; (8000acc <main+0x15c>)
 8000a3c:	6938      	ldr	r0, [r7, #16]
 8000a3e:	f7ff fcb7 	bl	80003b0 <__aeabi_fmul>
 8000a42:	4603      	mov	r3, r0
 8000a44:	613b      	str	r3, [r7, #16]
			  sprintf((char*)buf, "%u.%u C\r\n", ((unsigned int)temp_c / 100),((unsigned int)temp_c % 100));
 8000a46:	6938      	ldr	r0, [r7, #16]
 8000a48:	f7ff ff72 	bl	8000930 <__aeabi_f2uiz>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4a20      	ldr	r2, [pc, #128]	; (8000ad0 <main+0x160>)
 8000a50:	fba2 2303 	umull	r2, r3, r2, r3
 8000a54:	095c      	lsrs	r4, r3, #5
 8000a56:	6938      	ldr	r0, [r7, #16]
 8000a58:	f7ff ff6a 	bl	8000930 <__aeabi_f2uiz>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <main+0x160>)
 8000a60:	fba3 1302 	umull	r1, r3, r3, r2
 8000a64:	095b      	lsrs	r3, r3, #5
 8000a66:	2164      	movs	r1, #100	; 0x64
 8000a68:	fb01 f303 	mul.w	r3, r1, r3
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	1d38      	adds	r0, r7, #4
 8000a70:	4622      	mov	r2, r4
 8000a72:	4918      	ldr	r1, [pc, #96]	; (8000ad4 <main+0x164>)
 8000a74:	f002 fb3e 	bl	80030f4 <siprintf>
	  if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
		  result = HAL_ADC_GetValue(&hadc1);
	  }*/

	  //sprintf((char*)buf, "%d\r\n", result);
	  HAL_UART_Transmit(&huart1, buf, 8, HAL_MAX_DELAY);
 8000a78:	1d39      	adds	r1, r7, #4
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	2208      	movs	r2, #8
 8000a80:	4815      	ldr	r0, [pc, #84]	; (8000ad8 <main+0x168>)
 8000a82:	f002 f99a 	bl	8002dba <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8000a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8a:	f000 fabd 	bl	8001008 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2101      	movs	r1, #1
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <main+0x16c>)
 8000a94:	f000 fd44 	bl	8001520 <HAL_GPIO_WritePin>
	  //HAL_I2C_Transmit(&hi2c1, buf, 8, HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fb56 	bl	800014c <strlen>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	1d39      	adds	r1, r7, #4
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <main+0x168>)
 8000aac:	f002 f985 	bl	8002dba <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <main+0x16c>)
 8000ab6:	f000 fd33 	bl	8001520 <HAL_GPIO_WritePin>
	  buf[0] = REG_TEMP;
 8000aba:	e766      	b.n	800098a <main+0x1a>
 8000abc:	20000098 	.word	0x20000098
 8000ac0:	08003980 	.word	0x08003980
 8000ac4:	0800398c 	.word	0x0800398c
 8000ac8:	3fb00000 	.word	0x3fb00000
 8000acc:	42c80000 	.word	0x42c80000
 8000ad0:	51eb851f 	.word	0x51eb851f
 8000ad4:	08003998 	.word	0x08003998
 8000ad8:	200000ec 	.word	0x200000ec
 8000adc:	40010c00 	.word	0x40010c00

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b090      	sub	sp, #64	; 0x40
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0318 	add.w	r3, r7, #24
 8000aea:	2228      	movs	r2, #40	; 0x28
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 faf8 	bl	80030e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b14:	2302      	movs	r3, #2
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b22:	f107 0318 	add.w	r3, r7, #24
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fce0 	bl	80024ec <HAL_RCC_OscConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000b32:	f000 f8bb 	bl	8000cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b36:	230f      	movs	r3, #15
 8000b38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 ff4c 	bl	80029ec <HAL_RCC_ClockConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000b5a:	f000 f8a7 	bl	8000cac <Error_Handler>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3740      	adds	r7, #64	; 0x40
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b6e:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <MX_I2C1_Init+0x54>)
 8000b70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b74:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <MX_I2C1_Init+0x58>)
 8000b76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000ba6:	f000 fcd3 	bl	8001550 <HAL_I2C_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bb0:	f000 f87c 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000098 	.word	0x20000098
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	000186a0 	.word	0x000186a0

08000bc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <MX_USART1_UART_Init+0x50>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bfc:	f002 f890 	bl	8002d20 <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c06:	f000 f851 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000ec 	.word	0x200000ec
 8000c14:	40013800 	.word	0x40013800

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_GPIO_Init+0x8c>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <MX_GPIO_Init+0x8c>)
 8000c32:	f043 0320 	orr.w	r3, r3, #32
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_GPIO_Init+0x8c>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0320 	and.w	r3, r3, #32
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_GPIO_Init+0x8c>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <MX_GPIO_Init+0x8c>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_GPIO_Init+0x8c>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_GPIO_Init+0x8c>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <MX_GPIO_Init+0x8c>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_GPIO_Init+0x8c>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2101      	movs	r1, #1
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <MX_GPIO_Init+0x90>)
 8000c7a:	f000 fc51 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4619      	mov	r1, r3
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_GPIO_Init+0x90>)
 8000c96:	f000 fabf 	bl	8001218 <HAL_GPIO_Init>

}
 8000c9a:	bf00      	nop
 8000c9c:	3720      	adds	r7, #32
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010c00 	.word	0x40010c00

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <Error_Handler+0x8>
	...

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_MspInit+0x5c>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a14      	ldr	r2, [pc, #80]	; (8000d14 <HAL_MspInit+0x5c>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6193      	str	r3, [r2, #24]
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_MspInit+0x5c>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_MspInit+0x5c>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_MspInit+0x5c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	61d3      	str	r3, [r2, #28]
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_MspInit+0x5c>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_MspInit+0x60>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <HAL_MspInit+0x60>)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000

08000d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <HAL_I2C_MspInit+0x70>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d123      	bne.n	8000d84 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_I2C_MspInit+0x74>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <HAL_I2C_MspInit+0x74>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_I2C_MspInit+0x74>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d54:	23c0      	movs	r3, #192	; 0xc0
 8000d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d58:	2312      	movs	r3, #18
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4619      	mov	r1, r3
 8000d66:	480b      	ldr	r0, [pc, #44]	; (8000d94 <HAL_I2C_MspInit+0x78>)
 8000d68:	f000 fa56 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_I2C_MspInit+0x74>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_I2C_MspInit+0x74>)
 8000d72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d76:	61d3      	str	r3, [r2, #28]
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_I2C_MspInit+0x74>)
 8000d7a:	69db      	ldr	r3, [r3, #28]
 8000d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40005400 	.word	0x40005400
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010c00 	.word	0x40010c00

08000d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <HAL_UART_MspInit+0x8c>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d131      	bne.n	8000e1c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <HAL_UART_MspInit+0x90>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <HAL_UART_MspInit+0x90>)
 8000dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_UART_MspInit+0x90>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_UART_MspInit+0x90>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <HAL_UART_MspInit+0x90>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_UART_MspInit+0x90>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <HAL_UART_MspInit+0x94>)
 8000dfe:	f000 fa0b 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <HAL_UART_MspInit+0x94>)
 8000e18:	f000 f9fe 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40013800 	.word	0x40013800
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010800 	.word	0x40010800

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler+0x4>

08000e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <MemManage_Handler+0x4>

08000e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e76:	f000 f8ab 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	; (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f002 f8ee 	bl	8003090 <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20005000 	.word	0x20005000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	2000008c 	.word	0x2000008c
 8000ee8:	20000188 	.word	0x20000188

08000eec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	; (8000f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	; (8000f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f1e:	f7ff ffe5 	bl	8000eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f22:	f002 f8bb 	bl	800309c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f26:	f7ff fd23 	bl	8000970 <main>
  bx lr
 8000f2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f34:	08003a08 	.word	0x08003a08
  ldr r2, =_sbss
 8000f38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f3c:	20000188 	.word	0x20000188

08000f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC1_2_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_Init+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_Init+0x28>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f92b 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff feaa 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f935 	bl	80011fe <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f90b 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a03      	ldr	r2, [pc, #12]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000174 	.word	0x20000174

08000ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <HAL_GetTick+0x10>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	20000174 	.word	0x20000174

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff fff0 	bl	8000ff4 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffe0 	bl	8000ff4 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff90 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff49 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff5e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff90 	bl	8001108 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5f 	bl	80010b4 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffb0 	bl	800116c <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b08b      	sub	sp, #44	; 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e169      	b.n	8001500 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800122c:	2201      	movs	r2, #1
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8158 	bne.w	80014fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a9a      	ldr	r2, [pc, #616]	; (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d05e      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001254:	4a98      	ldr	r2, [pc, #608]	; (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d875      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800125a:	4a98      	ldr	r2, [pc, #608]	; (80014bc <HAL_GPIO_Init+0x2a4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d058      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001260:	4a96      	ldr	r2, [pc, #600]	; (80014bc <HAL_GPIO_Init+0x2a4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d86f      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001266:	4a96      	ldr	r2, [pc, #600]	; (80014c0 <HAL_GPIO_Init+0x2a8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d052      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 800126c:	4a94      	ldr	r2, [pc, #592]	; (80014c0 <HAL_GPIO_Init+0x2a8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d869      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001272:	4a94      	ldr	r2, [pc, #592]	; (80014c4 <HAL_GPIO_Init+0x2ac>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d04c      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001278:	4a92      	ldr	r2, [pc, #584]	; (80014c4 <HAL_GPIO_Init+0x2ac>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d863      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800127e:	4a92      	ldr	r2, [pc, #584]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d046      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001284:	4a90      	ldr	r2, [pc, #576]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d85d      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800128a:	2b12      	cmp	r3, #18
 800128c:	d82a      	bhi.n	80012e4 <HAL_GPIO_Init+0xcc>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d859      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <HAL_GPIO_Init+0x80>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	08001313 	.word	0x08001313
 800129c:	080012ed 	.word	0x080012ed
 80012a0:	080012ff 	.word	0x080012ff
 80012a4:	08001341 	.word	0x08001341
 80012a8:	08001347 	.word	0x08001347
 80012ac:	08001347 	.word	0x08001347
 80012b0:	08001347 	.word	0x08001347
 80012b4:	08001347 	.word	0x08001347
 80012b8:	08001347 	.word	0x08001347
 80012bc:	08001347 	.word	0x08001347
 80012c0:	08001347 	.word	0x08001347
 80012c4:	08001347 	.word	0x08001347
 80012c8:	08001347 	.word	0x08001347
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001347 	.word	0x08001347
 80012d4:	08001347 	.word	0x08001347
 80012d8:	08001347 	.word	0x08001347
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	08001309 	.word	0x08001309
 80012e4:	4a79      	ldr	r2, [pc, #484]	; (80014cc <HAL_GPIO_Init+0x2b4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ea:	e02c      	b.n	8001346 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e029      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	3304      	adds	r3, #4
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e024      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	3308      	adds	r3, #8
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e01f      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e01a      	b.n	8001348 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131a:	2304      	movs	r3, #4
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e013      	b.n	8001348 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001328:	2308      	movs	r3, #8
 800132a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
          break;
 8001332:	e009      	b.n	8001348 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001334:	2308      	movs	r3, #8
 8001336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	615a      	str	r2, [r3, #20]
          break;
 800133e:	e003      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x130>
          break;
 8001346:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2bff      	cmp	r3, #255	; 0xff
 800134c:	d801      	bhi.n	8001352 <HAL_GPIO_Init+0x13a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	e001      	b.n	8001356 <HAL_GPIO_Init+0x13e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3304      	adds	r3, #4
 8001356:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2bff      	cmp	r3, #255	; 0xff
 800135c:	d802      	bhi.n	8001364 <HAL_GPIO_Init+0x14c>
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x152>
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	3b08      	subs	r3, #8
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	210f      	movs	r1, #15
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	401a      	ands	r2, r3
 800137c:	6a39      	ldr	r1, [r7, #32]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80b1 	beq.w	80014fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001398:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <HAL_GPIO_Init+0x2b8>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a4c      	ldr	r2, [pc, #304]	; (80014d0 <HAL_GPIO_Init+0x2b8>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <HAL_GPIO_Init+0x2b8>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b0:	4a48      	ldr	r2, [pc, #288]	; (80014d4 <HAL_GPIO_Init+0x2bc>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a40      	ldr	r2, [pc, #256]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d013      	beq.n	8001404 <HAL_GPIO_Init+0x1ec>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a3f      	ldr	r2, [pc, #252]	; (80014dc <HAL_GPIO_Init+0x2c4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d00d      	beq.n	8001400 <HAL_GPIO_Init+0x1e8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3e      	ldr	r2, [pc, #248]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d007      	beq.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3d      	ldr	r2, [pc, #244]	; (80014e4 <HAL_GPIO_Init+0x2cc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d101      	bne.n	80013f8 <HAL_GPIO_Init+0x1e0>
 80013f4:	2303      	movs	r3, #3
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e004      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e002      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 8001404:	2300      	movs	r3, #0
 8001406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001408:	f002 0203 	and.w	r2, r2, #3
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4093      	lsls	r3, r2
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001416:	492f      	ldr	r1, [pc, #188]	; (80014d4 <HAL_GPIO_Init+0x2bc>)
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d006      	beq.n	800143e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	492c      	ldr	r1, [pc, #176]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	43db      	mvns	r3, r3
 8001446:	4928      	ldr	r1, [pc, #160]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001448:	4013      	ands	r3, r2
 800144a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4922      	ldr	r1, [pc, #136]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	43db      	mvns	r3, r3
 800146e:	491e      	ldr	r1, [pc, #120]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001470:	4013      	ands	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	4918      	ldr	r1, [pc, #96]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	608b      	str	r3, [r1, #8]
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	43db      	mvns	r3, r3
 8001496:	4914      	ldr	r1, [pc, #80]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001498:	4013      	ands	r3, r2
 800149a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d021      	beq.n	80014ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	490e      	ldr	r1, [pc, #56]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	60cb      	str	r3, [r1, #12]
 80014b4:	e021      	b.n	80014fa <HAL_GPIO_Init+0x2e2>
 80014b6:	bf00      	nop
 80014b8:	10320000 	.word	0x10320000
 80014bc:	10310000 	.word	0x10310000
 80014c0:	10220000 	.word	0x10220000
 80014c4:	10210000 	.word	0x10210000
 80014c8:	10120000 	.word	0x10120000
 80014cc:	10110000 	.word	0x10110000
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010000 	.word	0x40010000
 80014d8:	40010800 	.word	0x40010800
 80014dc:	40010c00 	.word	0x40010c00
 80014e0:	40011000 	.word	0x40011000
 80014e4:	40011400 	.word	0x40011400
 80014e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_GPIO_Init+0x304>)
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	4909      	ldr	r1, [pc, #36]	; (800151c <HAL_GPIO_Init+0x304>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	3301      	adds	r3, #1
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	fa22 f303 	lsr.w	r3, r2, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	f47f ae8e 	bne.w	800122c <HAL_GPIO_Init+0x14>
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	372c      	adds	r7, #44	; 0x2c
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	041a      	lsls	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	611a      	str	r2, [r3, #16]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e12b      	b.n	80017ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d106      	bne.n	800157c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fbd0 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2224      	movs	r2, #36	; 0x24
 8001580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015b4:	f001 fb6e 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 80015b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4a81      	ldr	r2, [pc, #516]	; (80017c4 <HAL_I2C_Init+0x274>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d807      	bhi.n	80015d4 <HAL_I2C_Init+0x84>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4a80      	ldr	r2, [pc, #512]	; (80017c8 <HAL_I2C_Init+0x278>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	bf94      	ite	ls
 80015cc:	2301      	movls	r3, #1
 80015ce:	2300      	movhi	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	e006      	b.n	80015e2 <HAL_I2C_Init+0x92>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a7d      	ldr	r2, [pc, #500]	; (80017cc <HAL_I2C_Init+0x27c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	bf94      	ite	ls
 80015dc:	2301      	movls	r3, #1
 80015de:	2300      	movhi	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e0e7      	b.n	80017ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4a78      	ldr	r2, [pc, #480]	; (80017d0 <HAL_I2C_Init+0x280>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0c9b      	lsrs	r3, r3, #18
 80015f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	430a      	orrs	r2, r1
 8001608:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4a6a      	ldr	r2, [pc, #424]	; (80017c4 <HAL_I2C_Init+0x274>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d802      	bhi.n	8001624 <HAL_I2C_Init+0xd4>
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	3301      	adds	r3, #1
 8001622:	e009      	b.n	8001638 <HAL_I2C_Init+0xe8>
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	4a69      	ldr	r2, [pc, #420]	; (80017d4 <HAL_I2C_Init+0x284>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	099b      	lsrs	r3, r3, #6
 8001636:	3301      	adds	r3, #1
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	430b      	orrs	r3, r1
 800163e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800164a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	495c      	ldr	r1, [pc, #368]	; (80017c4 <HAL_I2C_Init+0x274>)
 8001654:	428b      	cmp	r3, r1
 8001656:	d819      	bhi.n	800168c <HAL_I2C_Init+0x13c>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1e59      	subs	r1, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fbb1 f3f3 	udiv	r3, r1, r3
 8001666:	1c59      	adds	r1, r3, #1
 8001668:	f640 73fc 	movw	r3, #4092	; 0xffc
 800166c:	400b      	ands	r3, r1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00a      	beq.n	8001688 <HAL_I2C_Init+0x138>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1e59      	subs	r1, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001680:	3301      	adds	r3, #1
 8001682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001686:	e051      	b.n	800172c <HAL_I2C_Init+0x1dc>
 8001688:	2304      	movs	r3, #4
 800168a:	e04f      	b.n	800172c <HAL_I2C_Init+0x1dc>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d111      	bne.n	80016b8 <HAL_I2C_Init+0x168>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1e58      	subs	r0, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	440b      	add	r3, r1
 80016a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	bf0c      	ite	eq
 80016b0:	2301      	moveq	r3, #1
 80016b2:	2300      	movne	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	e012      	b.n	80016de <HAL_I2C_Init+0x18e>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	1e58      	subs	r0, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	0099      	lsls	r1, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ce:	3301      	adds	r3, #1
 80016d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf0c      	ite	eq
 80016d8:	2301      	moveq	r3, #1
 80016da:	2300      	movne	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_I2C_Init+0x196>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e022      	b.n	800172c <HAL_I2C_Init+0x1dc>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10e      	bne.n	800170c <HAL_I2C_Init+0x1bc>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1e58      	subs	r0, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6859      	ldr	r1, [r3, #4]
 80016f6:	460b      	mov	r3, r1
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	440b      	add	r3, r1
 80016fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001700:	3301      	adds	r3, #1
 8001702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800170a:	e00f      	b.n	800172c <HAL_I2C_Init+0x1dc>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1e58      	subs	r0, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	0099      	lsls	r1, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001722:	3301      	adds	r3, #1
 8001724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001728:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	6809      	ldr	r1, [r1, #0]
 8001730:	4313      	orrs	r3, r2
 8001732:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69da      	ldr	r2, [r3, #28]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800175a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6911      	ldr	r1, [r2, #16]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68d2      	ldr	r2, [r2, #12]
 8001766:	4311      	orrs	r1, r2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	430b      	orrs	r3, r1
 800176e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2220      	movs	r2, #32
 80017a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	000186a0 	.word	0x000186a0
 80017c8:	001e847f 	.word	0x001e847f
 80017cc:	003d08ff 	.word	0x003d08ff
 80017d0:	431bde83 	.word	0x431bde83
 80017d4:	10624dd3 	.word	0x10624dd3

080017d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af02      	add	r7, sp, #8
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	461a      	mov	r2, r3
 80017e4:	460b      	mov	r3, r1
 80017e6:	817b      	strh	r3, [r7, #10]
 80017e8:	4613      	mov	r3, r2
 80017ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff fc02 	bl	8000ff4 <HAL_GetTick>
 80017f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b20      	cmp	r3, #32
 80017fc:	f040 80e0 	bne.w	80019c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2319      	movs	r3, #25
 8001806:	2201      	movs	r2, #1
 8001808:	4970      	ldr	r1, [pc, #448]	; (80019cc <HAL_I2C_Master_Transmit+0x1f4>)
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 fc92 	bl	8002134 <I2C_WaitOnFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001816:	2302      	movs	r3, #2
 8001818:	e0d3      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_I2C_Master_Transmit+0x50>
 8001824:	2302      	movs	r3, #2
 8001826:	e0cc      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x1ea>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b01      	cmp	r3, #1
 800183c:	d007      	beq.n	800184e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0201 	orr.w	r2, r2, #1
 800184c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800185c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2221      	movs	r2, #33	; 0x21
 8001862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2210      	movs	r2, #16
 800186a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	893a      	ldrh	r2, [r7, #8]
 800187e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4a50      	ldr	r2, [pc, #320]	; (80019d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001890:	8979      	ldrh	r1, [r7, #10]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	6a3a      	ldr	r2, [r7, #32]
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 fafc 	bl	8001e94 <I2C_MasterRequestWrite>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e08d      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018bc:	e066      	b.n	800198c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	6a39      	ldr	r1, [r7, #32]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 fd0c 	bl	80022e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00d      	beq.n	80018ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d107      	bne.n	80018e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e06b      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001912:	3b01      	subs	r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b04      	cmp	r3, #4
 8001926:	d11b      	bne.n	8001960 <HAL_I2C_Master_Transmit+0x188>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192c:	2b00      	cmp	r3, #0
 800192e:	d017      	beq.n	8001960 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	781a      	ldrb	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194a:	b29b      	uxth	r3, r3
 800194c:	3b01      	subs	r3, #1
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	6a39      	ldr	r1, [r7, #32]
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 fcfc 	bl	8002362 <I2C_WaitOnBTFFlagUntilTimeout>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00d      	beq.n	800198c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	2b04      	cmp	r3, #4
 8001976:	d107      	bne.n	8001988 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001986:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e01a      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	d194      	bne.n	80018be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	e000      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019c0:	2302      	movs	r3, #2
  }
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	00100002 	.word	0x00100002
 80019d0:	ffff0000 	.word	0xffff0000

080019d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	460b      	mov	r3, r1
 80019e2:	817b      	strh	r3, [r7, #10]
 80019e4:	4613      	mov	r3, r2
 80019e6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff fb02 	bl	8000ff4 <HAL_GetTick>
 80019f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b20      	cmp	r3, #32
 80019fc:	f040 823f 	bne.w	8001e7e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2319      	movs	r3, #25
 8001a06:	2201      	movs	r2, #1
 8001a08:	497f      	ldr	r1, [pc, #508]	; (8001c08 <HAL_I2C_Master_Receive+0x234>)
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 fb92 	bl	8002134 <I2C_WaitOnFlagUntilTimeout>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001a16:	2302      	movs	r3, #2
 8001a18:	e232      	b.n	8001e80 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_I2C_Master_Receive+0x54>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e22b      	b.n	8001e80 <HAL_I2C_Master_Receive+0x4ac>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d007      	beq.n	8001a4e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0201 	orr.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2222      	movs	r2, #34	; 0x22
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2210      	movs	r2, #16
 8001a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	893a      	ldrh	r2, [r7, #8]
 8001a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4a5f      	ldr	r2, [pc, #380]	; (8001c0c <HAL_I2C_Master_Receive+0x238>)
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a90:	8979      	ldrh	r1, [r7, #10]
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 fa7e 	bl	8001f98 <I2C_MasterRequestRead>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e1ec      	b.n	8001e80 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d113      	bne.n	8001ad6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e1c0      	b.n	8001e58 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d11e      	bne.n	8001b1c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001aee:	b672      	cpsid	i
}
 8001af0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b18:	b662      	cpsie	i
}
 8001b1a:	e035      	b.n	8001b88 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d11e      	bne.n	8001b62 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b34:	b672      	cpsid	i
}
 8001b36:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b5e:	b662      	cpsie	i
}
 8001b60:	e012      	b.n	8001b88 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001b88:	e166      	b.n	8001e58 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	f200 811f 	bhi.w	8001dd2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d123      	bne.n	8001be4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f000 fc1f 	bl	80023e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e167      	b.n	8001e80 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001be2:	e139      	b.n	8001e58 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d152      	bne.n	8001c92 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4906      	ldr	r1, [pc, #24]	; (8001c10 <HAL_I2C_Master_Receive+0x23c>)
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fa9c 	bl	8002134 <I2C_WaitOnFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e13c      	b.n	8001e80 <HAL_I2C_Master_Receive+0x4ac>
 8001c06:	bf00      	nop
 8001c08:	00100002 	.word	0x00100002
 8001c0c:	ffff0000 	.word	0xffff0000
 8001c10:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001c14:	b672      	cpsid	i
}
 8001c16:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c5a:	b662      	cpsie	i
}
 8001c5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c90:	e0e2      	b.n	8001e58 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c98:	2200      	movs	r2, #0
 8001c9a:	497b      	ldr	r1, [pc, #492]	; (8001e88 <HAL_I2C_Master_Receive+0x4b4>)
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fa49 	bl	8002134 <I2C_WaitOnFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0e9      	b.n	8001e80 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbc:	b672      	cpsid	i
}
 8001cbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001cf2:	4b66      	ldr	r3, [pc, #408]	; (8001e8c <HAL_I2C_Master_Receive+0x4b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	08db      	lsrs	r3, r3, #3
 8001cf8:	4a65      	ldr	r2, [pc, #404]	; (8001e90 <HAL_I2C_Master_Receive+0x4bc>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	0a1a      	lsrs	r2, r3, #8
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	00da      	lsls	r2, r3, #3
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d118      	bne.n	8001d4a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2220      	movs	r2, #32
 8001d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f043 0220 	orr.w	r2, r3, #32
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001d3a:	b662      	cpsie	i
}
 8001d3c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e09a      	b.n	8001e80 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d1d9      	bne.n	8001d0c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d9a:	b662      	cpsie	i
}
 8001d9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dd0:	e042      	b.n	8001e58 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 fb04 	bl	80023e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e04c      	b.n	8001e80 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d118      	bne.n	8001e58 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f47f ae94 	bne.w	8001b8a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e000      	b.n	8001e80 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8001e7e:	2302      	movs	r3, #2
  }
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	00010004 	.word	0x00010004
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	14f8b589 	.word	0x14f8b589

08001e94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d006      	beq.n	8001ebe <I2C_MasterRequestWrite+0x2a>
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d003      	beq.n	8001ebe <I2C_MasterRequestWrite+0x2a>
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ebc:	d108      	bne.n	8001ed0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e00b      	b.n	8001ee8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	2b12      	cmp	r3, #18
 8001ed6:	d107      	bne.n	8001ee8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 f91d 	bl	8002134 <I2C_WaitOnFlagUntilTimeout>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00d      	beq.n	8001f1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0e:	d103      	bne.n	8001f18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e035      	b.n	8001f88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f24:	d108      	bne.n	8001f38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f26:	897b      	ldrh	r3, [r7, #10]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f34:	611a      	str	r2, [r3, #16]
 8001f36:	e01b      	b.n	8001f70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f38:	897b      	ldrh	r3, [r7, #10]
 8001f3a:	11db      	asrs	r3, r3, #7
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f003 0306 	and.w	r3, r3, #6
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f063 030f 	orn	r3, r3, #15
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	490e      	ldr	r1, [pc, #56]	; (8001f90 <I2C_MasterRequestWrite+0xfc>)
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f943 	bl	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e010      	b.n	8001f88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f66:	897b      	ldrh	r3, [r7, #10]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4907      	ldr	r1, [pc, #28]	; (8001f94 <I2C_MasterRequestWrite+0x100>)
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f933 	bl	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	00010008 	.word	0x00010008
 8001f94:	00010002 	.word	0x00010002

08001f98 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fbc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d006      	beq.n	8001fd2 <I2C_MasterRequestRead+0x3a>
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d003      	beq.n	8001fd2 <I2C_MasterRequestRead+0x3a>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fd0:	d108      	bne.n	8001fe4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e00b      	b.n	8001ffc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	2b11      	cmp	r3, #17
 8001fea:	d107      	bne.n	8001ffc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ffa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f893 	bl	8002134 <I2C_WaitOnFlagUntilTimeout>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00d      	beq.n	8002030 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002022:	d103      	bne.n	800202c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e079      	b.n	8002124 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002038:	d108      	bne.n	800204c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800203a:	897b      	ldrh	r3, [r7, #10]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	b2da      	uxtb	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	611a      	str	r2, [r3, #16]
 800204a:	e05f      	b.n	800210c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800204c:	897b      	ldrh	r3, [r7, #10]
 800204e:	11db      	asrs	r3, r3, #7
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f003 0306 	and.w	r3, r3, #6
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f063 030f 	orn	r3, r3, #15
 800205c:	b2da      	uxtb	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4930      	ldr	r1, [pc, #192]	; (800212c <I2C_MasterRequestRead+0x194>)
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f8b9 	bl	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e054      	b.n	8002124 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800207a:	897b      	ldrh	r3, [r7, #10]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4929      	ldr	r1, [pc, #164]	; (8002130 <I2C_MasterRequestRead+0x198>)
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f8a9 	bl	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e044      	b.n	8002124 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f831 	bl	8002134 <I2C_WaitOnFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00d      	beq.n	80020f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e6:	d103      	bne.n	80020f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e017      	b.n	8002124 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80020f4:	897b      	ldrh	r3, [r7, #10]
 80020f6:	11db      	asrs	r3, r3, #7
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f003 0306 	and.w	r3, r3, #6
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f063 030e 	orn	r3, r3, #14
 8002104:	b2da      	uxtb	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4907      	ldr	r1, [pc, #28]	; (8002130 <I2C_MasterRequestRead+0x198>)
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f865 	bl	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	00010008 	.word	0x00010008
 8002130:	00010002 	.word	0x00010002

08002134 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	4613      	mov	r3, r2
 8002142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002144:	e025      	b.n	8002192 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d021      	beq.n	8002192 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214e:	f7fe ff51 	bl	8000ff4 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d302      	bcc.n	8002164 <I2C_WaitOnFlagUntilTimeout+0x30>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d116      	bne.n	8002192 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f043 0220 	orr.w	r2, r3, #32
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e023      	b.n	80021da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	0c1b      	lsrs	r3, r3, #16
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d10d      	bne.n	80021b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4013      	ands	r3, r2
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bf0c      	ite	eq
 80021ae:	2301      	moveq	r3, #1
 80021b0:	2300      	movne	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	e00c      	b.n	80021d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4013      	ands	r3, r2
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d0b6      	beq.n	8002146 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021f0:	e051      	b.n	8002296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002200:	d123      	bne.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002210:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800221a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f043 0204 	orr.w	r2, r3, #4
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e046      	b.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d021      	beq.n	8002296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002252:	f7fe fecf 	bl	8000ff4 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	429a      	cmp	r2, r3
 8002260:	d302      	bcc.n	8002268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d116      	bne.n	8002296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2220      	movs	r2, #32
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f043 0220 	orr.w	r2, r3, #32
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e020      	b.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d10c      	bne.n	80022ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	43da      	mvns	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4013      	ands	r3, r2
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf14      	ite	ne
 80022b2:	2301      	movne	r3, #1
 80022b4:	2300      	moveq	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	e00b      	b.n	80022d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	43da      	mvns	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	4013      	ands	r3, r2
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf14      	ite	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	2300      	moveq	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d18d      	bne.n	80021f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ec:	e02d      	b.n	800234a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f8ce 	bl	8002490 <I2C_IsAcknowledgeFailed>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e02d      	b.n	800235a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d021      	beq.n	800234a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002306:	f7fe fe75 	bl	8000ff4 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	429a      	cmp	r2, r3
 8002314:	d302      	bcc.n	800231c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d116      	bne.n	800234a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f043 0220 	orr.w	r2, r3, #32
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e007      	b.n	800235a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002354:	2b80      	cmp	r3, #128	; 0x80
 8002356:	d1ca      	bne.n	80022ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800236e:	e02d      	b.n	80023cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f88d 	bl	8002490 <I2C_IsAcknowledgeFailed>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e02d      	b.n	80023dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002386:	d021      	beq.n	80023cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002388:	f7fe fe34 	bl	8000ff4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	429a      	cmp	r2, r3
 8002396:	d302      	bcc.n	800239e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d116      	bne.n	80023cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f043 0220 	orr.w	r2, r3, #32
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e007      	b.n	80023dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d1ca      	bne.n	8002370 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023f0:	e042      	b.n	8002478 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d119      	bne.n	8002434 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0210 	mvn.w	r2, #16
 8002408:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e029      	b.n	8002488 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002434:	f7fe fdde 	bl	8000ff4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	429a      	cmp	r2, r3
 8002442:	d302      	bcc.n	800244a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d116      	bne.n	8002478 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	f043 0220 	orr.w	r2, r3, #32
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e007      	b.n	8002488 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002482:	2b40      	cmp	r3, #64	; 0x40
 8002484:	d1b5      	bne.n	80023f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a6:	d11b      	bne.n	80024e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f043 0204 	orr.w	r2, r3, #4
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e26c      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8087 	beq.w	800261a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800250c:	4b92      	ldr	r3, [pc, #584]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b04      	cmp	r3, #4
 8002516:	d00c      	beq.n	8002532 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002518:	4b8f      	ldr	r3, [pc, #572]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d112      	bne.n	800254a <HAL_RCC_OscConfig+0x5e>
 8002524:	4b8c      	ldr	r3, [pc, #560]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d10b      	bne.n	800254a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002532:	4b89      	ldr	r3, [pc, #548]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d06c      	beq.n	8002618 <HAL_RCC_OscConfig+0x12c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d168      	bne.n	8002618 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e246      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x76>
 8002554:	4b80      	ldr	r3, [pc, #512]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a7f      	ldr	r2, [pc, #508]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	e02e      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x98>
 800256a:	4b7b      	ldr	r3, [pc, #492]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7a      	ldr	r2, [pc, #488]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b78      	ldr	r3, [pc, #480]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a77      	ldr	r2, [pc, #476]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800257c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e01d      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0xbc>
 800258e:	4b72      	ldr	r3, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a71      	ldr	r2, [pc, #452]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6e      	ldr	r2, [pc, #440]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 80025a8:	4b6b      	ldr	r3, [pc, #428]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6a      	ldr	r2, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b68      	ldr	r3, [pc, #416]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a67      	ldr	r2, [pc, #412]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d013      	beq.n	80025f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7fe fd14 	bl	8000ff4 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7fe fd10 	bl	8000ff4 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1fa      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b5d      	ldr	r3, [pc, #372]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0xe4>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fd00 	bl	8000ff4 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7fe fcfc 	bl	8000ff4 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1e6      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x10c>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d063      	beq.n	80026ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002626:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002632:	4b49      	ldr	r3, [pc, #292]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b08      	cmp	r3, #8
 800263c:	d11c      	bne.n	8002678 <HAL_RCC_OscConfig+0x18c>
 800263e:	4b46      	ldr	r3, [pc, #280]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d116      	bne.n	8002678 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	4b43      	ldr	r3, [pc, #268]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x176>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e1ba      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4939      	ldr	r1, [pc, #228]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	e03a      	b.n	80026ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7fe fcb5 	bl	8000ff4 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268e:	f7fe fcb1 	bl	8000ff4 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e19b      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4927      	ldr	r1, [pc, #156]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
 80026c0:	e015      	b.n	80026ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe fc94 	bl	8000ff4 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d0:	f7fe fc90 	bl	8000ff4 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e17a      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d03a      	beq.n	8002770 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d019      	beq.n	8002736 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_RCC_OscConfig+0x274>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002708:	f7fe fc74 	bl	8000ff4 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002710:	f7fe fc70 	bl	8000ff4 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e15a      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800272e:	2001      	movs	r0, #1
 8002730:	f000 fad8 	bl	8002ce4 <RCC_Delay>
 8002734:	e01c      	b.n	8002770 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_RCC_OscConfig+0x274>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7fe fc5a 	bl	8000ff4 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002742:	e00f      	b.n	8002764 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002744:	f7fe fc56 	bl	8000ff4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d908      	bls.n	8002764 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e140      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	42420000 	.word	0x42420000
 8002760:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	4b9e      	ldr	r3, [pc, #632]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e9      	bne.n	8002744 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a6 	beq.w	80028ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002782:	4b97      	ldr	r3, [pc, #604]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b94      	ldr	r3, [pc, #592]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a93      	ldr	r2, [pc, #588]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]
 800279a:	4b91      	ldr	r3, [pc, #580]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4b8e      	ldr	r3, [pc, #568]	; (80029e4 <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d118      	bne.n	80027e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b6:	4b8b      	ldr	r3, [pc, #556]	; (80029e4 <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a8a      	ldr	r2, [pc, #552]	; (80029e4 <HAL_RCC_OscConfig+0x4f8>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c2:	f7fe fc17 	bl	8000ff4 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ca:	f7fe fc13 	bl	8000ff4 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b64      	cmp	r3, #100	; 0x64
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e0fd      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	4b81      	ldr	r3, [pc, #516]	; (80029e4 <HAL_RCC_OscConfig+0x4f8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d106      	bne.n	80027fe <HAL_RCC_OscConfig+0x312>
 80027f0:	4b7b      	ldr	r3, [pc, #492]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4a7a      	ldr	r2, [pc, #488]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6213      	str	r3, [r2, #32]
 80027fc:	e02d      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0x334>
 8002806:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4a75      	ldr	r2, [pc, #468]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6213      	str	r3, [r2, #32]
 8002812:	4b73      	ldr	r3, [pc, #460]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4a72      	ldr	r2, [pc, #456]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002818:	f023 0304 	bic.w	r3, r3, #4
 800281c:	6213      	str	r3, [r2, #32]
 800281e:	e01c      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b05      	cmp	r3, #5
 8002826:	d10c      	bne.n	8002842 <HAL_RCC_OscConfig+0x356>
 8002828:	4b6d      	ldr	r3, [pc, #436]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4a6c      	ldr	r2, [pc, #432]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	6213      	str	r3, [r2, #32]
 8002834:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4a69      	ldr	r2, [pc, #420]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6213      	str	r3, [r2, #32]
 8002840:	e00b      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 8002842:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4a66      	ldr	r2, [pc, #408]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	6213      	str	r3, [r2, #32]
 800284e:	4b64      	ldr	r3, [pc, #400]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4a63      	ldr	r2, [pc, #396]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002854:	f023 0304 	bic.w	r3, r3, #4
 8002858:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d015      	beq.n	800288e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7fe fbc7 	bl	8000ff4 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7fe fbc3 	bl	8000ff4 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0ab      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	4b57      	ldr	r3, [pc, #348]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ee      	beq.n	800286a <HAL_RCC_OscConfig+0x37e>
 800288c:	e014      	b.n	80028b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7fe fbb1 	bl	8000ff4 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7fe fbad 	bl	8000ff4 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e095      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ac:	4b4c      	ldr	r3, [pc, #304]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ee      	bne.n	8002896 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d105      	bne.n	80028ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028be:	4b48      	ldr	r3, [pc, #288]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4a47      	ldr	r2, [pc, #284]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8081 	beq.w	80029d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d4:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d061      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d146      	bne.n	8002976 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e8:	4b3f      	ldr	r3, [pc, #252]	; (80029e8 <HAL_RCC_OscConfig+0x4fc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7fe fb81 	bl	8000ff4 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f6:	f7fe fb7d 	bl	8000ff4 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e067      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002908:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d108      	bne.n	8002930 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800291e:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	492d      	ldr	r1, [pc, #180]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002930:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a19      	ldr	r1, [r3, #32]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	430b      	orrs	r3, r1
 8002942:	4927      	ldr	r1, [pc, #156]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002948:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <HAL_RCC_OscConfig+0x4fc>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7fe fb51 	bl	8000ff4 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002956:	f7fe fb4d 	bl	8000ff4 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e037      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x46a>
 8002974:	e02f      	b.n	80029d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_RCC_OscConfig+0x4fc>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe fb3a 	bl	8000ff4 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe fb36 	bl	8000ff4 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e020      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x498>
 80029a2:	e018      	b.n	80029d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e013      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	42420060 	.word	0x42420060

080029ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0d0      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b6a      	ldr	r3, [pc, #424]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d910      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b67      	ldr	r3, [pc, #412]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	4965      	ldr	r1, [pc, #404]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b63      	ldr	r3, [pc, #396]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0b8      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d020      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a48:	4b59      	ldr	r3, [pc, #356]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a58      	ldr	r2, [pc, #352]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a60:	4b53      	ldr	r3, [pc, #332]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a52      	ldr	r2, [pc, #328]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a6c:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	494d      	ldr	r1, [pc, #308]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d040      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d115      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e07f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aaa:	4b41      	ldr	r3, [pc, #260]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e073      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aba:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06b      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aca:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f023 0203 	bic.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4936      	ldr	r1, [pc, #216]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002adc:	f7fe fa8a 	bl	8000ff4 <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae4:	f7fe fa86 	bl	8000ff4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e053      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 020c 	and.w	r2, r3, #12
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d1eb      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b27      	ldr	r3, [pc, #156]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d210      	bcs.n	8002b3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b24      	ldr	r3, [pc, #144]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 0207 	bic.w	r2, r3, #7
 8002b22:	4922      	ldr	r1, [pc, #136]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e032      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b48:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4916      	ldr	r1, [pc, #88]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b66:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	490e      	ldr	r1, [pc, #56]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b7a:	f000 f821 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	490a      	ldr	r1, [pc, #40]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8c:	5ccb      	ldrb	r3, [r1, r3]
 8002b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b92:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x1d0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe f9e8 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	080039b4 	.word	0x080039b4
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004

08002bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc0:	b490      	push	{r4, r7}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bc6:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bc8:	1d3c      	adds	r4, r7, #4
 8002bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bd0:	f240 2301 	movw	r3, #513	; 0x201
 8002bd4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d002      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x40>
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0x46>
 8002bfe:	e02d      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c02:	623b      	str	r3, [r7, #32]
      break;
 8002c04:	e02d      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	0c9b      	lsrs	r3, r3, #18
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c12:	4413      	add	r3, r2
 8002c14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c24:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0c5b      	lsrs	r3, r3, #17
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c32:	4413      	add	r3, r2
 8002c34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c3e:	fb02 f203 	mul.w	r2, r2, r3
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	e004      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	623b      	str	r3, [r7, #32]
      break;
 8002c5a:	e002      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c5e:	623b      	str	r3, [r7, #32]
      break;
 8002c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c62:	6a3b      	ldr	r3, [r7, #32]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3728      	adds	r7, #40	; 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc90      	pop	{r4, r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	080039a4 	.word	0x080039a4
 8002c74:	40021000 	.word	0x40021000
 8002c78:	007a1200 	.word	0x007a1200
 8002c7c:	003d0900 	.word	0x003d0900

08002c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c84:	4b02      	ldr	r3, [pc, #8]	; (8002c90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	20000000 	.word	0x20000000

08002c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c98:	f7ff fff2 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	4903      	ldr	r1, [pc, #12]	; (8002cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002caa:	5ccb      	ldrb	r3, [r1, r3]
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	080039c4 	.word	0x080039c4

08002cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cc0:	f7ff ffde 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	0adb      	lsrs	r3, r3, #11
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	4903      	ldr	r1, [pc, #12]	; (8002ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd2:	5ccb      	ldrb	r3, [r1, r3]
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	080039c4 	.word	0x080039c4

08002ce4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <RCC_Delay+0x34>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <RCC_Delay+0x38>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	0a5b      	lsrs	r3, r3, #9
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d00:	bf00      	nop
  }
  while (Delay --);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1e5a      	subs	r2, r3, #1
 8002d06:	60fa      	str	r2, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f9      	bne.n	8002d00 <RCC_Delay+0x1c>
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	10624dd3 	.word	0x10624dd3

08002d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e03f      	b.n	8002db2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe f826 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	; 0x24
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f905 	bl	8002f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b08a      	sub	sp, #40	; 0x28
 8002dbe:	af02      	add	r7, sp, #8
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d17c      	bne.n	8002ed4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <HAL_UART_Transmit+0x2c>
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e075      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_UART_Transmit+0x3e>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e06e      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2221      	movs	r2, #33	; 0x21
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e0e:	f7fe f8f1 	bl	8000ff4 <HAL_GetTick>
 8002e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	88fa      	ldrh	r2, [r7, #6]
 8002e18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	88fa      	ldrh	r2, [r7, #6]
 8002e1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e28:	d108      	bne.n	8002e3c <HAL_UART_Transmit+0x82>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d104      	bne.n	8002e3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	e003      	b.n	8002e44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e4c:	e02a      	b.n	8002ea4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f840 	bl	8002ede <UART_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e036      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10b      	bne.n	8002e86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	3302      	adds	r3, #2
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	e007      	b.n	8002e96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	3301      	adds	r3, #1
 8002e94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1cf      	bne.n	8002e4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2140      	movs	r1, #64	; 0x40
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f810 	bl	8002ede <UART_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e006      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e000      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	4613      	mov	r3, r2
 8002eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eee:	e02c      	b.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d028      	beq.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x30>
 8002efe:	f7fe f879 	bl	8000ff4 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d21d      	bcs.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f1c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e00f      	b.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d0c3      	beq.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fae:	f023 030c 	bic.w	r3, r3, #12
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2c      	ldr	r2, [pc, #176]	; (8003088 <UART_SetConfig+0x114>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d103      	bne.n	8002fe4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fdc:	f7ff fe6e 	bl	8002cbc <HAL_RCC_GetPCLK2Freq>
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	e002      	b.n	8002fea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fe4:	f7ff fe56 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 8002fe8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009a      	lsls	r2, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	4a22      	ldr	r2, [pc, #136]	; (800308c <UART_SetConfig+0x118>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	0119      	lsls	r1, r3, #4
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009a      	lsls	r2, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <UART_SetConfig+0x118>)
 8003022:	fba3 0302 	umull	r0, r3, r3, r2
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	2064      	movs	r0, #100	; 0x64
 800302a:	fb00 f303 	mul.w	r3, r0, r3
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	3332      	adds	r3, #50	; 0x32
 8003034:	4a15      	ldr	r2, [pc, #84]	; (800308c <UART_SetConfig+0x118>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003040:	4419      	add	r1, r3
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	009a      	lsls	r2, r3, #2
 800304c:	441a      	add	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	fbb2 f2f3 	udiv	r2, r2, r3
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <UART_SetConfig+0x118>)
 800305a:	fba3 0302 	umull	r0, r3, r3, r2
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2064      	movs	r0, #100	; 0x64
 8003062:	fb00 f303 	mul.w	r3, r0, r3
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	3332      	adds	r3, #50	; 0x32
 800306c:	4a07      	ldr	r2, [pc, #28]	; (800308c <UART_SetConfig+0x118>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	f003 020f 	and.w	r2, r3, #15
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	440a      	add	r2, r1
 800307e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40013800 	.word	0x40013800
 800308c:	51eb851f 	.word	0x51eb851f

08003090 <__errno>:
 8003090:	4b01      	ldr	r3, [pc, #4]	; (8003098 <__errno+0x8>)
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	2000000c 	.word	0x2000000c

0800309c <__libc_init_array>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	2600      	movs	r6, #0
 80030a0:	4d0c      	ldr	r5, [pc, #48]	; (80030d4 <__libc_init_array+0x38>)
 80030a2:	4c0d      	ldr	r4, [pc, #52]	; (80030d8 <__libc_init_array+0x3c>)
 80030a4:	1b64      	subs	r4, r4, r5
 80030a6:	10a4      	asrs	r4, r4, #2
 80030a8:	42a6      	cmp	r6, r4
 80030aa:	d109      	bne.n	80030c0 <__libc_init_array+0x24>
 80030ac:	f000 fc5c 	bl	8003968 <_init>
 80030b0:	2600      	movs	r6, #0
 80030b2:	4d0a      	ldr	r5, [pc, #40]	; (80030dc <__libc_init_array+0x40>)
 80030b4:	4c0a      	ldr	r4, [pc, #40]	; (80030e0 <__libc_init_array+0x44>)
 80030b6:	1b64      	subs	r4, r4, r5
 80030b8:	10a4      	asrs	r4, r4, #2
 80030ba:	42a6      	cmp	r6, r4
 80030bc:	d105      	bne.n	80030ca <__libc_init_array+0x2e>
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c4:	4798      	blx	r3
 80030c6:	3601      	adds	r6, #1
 80030c8:	e7ee      	b.n	80030a8 <__libc_init_array+0xc>
 80030ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ce:	4798      	blx	r3
 80030d0:	3601      	adds	r6, #1
 80030d2:	e7f2      	b.n	80030ba <__libc_init_array+0x1e>
 80030d4:	08003a00 	.word	0x08003a00
 80030d8:	08003a00 	.word	0x08003a00
 80030dc:	08003a00 	.word	0x08003a00
 80030e0:	08003a04 	.word	0x08003a04

080030e4 <memset>:
 80030e4:	4603      	mov	r3, r0
 80030e6:	4402      	add	r2, r0
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d100      	bne.n	80030ee <memset+0xa>
 80030ec:	4770      	bx	lr
 80030ee:	f803 1b01 	strb.w	r1, [r3], #1
 80030f2:	e7f9      	b.n	80030e8 <memset+0x4>

080030f4 <siprintf>:
 80030f4:	b40e      	push	{r1, r2, r3}
 80030f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030fa:	b500      	push	{lr}
 80030fc:	b09c      	sub	sp, #112	; 0x70
 80030fe:	ab1d      	add	r3, sp, #116	; 0x74
 8003100:	9002      	str	r0, [sp, #8]
 8003102:	9006      	str	r0, [sp, #24]
 8003104:	9107      	str	r1, [sp, #28]
 8003106:	9104      	str	r1, [sp, #16]
 8003108:	4808      	ldr	r0, [pc, #32]	; (800312c <siprintf+0x38>)
 800310a:	4909      	ldr	r1, [pc, #36]	; (8003130 <siprintf+0x3c>)
 800310c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003110:	9105      	str	r1, [sp, #20]
 8003112:	6800      	ldr	r0, [r0, #0]
 8003114:	a902      	add	r1, sp, #8
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	f000 f868 	bl	80031ec <_svfiprintf_r>
 800311c:	2200      	movs	r2, #0
 800311e:	9b02      	ldr	r3, [sp, #8]
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	b01c      	add	sp, #112	; 0x70
 8003124:	f85d eb04 	ldr.w	lr, [sp], #4
 8003128:	b003      	add	sp, #12
 800312a:	4770      	bx	lr
 800312c:	2000000c 	.word	0x2000000c
 8003130:	ffff0208 	.word	0xffff0208

08003134 <__ssputs_r>:
 8003134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003138:	688e      	ldr	r6, [r1, #8]
 800313a:	4682      	mov	sl, r0
 800313c:	429e      	cmp	r6, r3
 800313e:	460c      	mov	r4, r1
 8003140:	4690      	mov	r8, r2
 8003142:	461f      	mov	r7, r3
 8003144:	d838      	bhi.n	80031b8 <__ssputs_r+0x84>
 8003146:	898a      	ldrh	r2, [r1, #12]
 8003148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800314c:	d032      	beq.n	80031b4 <__ssputs_r+0x80>
 800314e:	6825      	ldr	r5, [r4, #0]
 8003150:	6909      	ldr	r1, [r1, #16]
 8003152:	3301      	adds	r3, #1
 8003154:	eba5 0901 	sub.w	r9, r5, r1
 8003158:	6965      	ldr	r5, [r4, #20]
 800315a:	444b      	add	r3, r9
 800315c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003164:	106d      	asrs	r5, r5, #1
 8003166:	429d      	cmp	r5, r3
 8003168:	bf38      	it	cc
 800316a:	461d      	movcc	r5, r3
 800316c:	0553      	lsls	r3, r2, #21
 800316e:	d531      	bpl.n	80031d4 <__ssputs_r+0xa0>
 8003170:	4629      	mov	r1, r5
 8003172:	f000 fb53 	bl	800381c <_malloc_r>
 8003176:	4606      	mov	r6, r0
 8003178:	b950      	cbnz	r0, 8003190 <__ssputs_r+0x5c>
 800317a:	230c      	movs	r3, #12
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	f8ca 3000 	str.w	r3, [sl]
 8003184:	89a3      	ldrh	r3, [r4, #12]
 8003186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800318a:	81a3      	strh	r3, [r4, #12]
 800318c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003190:	464a      	mov	r2, r9
 8003192:	6921      	ldr	r1, [r4, #16]
 8003194:	f000 face 	bl	8003734 <memcpy>
 8003198:	89a3      	ldrh	r3, [r4, #12]
 800319a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800319e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a2:	81a3      	strh	r3, [r4, #12]
 80031a4:	6126      	str	r6, [r4, #16]
 80031a6:	444e      	add	r6, r9
 80031a8:	6026      	str	r6, [r4, #0]
 80031aa:	463e      	mov	r6, r7
 80031ac:	6165      	str	r5, [r4, #20]
 80031ae:	eba5 0509 	sub.w	r5, r5, r9
 80031b2:	60a5      	str	r5, [r4, #8]
 80031b4:	42be      	cmp	r6, r7
 80031b6:	d900      	bls.n	80031ba <__ssputs_r+0x86>
 80031b8:	463e      	mov	r6, r7
 80031ba:	4632      	mov	r2, r6
 80031bc:	4641      	mov	r1, r8
 80031be:	6820      	ldr	r0, [r4, #0]
 80031c0:	f000 fac6 	bl	8003750 <memmove>
 80031c4:	68a3      	ldr	r3, [r4, #8]
 80031c6:	6822      	ldr	r2, [r4, #0]
 80031c8:	1b9b      	subs	r3, r3, r6
 80031ca:	4432      	add	r2, r6
 80031cc:	2000      	movs	r0, #0
 80031ce:	60a3      	str	r3, [r4, #8]
 80031d0:	6022      	str	r2, [r4, #0]
 80031d2:	e7db      	b.n	800318c <__ssputs_r+0x58>
 80031d4:	462a      	mov	r2, r5
 80031d6:	f000 fb7b 	bl	80038d0 <_realloc_r>
 80031da:	4606      	mov	r6, r0
 80031dc:	2800      	cmp	r0, #0
 80031de:	d1e1      	bne.n	80031a4 <__ssputs_r+0x70>
 80031e0:	4650      	mov	r0, sl
 80031e2:	6921      	ldr	r1, [r4, #16]
 80031e4:	f000 face 	bl	8003784 <_free_r>
 80031e8:	e7c7      	b.n	800317a <__ssputs_r+0x46>
	...

080031ec <_svfiprintf_r>:
 80031ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f0:	4698      	mov	r8, r3
 80031f2:	898b      	ldrh	r3, [r1, #12]
 80031f4:	4607      	mov	r7, r0
 80031f6:	061b      	lsls	r3, r3, #24
 80031f8:	460d      	mov	r5, r1
 80031fa:	4614      	mov	r4, r2
 80031fc:	b09d      	sub	sp, #116	; 0x74
 80031fe:	d50e      	bpl.n	800321e <_svfiprintf_r+0x32>
 8003200:	690b      	ldr	r3, [r1, #16]
 8003202:	b963      	cbnz	r3, 800321e <_svfiprintf_r+0x32>
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	f000 fb09 	bl	800381c <_malloc_r>
 800320a:	6028      	str	r0, [r5, #0]
 800320c:	6128      	str	r0, [r5, #16]
 800320e:	b920      	cbnz	r0, 800321a <_svfiprintf_r+0x2e>
 8003210:	230c      	movs	r3, #12
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	e0d1      	b.n	80033be <_svfiprintf_r+0x1d2>
 800321a:	2340      	movs	r3, #64	; 0x40
 800321c:	616b      	str	r3, [r5, #20]
 800321e:	2300      	movs	r3, #0
 8003220:	9309      	str	r3, [sp, #36]	; 0x24
 8003222:	2320      	movs	r3, #32
 8003224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003228:	2330      	movs	r3, #48	; 0x30
 800322a:	f04f 0901 	mov.w	r9, #1
 800322e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003232:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80033d8 <_svfiprintf_r+0x1ec>
 8003236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800323a:	4623      	mov	r3, r4
 800323c:	469a      	mov	sl, r3
 800323e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003242:	b10a      	cbz	r2, 8003248 <_svfiprintf_r+0x5c>
 8003244:	2a25      	cmp	r2, #37	; 0x25
 8003246:	d1f9      	bne.n	800323c <_svfiprintf_r+0x50>
 8003248:	ebba 0b04 	subs.w	fp, sl, r4
 800324c:	d00b      	beq.n	8003266 <_svfiprintf_r+0x7a>
 800324e:	465b      	mov	r3, fp
 8003250:	4622      	mov	r2, r4
 8003252:	4629      	mov	r1, r5
 8003254:	4638      	mov	r0, r7
 8003256:	f7ff ff6d 	bl	8003134 <__ssputs_r>
 800325a:	3001      	adds	r0, #1
 800325c:	f000 80aa 	beq.w	80033b4 <_svfiprintf_r+0x1c8>
 8003260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003262:	445a      	add	r2, fp
 8003264:	9209      	str	r2, [sp, #36]	; 0x24
 8003266:	f89a 3000 	ldrb.w	r3, [sl]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80a2 	beq.w	80033b4 <_svfiprintf_r+0x1c8>
 8003270:	2300      	movs	r3, #0
 8003272:	f04f 32ff 	mov.w	r2, #4294967295
 8003276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800327a:	f10a 0a01 	add.w	sl, sl, #1
 800327e:	9304      	str	r3, [sp, #16]
 8003280:	9307      	str	r3, [sp, #28]
 8003282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003286:	931a      	str	r3, [sp, #104]	; 0x68
 8003288:	4654      	mov	r4, sl
 800328a:	2205      	movs	r2, #5
 800328c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003290:	4851      	ldr	r0, [pc, #324]	; (80033d8 <_svfiprintf_r+0x1ec>)
 8003292:	f000 fa41 	bl	8003718 <memchr>
 8003296:	9a04      	ldr	r2, [sp, #16]
 8003298:	b9d8      	cbnz	r0, 80032d2 <_svfiprintf_r+0xe6>
 800329a:	06d0      	lsls	r0, r2, #27
 800329c:	bf44      	itt	mi
 800329e:	2320      	movmi	r3, #32
 80032a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032a4:	0711      	lsls	r1, r2, #28
 80032a6:	bf44      	itt	mi
 80032a8:	232b      	movmi	r3, #43	; 0x2b
 80032aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032ae:	f89a 3000 	ldrb.w	r3, [sl]
 80032b2:	2b2a      	cmp	r3, #42	; 0x2a
 80032b4:	d015      	beq.n	80032e2 <_svfiprintf_r+0xf6>
 80032b6:	4654      	mov	r4, sl
 80032b8:	2000      	movs	r0, #0
 80032ba:	f04f 0c0a 	mov.w	ip, #10
 80032be:	9a07      	ldr	r2, [sp, #28]
 80032c0:	4621      	mov	r1, r4
 80032c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032c6:	3b30      	subs	r3, #48	; 0x30
 80032c8:	2b09      	cmp	r3, #9
 80032ca:	d94e      	bls.n	800336a <_svfiprintf_r+0x17e>
 80032cc:	b1b0      	cbz	r0, 80032fc <_svfiprintf_r+0x110>
 80032ce:	9207      	str	r2, [sp, #28]
 80032d0:	e014      	b.n	80032fc <_svfiprintf_r+0x110>
 80032d2:	eba0 0308 	sub.w	r3, r0, r8
 80032d6:	fa09 f303 	lsl.w	r3, r9, r3
 80032da:	4313      	orrs	r3, r2
 80032dc:	46a2      	mov	sl, r4
 80032de:	9304      	str	r3, [sp, #16]
 80032e0:	e7d2      	b.n	8003288 <_svfiprintf_r+0x9c>
 80032e2:	9b03      	ldr	r3, [sp, #12]
 80032e4:	1d19      	adds	r1, r3, #4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	9103      	str	r1, [sp, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bfbb      	ittet	lt
 80032ee:	425b      	neglt	r3, r3
 80032f0:	f042 0202 	orrlt.w	r2, r2, #2
 80032f4:	9307      	strge	r3, [sp, #28]
 80032f6:	9307      	strlt	r3, [sp, #28]
 80032f8:	bfb8      	it	lt
 80032fa:	9204      	strlt	r2, [sp, #16]
 80032fc:	7823      	ldrb	r3, [r4, #0]
 80032fe:	2b2e      	cmp	r3, #46	; 0x2e
 8003300:	d10c      	bne.n	800331c <_svfiprintf_r+0x130>
 8003302:	7863      	ldrb	r3, [r4, #1]
 8003304:	2b2a      	cmp	r3, #42	; 0x2a
 8003306:	d135      	bne.n	8003374 <_svfiprintf_r+0x188>
 8003308:	9b03      	ldr	r3, [sp, #12]
 800330a:	3402      	adds	r4, #2
 800330c:	1d1a      	adds	r2, r3, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	9203      	str	r2, [sp, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	bfb8      	it	lt
 8003316:	f04f 33ff 	movlt.w	r3, #4294967295
 800331a:	9305      	str	r3, [sp, #20]
 800331c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80033e8 <_svfiprintf_r+0x1fc>
 8003320:	2203      	movs	r2, #3
 8003322:	4650      	mov	r0, sl
 8003324:	7821      	ldrb	r1, [r4, #0]
 8003326:	f000 f9f7 	bl	8003718 <memchr>
 800332a:	b140      	cbz	r0, 800333e <_svfiprintf_r+0x152>
 800332c:	2340      	movs	r3, #64	; 0x40
 800332e:	eba0 000a 	sub.w	r0, r0, sl
 8003332:	fa03 f000 	lsl.w	r0, r3, r0
 8003336:	9b04      	ldr	r3, [sp, #16]
 8003338:	3401      	adds	r4, #1
 800333a:	4303      	orrs	r3, r0
 800333c:	9304      	str	r3, [sp, #16]
 800333e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003342:	2206      	movs	r2, #6
 8003344:	4825      	ldr	r0, [pc, #148]	; (80033dc <_svfiprintf_r+0x1f0>)
 8003346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800334a:	f000 f9e5 	bl	8003718 <memchr>
 800334e:	2800      	cmp	r0, #0
 8003350:	d038      	beq.n	80033c4 <_svfiprintf_r+0x1d8>
 8003352:	4b23      	ldr	r3, [pc, #140]	; (80033e0 <_svfiprintf_r+0x1f4>)
 8003354:	bb1b      	cbnz	r3, 800339e <_svfiprintf_r+0x1b2>
 8003356:	9b03      	ldr	r3, [sp, #12]
 8003358:	3307      	adds	r3, #7
 800335a:	f023 0307 	bic.w	r3, r3, #7
 800335e:	3308      	adds	r3, #8
 8003360:	9303      	str	r3, [sp, #12]
 8003362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003364:	4433      	add	r3, r6
 8003366:	9309      	str	r3, [sp, #36]	; 0x24
 8003368:	e767      	b.n	800323a <_svfiprintf_r+0x4e>
 800336a:	460c      	mov	r4, r1
 800336c:	2001      	movs	r0, #1
 800336e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003372:	e7a5      	b.n	80032c0 <_svfiprintf_r+0xd4>
 8003374:	2300      	movs	r3, #0
 8003376:	f04f 0c0a 	mov.w	ip, #10
 800337a:	4619      	mov	r1, r3
 800337c:	3401      	adds	r4, #1
 800337e:	9305      	str	r3, [sp, #20]
 8003380:	4620      	mov	r0, r4
 8003382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003386:	3a30      	subs	r2, #48	; 0x30
 8003388:	2a09      	cmp	r2, #9
 800338a:	d903      	bls.n	8003394 <_svfiprintf_r+0x1a8>
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0c5      	beq.n	800331c <_svfiprintf_r+0x130>
 8003390:	9105      	str	r1, [sp, #20]
 8003392:	e7c3      	b.n	800331c <_svfiprintf_r+0x130>
 8003394:	4604      	mov	r4, r0
 8003396:	2301      	movs	r3, #1
 8003398:	fb0c 2101 	mla	r1, ip, r1, r2
 800339c:	e7f0      	b.n	8003380 <_svfiprintf_r+0x194>
 800339e:	ab03      	add	r3, sp, #12
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	462a      	mov	r2, r5
 80033a4:	4638      	mov	r0, r7
 80033a6:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <_svfiprintf_r+0x1f8>)
 80033a8:	a904      	add	r1, sp, #16
 80033aa:	f3af 8000 	nop.w
 80033ae:	1c42      	adds	r2, r0, #1
 80033b0:	4606      	mov	r6, r0
 80033b2:	d1d6      	bne.n	8003362 <_svfiprintf_r+0x176>
 80033b4:	89ab      	ldrh	r3, [r5, #12]
 80033b6:	065b      	lsls	r3, r3, #25
 80033b8:	f53f af2c 	bmi.w	8003214 <_svfiprintf_r+0x28>
 80033bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033be:	b01d      	add	sp, #116	; 0x74
 80033c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033c4:	ab03      	add	r3, sp, #12
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	462a      	mov	r2, r5
 80033ca:	4638      	mov	r0, r7
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <_svfiprintf_r+0x1f8>)
 80033ce:	a904      	add	r1, sp, #16
 80033d0:	f000 f87c 	bl	80034cc <_printf_i>
 80033d4:	e7eb      	b.n	80033ae <_svfiprintf_r+0x1c2>
 80033d6:	bf00      	nop
 80033d8:	080039cc 	.word	0x080039cc
 80033dc:	080039d6 	.word	0x080039d6
 80033e0:	00000000 	.word	0x00000000
 80033e4:	08003135 	.word	0x08003135
 80033e8:	080039d2 	.word	0x080039d2

080033ec <_printf_common>:
 80033ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f0:	4616      	mov	r6, r2
 80033f2:	4699      	mov	r9, r3
 80033f4:	688a      	ldr	r2, [r1, #8]
 80033f6:	690b      	ldr	r3, [r1, #16]
 80033f8:	4607      	mov	r7, r0
 80033fa:	4293      	cmp	r3, r2
 80033fc:	bfb8      	it	lt
 80033fe:	4613      	movlt	r3, r2
 8003400:	6033      	str	r3, [r6, #0]
 8003402:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003406:	460c      	mov	r4, r1
 8003408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800340c:	b10a      	cbz	r2, 8003412 <_printf_common+0x26>
 800340e:	3301      	adds	r3, #1
 8003410:	6033      	str	r3, [r6, #0]
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	0699      	lsls	r1, r3, #26
 8003416:	bf42      	ittt	mi
 8003418:	6833      	ldrmi	r3, [r6, #0]
 800341a:	3302      	addmi	r3, #2
 800341c:	6033      	strmi	r3, [r6, #0]
 800341e:	6825      	ldr	r5, [r4, #0]
 8003420:	f015 0506 	ands.w	r5, r5, #6
 8003424:	d106      	bne.n	8003434 <_printf_common+0x48>
 8003426:	f104 0a19 	add.w	sl, r4, #25
 800342a:	68e3      	ldr	r3, [r4, #12]
 800342c:	6832      	ldr	r2, [r6, #0]
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	42ab      	cmp	r3, r5
 8003432:	dc28      	bgt.n	8003486 <_printf_common+0x9a>
 8003434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003438:	1e13      	subs	r3, r2, #0
 800343a:	6822      	ldr	r2, [r4, #0]
 800343c:	bf18      	it	ne
 800343e:	2301      	movne	r3, #1
 8003440:	0692      	lsls	r2, r2, #26
 8003442:	d42d      	bmi.n	80034a0 <_printf_common+0xb4>
 8003444:	4649      	mov	r1, r9
 8003446:	4638      	mov	r0, r7
 8003448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800344c:	47c0      	blx	r8
 800344e:	3001      	adds	r0, #1
 8003450:	d020      	beq.n	8003494 <_printf_common+0xa8>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	68e5      	ldr	r5, [r4, #12]
 8003456:	f003 0306 	and.w	r3, r3, #6
 800345a:	2b04      	cmp	r3, #4
 800345c:	bf18      	it	ne
 800345e:	2500      	movne	r5, #0
 8003460:	6832      	ldr	r2, [r6, #0]
 8003462:	f04f 0600 	mov.w	r6, #0
 8003466:	68a3      	ldr	r3, [r4, #8]
 8003468:	bf08      	it	eq
 800346a:	1aad      	subeq	r5, r5, r2
 800346c:	6922      	ldr	r2, [r4, #16]
 800346e:	bf08      	it	eq
 8003470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003474:	4293      	cmp	r3, r2
 8003476:	bfc4      	itt	gt
 8003478:	1a9b      	subgt	r3, r3, r2
 800347a:	18ed      	addgt	r5, r5, r3
 800347c:	341a      	adds	r4, #26
 800347e:	42b5      	cmp	r5, r6
 8003480:	d11a      	bne.n	80034b8 <_printf_common+0xcc>
 8003482:	2000      	movs	r0, #0
 8003484:	e008      	b.n	8003498 <_printf_common+0xac>
 8003486:	2301      	movs	r3, #1
 8003488:	4652      	mov	r2, sl
 800348a:	4649      	mov	r1, r9
 800348c:	4638      	mov	r0, r7
 800348e:	47c0      	blx	r8
 8003490:	3001      	adds	r0, #1
 8003492:	d103      	bne.n	800349c <_printf_common+0xb0>
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349c:	3501      	adds	r5, #1
 800349e:	e7c4      	b.n	800342a <_printf_common+0x3e>
 80034a0:	2030      	movs	r0, #48	; 0x30
 80034a2:	18e1      	adds	r1, r4, r3
 80034a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034ae:	4422      	add	r2, r4
 80034b0:	3302      	adds	r3, #2
 80034b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034b6:	e7c5      	b.n	8003444 <_printf_common+0x58>
 80034b8:	2301      	movs	r3, #1
 80034ba:	4622      	mov	r2, r4
 80034bc:	4649      	mov	r1, r9
 80034be:	4638      	mov	r0, r7
 80034c0:	47c0      	blx	r8
 80034c2:	3001      	adds	r0, #1
 80034c4:	d0e6      	beq.n	8003494 <_printf_common+0xa8>
 80034c6:	3601      	adds	r6, #1
 80034c8:	e7d9      	b.n	800347e <_printf_common+0x92>
	...

080034cc <_printf_i>:
 80034cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	460c      	mov	r4, r1
 80034d2:	7e27      	ldrb	r7, [r4, #24]
 80034d4:	4691      	mov	r9, r2
 80034d6:	2f78      	cmp	r7, #120	; 0x78
 80034d8:	4680      	mov	r8, r0
 80034da:	469a      	mov	sl, r3
 80034dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80034de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034e2:	d807      	bhi.n	80034f4 <_printf_i+0x28>
 80034e4:	2f62      	cmp	r7, #98	; 0x62
 80034e6:	d80a      	bhi.n	80034fe <_printf_i+0x32>
 80034e8:	2f00      	cmp	r7, #0
 80034ea:	f000 80d9 	beq.w	80036a0 <_printf_i+0x1d4>
 80034ee:	2f58      	cmp	r7, #88	; 0x58
 80034f0:	f000 80a4 	beq.w	800363c <_printf_i+0x170>
 80034f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034fc:	e03a      	b.n	8003574 <_printf_i+0xa8>
 80034fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003502:	2b15      	cmp	r3, #21
 8003504:	d8f6      	bhi.n	80034f4 <_printf_i+0x28>
 8003506:	a001      	add	r0, pc, #4	; (adr r0, 800350c <_printf_i+0x40>)
 8003508:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800350c:	08003565 	.word	0x08003565
 8003510:	08003579 	.word	0x08003579
 8003514:	080034f5 	.word	0x080034f5
 8003518:	080034f5 	.word	0x080034f5
 800351c:	080034f5 	.word	0x080034f5
 8003520:	080034f5 	.word	0x080034f5
 8003524:	08003579 	.word	0x08003579
 8003528:	080034f5 	.word	0x080034f5
 800352c:	080034f5 	.word	0x080034f5
 8003530:	080034f5 	.word	0x080034f5
 8003534:	080034f5 	.word	0x080034f5
 8003538:	08003687 	.word	0x08003687
 800353c:	080035a9 	.word	0x080035a9
 8003540:	08003669 	.word	0x08003669
 8003544:	080034f5 	.word	0x080034f5
 8003548:	080034f5 	.word	0x080034f5
 800354c:	080036a9 	.word	0x080036a9
 8003550:	080034f5 	.word	0x080034f5
 8003554:	080035a9 	.word	0x080035a9
 8003558:	080034f5 	.word	0x080034f5
 800355c:	080034f5 	.word	0x080034f5
 8003560:	08003671 	.word	0x08003671
 8003564:	680b      	ldr	r3, [r1, #0]
 8003566:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800356a:	1d1a      	adds	r2, r3, #4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	600a      	str	r2, [r1, #0]
 8003570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003574:	2301      	movs	r3, #1
 8003576:	e0a4      	b.n	80036c2 <_printf_i+0x1f6>
 8003578:	6825      	ldr	r5, [r4, #0]
 800357a:	6808      	ldr	r0, [r1, #0]
 800357c:	062e      	lsls	r6, r5, #24
 800357e:	f100 0304 	add.w	r3, r0, #4
 8003582:	d50a      	bpl.n	800359a <_printf_i+0xce>
 8003584:	6805      	ldr	r5, [r0, #0]
 8003586:	600b      	str	r3, [r1, #0]
 8003588:	2d00      	cmp	r5, #0
 800358a:	da03      	bge.n	8003594 <_printf_i+0xc8>
 800358c:	232d      	movs	r3, #45	; 0x2d
 800358e:	426d      	negs	r5, r5
 8003590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003594:	230a      	movs	r3, #10
 8003596:	485e      	ldr	r0, [pc, #376]	; (8003710 <_printf_i+0x244>)
 8003598:	e019      	b.n	80035ce <_printf_i+0x102>
 800359a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800359e:	6805      	ldr	r5, [r0, #0]
 80035a0:	600b      	str	r3, [r1, #0]
 80035a2:	bf18      	it	ne
 80035a4:	b22d      	sxthne	r5, r5
 80035a6:	e7ef      	b.n	8003588 <_printf_i+0xbc>
 80035a8:	680b      	ldr	r3, [r1, #0]
 80035aa:	6825      	ldr	r5, [r4, #0]
 80035ac:	1d18      	adds	r0, r3, #4
 80035ae:	6008      	str	r0, [r1, #0]
 80035b0:	0628      	lsls	r0, r5, #24
 80035b2:	d501      	bpl.n	80035b8 <_printf_i+0xec>
 80035b4:	681d      	ldr	r5, [r3, #0]
 80035b6:	e002      	b.n	80035be <_printf_i+0xf2>
 80035b8:	0669      	lsls	r1, r5, #25
 80035ba:	d5fb      	bpl.n	80035b4 <_printf_i+0xe8>
 80035bc:	881d      	ldrh	r5, [r3, #0]
 80035be:	2f6f      	cmp	r7, #111	; 0x6f
 80035c0:	bf0c      	ite	eq
 80035c2:	2308      	moveq	r3, #8
 80035c4:	230a      	movne	r3, #10
 80035c6:	4852      	ldr	r0, [pc, #328]	; (8003710 <_printf_i+0x244>)
 80035c8:	2100      	movs	r1, #0
 80035ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035ce:	6866      	ldr	r6, [r4, #4]
 80035d0:	2e00      	cmp	r6, #0
 80035d2:	bfa8      	it	ge
 80035d4:	6821      	ldrge	r1, [r4, #0]
 80035d6:	60a6      	str	r6, [r4, #8]
 80035d8:	bfa4      	itt	ge
 80035da:	f021 0104 	bicge.w	r1, r1, #4
 80035de:	6021      	strge	r1, [r4, #0]
 80035e0:	b90d      	cbnz	r5, 80035e6 <_printf_i+0x11a>
 80035e2:	2e00      	cmp	r6, #0
 80035e4:	d04d      	beq.n	8003682 <_printf_i+0x1b6>
 80035e6:	4616      	mov	r6, r2
 80035e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80035ec:	fb03 5711 	mls	r7, r3, r1, r5
 80035f0:	5dc7      	ldrb	r7, [r0, r7]
 80035f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035f6:	462f      	mov	r7, r5
 80035f8:	42bb      	cmp	r3, r7
 80035fa:	460d      	mov	r5, r1
 80035fc:	d9f4      	bls.n	80035e8 <_printf_i+0x11c>
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d10b      	bne.n	800361a <_printf_i+0x14e>
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	07df      	lsls	r7, r3, #31
 8003606:	d508      	bpl.n	800361a <_printf_i+0x14e>
 8003608:	6923      	ldr	r3, [r4, #16]
 800360a:	6861      	ldr	r1, [r4, #4]
 800360c:	4299      	cmp	r1, r3
 800360e:	bfde      	ittt	le
 8003610:	2330      	movle	r3, #48	; 0x30
 8003612:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003616:	f106 36ff 	addle.w	r6, r6, #4294967295
 800361a:	1b92      	subs	r2, r2, r6
 800361c:	6122      	str	r2, [r4, #16]
 800361e:	464b      	mov	r3, r9
 8003620:	4621      	mov	r1, r4
 8003622:	4640      	mov	r0, r8
 8003624:	f8cd a000 	str.w	sl, [sp]
 8003628:	aa03      	add	r2, sp, #12
 800362a:	f7ff fedf 	bl	80033ec <_printf_common>
 800362e:	3001      	adds	r0, #1
 8003630:	d14c      	bne.n	80036cc <_printf_i+0x200>
 8003632:	f04f 30ff 	mov.w	r0, #4294967295
 8003636:	b004      	add	sp, #16
 8003638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800363c:	4834      	ldr	r0, [pc, #208]	; (8003710 <_printf_i+0x244>)
 800363e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003642:	680e      	ldr	r6, [r1, #0]
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	f856 5b04 	ldr.w	r5, [r6], #4
 800364a:	061f      	lsls	r7, r3, #24
 800364c:	600e      	str	r6, [r1, #0]
 800364e:	d514      	bpl.n	800367a <_printf_i+0x1ae>
 8003650:	07d9      	lsls	r1, r3, #31
 8003652:	bf44      	itt	mi
 8003654:	f043 0320 	orrmi.w	r3, r3, #32
 8003658:	6023      	strmi	r3, [r4, #0]
 800365a:	b91d      	cbnz	r5, 8003664 <_printf_i+0x198>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	f023 0320 	bic.w	r3, r3, #32
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	2310      	movs	r3, #16
 8003666:	e7af      	b.n	80035c8 <_printf_i+0xfc>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	f043 0320 	orr.w	r3, r3, #32
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	2378      	movs	r3, #120	; 0x78
 8003672:	4828      	ldr	r0, [pc, #160]	; (8003714 <_printf_i+0x248>)
 8003674:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003678:	e7e3      	b.n	8003642 <_printf_i+0x176>
 800367a:	065e      	lsls	r6, r3, #25
 800367c:	bf48      	it	mi
 800367e:	b2ad      	uxthmi	r5, r5
 8003680:	e7e6      	b.n	8003650 <_printf_i+0x184>
 8003682:	4616      	mov	r6, r2
 8003684:	e7bb      	b.n	80035fe <_printf_i+0x132>
 8003686:	680b      	ldr	r3, [r1, #0]
 8003688:	6826      	ldr	r6, [r4, #0]
 800368a:	1d1d      	adds	r5, r3, #4
 800368c:	6960      	ldr	r0, [r4, #20]
 800368e:	600d      	str	r5, [r1, #0]
 8003690:	0635      	lsls	r5, r6, #24
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	d501      	bpl.n	800369a <_printf_i+0x1ce>
 8003696:	6018      	str	r0, [r3, #0]
 8003698:	e002      	b.n	80036a0 <_printf_i+0x1d4>
 800369a:	0671      	lsls	r1, r6, #25
 800369c:	d5fb      	bpl.n	8003696 <_printf_i+0x1ca>
 800369e:	8018      	strh	r0, [r3, #0]
 80036a0:	2300      	movs	r3, #0
 80036a2:	4616      	mov	r6, r2
 80036a4:	6123      	str	r3, [r4, #16]
 80036a6:	e7ba      	b.n	800361e <_printf_i+0x152>
 80036a8:	680b      	ldr	r3, [r1, #0]
 80036aa:	1d1a      	adds	r2, r3, #4
 80036ac:	600a      	str	r2, [r1, #0]
 80036ae:	681e      	ldr	r6, [r3, #0]
 80036b0:	2100      	movs	r1, #0
 80036b2:	4630      	mov	r0, r6
 80036b4:	6862      	ldr	r2, [r4, #4]
 80036b6:	f000 f82f 	bl	8003718 <memchr>
 80036ba:	b108      	cbz	r0, 80036c0 <_printf_i+0x1f4>
 80036bc:	1b80      	subs	r0, r0, r6
 80036be:	6060      	str	r0, [r4, #4]
 80036c0:	6863      	ldr	r3, [r4, #4]
 80036c2:	6123      	str	r3, [r4, #16]
 80036c4:	2300      	movs	r3, #0
 80036c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ca:	e7a8      	b.n	800361e <_printf_i+0x152>
 80036cc:	4632      	mov	r2, r6
 80036ce:	4649      	mov	r1, r9
 80036d0:	4640      	mov	r0, r8
 80036d2:	6923      	ldr	r3, [r4, #16]
 80036d4:	47d0      	blx	sl
 80036d6:	3001      	adds	r0, #1
 80036d8:	d0ab      	beq.n	8003632 <_printf_i+0x166>
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	079b      	lsls	r3, r3, #30
 80036de:	d413      	bmi.n	8003708 <_printf_i+0x23c>
 80036e0:	68e0      	ldr	r0, [r4, #12]
 80036e2:	9b03      	ldr	r3, [sp, #12]
 80036e4:	4298      	cmp	r0, r3
 80036e6:	bfb8      	it	lt
 80036e8:	4618      	movlt	r0, r3
 80036ea:	e7a4      	b.n	8003636 <_printf_i+0x16a>
 80036ec:	2301      	movs	r3, #1
 80036ee:	4632      	mov	r2, r6
 80036f0:	4649      	mov	r1, r9
 80036f2:	4640      	mov	r0, r8
 80036f4:	47d0      	blx	sl
 80036f6:	3001      	adds	r0, #1
 80036f8:	d09b      	beq.n	8003632 <_printf_i+0x166>
 80036fa:	3501      	adds	r5, #1
 80036fc:	68e3      	ldr	r3, [r4, #12]
 80036fe:	9903      	ldr	r1, [sp, #12]
 8003700:	1a5b      	subs	r3, r3, r1
 8003702:	42ab      	cmp	r3, r5
 8003704:	dcf2      	bgt.n	80036ec <_printf_i+0x220>
 8003706:	e7eb      	b.n	80036e0 <_printf_i+0x214>
 8003708:	2500      	movs	r5, #0
 800370a:	f104 0619 	add.w	r6, r4, #25
 800370e:	e7f5      	b.n	80036fc <_printf_i+0x230>
 8003710:	080039dd 	.word	0x080039dd
 8003714:	080039ee 	.word	0x080039ee

08003718 <memchr>:
 8003718:	4603      	mov	r3, r0
 800371a:	b510      	push	{r4, lr}
 800371c:	b2c9      	uxtb	r1, r1
 800371e:	4402      	add	r2, r0
 8003720:	4293      	cmp	r3, r2
 8003722:	4618      	mov	r0, r3
 8003724:	d101      	bne.n	800372a <memchr+0x12>
 8003726:	2000      	movs	r0, #0
 8003728:	e003      	b.n	8003732 <memchr+0x1a>
 800372a:	7804      	ldrb	r4, [r0, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	428c      	cmp	r4, r1
 8003730:	d1f6      	bne.n	8003720 <memchr+0x8>
 8003732:	bd10      	pop	{r4, pc}

08003734 <memcpy>:
 8003734:	440a      	add	r2, r1
 8003736:	4291      	cmp	r1, r2
 8003738:	f100 33ff 	add.w	r3, r0, #4294967295
 800373c:	d100      	bne.n	8003740 <memcpy+0xc>
 800373e:	4770      	bx	lr
 8003740:	b510      	push	{r4, lr}
 8003742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003746:	4291      	cmp	r1, r2
 8003748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800374c:	d1f9      	bne.n	8003742 <memcpy+0xe>
 800374e:	bd10      	pop	{r4, pc}

08003750 <memmove>:
 8003750:	4288      	cmp	r0, r1
 8003752:	b510      	push	{r4, lr}
 8003754:	eb01 0402 	add.w	r4, r1, r2
 8003758:	d902      	bls.n	8003760 <memmove+0x10>
 800375a:	4284      	cmp	r4, r0
 800375c:	4623      	mov	r3, r4
 800375e:	d807      	bhi.n	8003770 <memmove+0x20>
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	42a1      	cmp	r1, r4
 8003764:	d008      	beq.n	8003778 <memmove+0x28>
 8003766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800376a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800376e:	e7f8      	b.n	8003762 <memmove+0x12>
 8003770:	4601      	mov	r1, r0
 8003772:	4402      	add	r2, r0
 8003774:	428a      	cmp	r2, r1
 8003776:	d100      	bne.n	800377a <memmove+0x2a>
 8003778:	bd10      	pop	{r4, pc}
 800377a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800377e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003782:	e7f7      	b.n	8003774 <memmove+0x24>

08003784 <_free_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4605      	mov	r5, r0
 8003788:	2900      	cmp	r1, #0
 800378a:	d043      	beq.n	8003814 <_free_r+0x90>
 800378c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003790:	1f0c      	subs	r4, r1, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	bfb8      	it	lt
 8003796:	18e4      	addlt	r4, r4, r3
 8003798:	f000 f8d0 	bl	800393c <__malloc_lock>
 800379c:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <_free_r+0x94>)
 800379e:	6813      	ldr	r3, [r2, #0]
 80037a0:	4610      	mov	r0, r2
 80037a2:	b933      	cbnz	r3, 80037b2 <_free_r+0x2e>
 80037a4:	6063      	str	r3, [r4, #4]
 80037a6:	6014      	str	r4, [r2, #0]
 80037a8:	4628      	mov	r0, r5
 80037aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ae:	f000 b8cb 	b.w	8003948 <__malloc_unlock>
 80037b2:	42a3      	cmp	r3, r4
 80037b4:	d90a      	bls.n	80037cc <_free_r+0x48>
 80037b6:	6821      	ldr	r1, [r4, #0]
 80037b8:	1862      	adds	r2, r4, r1
 80037ba:	4293      	cmp	r3, r2
 80037bc:	bf01      	itttt	eq
 80037be:	681a      	ldreq	r2, [r3, #0]
 80037c0:	685b      	ldreq	r3, [r3, #4]
 80037c2:	1852      	addeq	r2, r2, r1
 80037c4:	6022      	streq	r2, [r4, #0]
 80037c6:	6063      	str	r3, [r4, #4]
 80037c8:	6004      	str	r4, [r0, #0]
 80037ca:	e7ed      	b.n	80037a8 <_free_r+0x24>
 80037cc:	461a      	mov	r2, r3
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	b10b      	cbz	r3, 80037d6 <_free_r+0x52>
 80037d2:	42a3      	cmp	r3, r4
 80037d4:	d9fa      	bls.n	80037cc <_free_r+0x48>
 80037d6:	6811      	ldr	r1, [r2, #0]
 80037d8:	1850      	adds	r0, r2, r1
 80037da:	42a0      	cmp	r0, r4
 80037dc:	d10b      	bne.n	80037f6 <_free_r+0x72>
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	4401      	add	r1, r0
 80037e2:	1850      	adds	r0, r2, r1
 80037e4:	4283      	cmp	r3, r0
 80037e6:	6011      	str	r1, [r2, #0]
 80037e8:	d1de      	bne.n	80037a8 <_free_r+0x24>
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4401      	add	r1, r0
 80037f0:	6011      	str	r1, [r2, #0]
 80037f2:	6053      	str	r3, [r2, #4]
 80037f4:	e7d8      	b.n	80037a8 <_free_r+0x24>
 80037f6:	d902      	bls.n	80037fe <_free_r+0x7a>
 80037f8:	230c      	movs	r3, #12
 80037fa:	602b      	str	r3, [r5, #0]
 80037fc:	e7d4      	b.n	80037a8 <_free_r+0x24>
 80037fe:	6820      	ldr	r0, [r4, #0]
 8003800:	1821      	adds	r1, r4, r0
 8003802:	428b      	cmp	r3, r1
 8003804:	bf01      	itttt	eq
 8003806:	6819      	ldreq	r1, [r3, #0]
 8003808:	685b      	ldreq	r3, [r3, #4]
 800380a:	1809      	addeq	r1, r1, r0
 800380c:	6021      	streq	r1, [r4, #0]
 800380e:	6063      	str	r3, [r4, #4]
 8003810:	6054      	str	r4, [r2, #4]
 8003812:	e7c9      	b.n	80037a8 <_free_r+0x24>
 8003814:	bd38      	pop	{r3, r4, r5, pc}
 8003816:	bf00      	nop
 8003818:	20000090 	.word	0x20000090

0800381c <_malloc_r>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	1ccd      	adds	r5, r1, #3
 8003820:	f025 0503 	bic.w	r5, r5, #3
 8003824:	3508      	adds	r5, #8
 8003826:	2d0c      	cmp	r5, #12
 8003828:	bf38      	it	cc
 800382a:	250c      	movcc	r5, #12
 800382c:	2d00      	cmp	r5, #0
 800382e:	4606      	mov	r6, r0
 8003830:	db01      	blt.n	8003836 <_malloc_r+0x1a>
 8003832:	42a9      	cmp	r1, r5
 8003834:	d903      	bls.n	800383e <_malloc_r+0x22>
 8003836:	230c      	movs	r3, #12
 8003838:	6033      	str	r3, [r6, #0]
 800383a:	2000      	movs	r0, #0
 800383c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800383e:	f000 f87d 	bl	800393c <__malloc_lock>
 8003842:	4921      	ldr	r1, [pc, #132]	; (80038c8 <_malloc_r+0xac>)
 8003844:	680a      	ldr	r2, [r1, #0]
 8003846:	4614      	mov	r4, r2
 8003848:	b99c      	cbnz	r4, 8003872 <_malloc_r+0x56>
 800384a:	4f20      	ldr	r7, [pc, #128]	; (80038cc <_malloc_r+0xb0>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	b923      	cbnz	r3, 800385a <_malloc_r+0x3e>
 8003850:	4621      	mov	r1, r4
 8003852:	4630      	mov	r0, r6
 8003854:	f000 f862 	bl	800391c <_sbrk_r>
 8003858:	6038      	str	r0, [r7, #0]
 800385a:	4629      	mov	r1, r5
 800385c:	4630      	mov	r0, r6
 800385e:	f000 f85d 	bl	800391c <_sbrk_r>
 8003862:	1c43      	adds	r3, r0, #1
 8003864:	d123      	bne.n	80038ae <_malloc_r+0x92>
 8003866:	230c      	movs	r3, #12
 8003868:	4630      	mov	r0, r6
 800386a:	6033      	str	r3, [r6, #0]
 800386c:	f000 f86c 	bl	8003948 <__malloc_unlock>
 8003870:	e7e3      	b.n	800383a <_malloc_r+0x1e>
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	1b5b      	subs	r3, r3, r5
 8003876:	d417      	bmi.n	80038a8 <_malloc_r+0x8c>
 8003878:	2b0b      	cmp	r3, #11
 800387a:	d903      	bls.n	8003884 <_malloc_r+0x68>
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	441c      	add	r4, r3
 8003880:	6025      	str	r5, [r4, #0]
 8003882:	e004      	b.n	800388e <_malloc_r+0x72>
 8003884:	6863      	ldr	r3, [r4, #4]
 8003886:	42a2      	cmp	r2, r4
 8003888:	bf0c      	ite	eq
 800388a:	600b      	streq	r3, [r1, #0]
 800388c:	6053      	strne	r3, [r2, #4]
 800388e:	4630      	mov	r0, r6
 8003890:	f000 f85a 	bl	8003948 <__malloc_unlock>
 8003894:	f104 000b 	add.w	r0, r4, #11
 8003898:	1d23      	adds	r3, r4, #4
 800389a:	f020 0007 	bic.w	r0, r0, #7
 800389e:	1ac2      	subs	r2, r0, r3
 80038a0:	d0cc      	beq.n	800383c <_malloc_r+0x20>
 80038a2:	1a1b      	subs	r3, r3, r0
 80038a4:	50a3      	str	r3, [r4, r2]
 80038a6:	e7c9      	b.n	800383c <_malloc_r+0x20>
 80038a8:	4622      	mov	r2, r4
 80038aa:	6864      	ldr	r4, [r4, #4]
 80038ac:	e7cc      	b.n	8003848 <_malloc_r+0x2c>
 80038ae:	1cc4      	adds	r4, r0, #3
 80038b0:	f024 0403 	bic.w	r4, r4, #3
 80038b4:	42a0      	cmp	r0, r4
 80038b6:	d0e3      	beq.n	8003880 <_malloc_r+0x64>
 80038b8:	1a21      	subs	r1, r4, r0
 80038ba:	4630      	mov	r0, r6
 80038bc:	f000 f82e 	bl	800391c <_sbrk_r>
 80038c0:	3001      	adds	r0, #1
 80038c2:	d1dd      	bne.n	8003880 <_malloc_r+0x64>
 80038c4:	e7cf      	b.n	8003866 <_malloc_r+0x4a>
 80038c6:	bf00      	nop
 80038c8:	20000090 	.word	0x20000090
 80038cc:	20000094 	.word	0x20000094

080038d0 <_realloc_r>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	4607      	mov	r7, r0
 80038d4:	4614      	mov	r4, r2
 80038d6:	460e      	mov	r6, r1
 80038d8:	b921      	cbnz	r1, 80038e4 <_realloc_r+0x14>
 80038da:	4611      	mov	r1, r2
 80038dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80038e0:	f7ff bf9c 	b.w	800381c <_malloc_r>
 80038e4:	b922      	cbnz	r2, 80038f0 <_realloc_r+0x20>
 80038e6:	f7ff ff4d 	bl	8003784 <_free_r>
 80038ea:	4625      	mov	r5, r4
 80038ec:	4628      	mov	r0, r5
 80038ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038f0:	f000 f830 	bl	8003954 <_malloc_usable_size_r>
 80038f4:	42a0      	cmp	r0, r4
 80038f6:	d20f      	bcs.n	8003918 <_realloc_r+0x48>
 80038f8:	4621      	mov	r1, r4
 80038fa:	4638      	mov	r0, r7
 80038fc:	f7ff ff8e 	bl	800381c <_malloc_r>
 8003900:	4605      	mov	r5, r0
 8003902:	2800      	cmp	r0, #0
 8003904:	d0f2      	beq.n	80038ec <_realloc_r+0x1c>
 8003906:	4631      	mov	r1, r6
 8003908:	4622      	mov	r2, r4
 800390a:	f7ff ff13 	bl	8003734 <memcpy>
 800390e:	4631      	mov	r1, r6
 8003910:	4638      	mov	r0, r7
 8003912:	f7ff ff37 	bl	8003784 <_free_r>
 8003916:	e7e9      	b.n	80038ec <_realloc_r+0x1c>
 8003918:	4635      	mov	r5, r6
 800391a:	e7e7      	b.n	80038ec <_realloc_r+0x1c>

0800391c <_sbrk_r>:
 800391c:	b538      	push	{r3, r4, r5, lr}
 800391e:	2300      	movs	r3, #0
 8003920:	4d05      	ldr	r5, [pc, #20]	; (8003938 <_sbrk_r+0x1c>)
 8003922:	4604      	mov	r4, r0
 8003924:	4608      	mov	r0, r1
 8003926:	602b      	str	r3, [r5, #0]
 8003928:	f7fd faaa 	bl	8000e80 <_sbrk>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d102      	bne.n	8003936 <_sbrk_r+0x1a>
 8003930:	682b      	ldr	r3, [r5, #0]
 8003932:	b103      	cbz	r3, 8003936 <_sbrk_r+0x1a>
 8003934:	6023      	str	r3, [r4, #0]
 8003936:	bd38      	pop	{r3, r4, r5, pc}
 8003938:	20000178 	.word	0x20000178

0800393c <__malloc_lock>:
 800393c:	4801      	ldr	r0, [pc, #4]	; (8003944 <__malloc_lock+0x8>)
 800393e:	f000 b811 	b.w	8003964 <__retarget_lock_acquire_recursive>
 8003942:	bf00      	nop
 8003944:	20000180 	.word	0x20000180

08003948 <__malloc_unlock>:
 8003948:	4801      	ldr	r0, [pc, #4]	; (8003950 <__malloc_unlock+0x8>)
 800394a:	f000 b80c 	b.w	8003966 <__retarget_lock_release_recursive>
 800394e:	bf00      	nop
 8003950:	20000180 	.word	0x20000180

08003954 <_malloc_usable_size_r>:
 8003954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003958:	1f18      	subs	r0, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	bfbc      	itt	lt
 800395e:	580b      	ldrlt	r3, [r1, r0]
 8003960:	18c0      	addlt	r0, r0, r3
 8003962:	4770      	bx	lr

08003964 <__retarget_lock_acquire_recursive>:
 8003964:	4770      	bx	lr

08003966 <__retarget_lock_release_recursive>:
 8003966:	4770      	bx	lr

08003968 <_init>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	bf00      	nop
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr

08003974 <_fini>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr
