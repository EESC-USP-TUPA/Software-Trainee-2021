
Projeto_Trainee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002ee0  08002ee0  00012ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f50  08002f50  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002f50  08002f50  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f50  08002f50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f50  08002f50  00012f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08002fc8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08002fc8  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a67b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc2  00000000  00000000  0002a714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002ccd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b49  00000000  00000000  0002d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cb1  00000000  00000000  00044f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008544c  00000000  00000000  0004ec1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c4  00000000  00000000  000d40bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ec8 	.word	0x08002ec8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002ec8 	.word	0x08002ec8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ADC_Init>:
/**
  * @brief Inicia a leitura analógico-digital
  * @param Endereço do Handler do ADC e vetor de Buffer
  * @retval None
  */
void ADC_Init(ADC_HandleTypeDef *hadc1, uint32_t *ADC_Buffer) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc1, ADC_Buffer, ADC_CONVERSIONS);
 8000166:	2202      	movs	r2, #2
 8000168:	6839      	ldr	r1, [r7, #0]
 800016a:	6878      	ldr	r0, [r7, #4]
 800016c:	f000 fc58 	bl	8000a20 <HAL_ADC_Start_DMA>

}
 8000170:	bf00      	nop
 8000172:	3708      	adds	r7, #8
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}

08000178 <ADC_GetValues>:
/**
  * @brief Faz a leitura e conversão do buffer para o vetor de dados
  * @param Vetor de Buffer e Vetor de destino dos dados
  * @retval None
  */
void ADC_GetValues(uint32_t *ADC_Buffer, uint32_t *ADC_Result) {
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
 8000180:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < ADC_CONVERSIONS; i++) {
 8000182:	2300      	movs	r3, #0
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	e016      	b.n	80001b6 <ADC_GetValues+0x3e>
		ADC_Result[i] = 100 * ADC_Buffer[i] / 4095;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	009b      	lsls	r3, r3, #2
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	4413      	add	r3, r2
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	2264      	movs	r2, #100	; 0x64
 8000194:	fb02 f203 	mul.w	r2, r2, r3
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	6839      	ldr	r1, [r7, #0]
 800019e:	4419      	add	r1, r3
 80001a0:	4b09      	ldr	r3, [pc, #36]	; (80001c8 <ADC_GetValues+0x50>)
 80001a2:	fba3 0302 	umull	r0, r3, r3, r2
 80001a6:	1ad2      	subs	r2, r2, r3
 80001a8:	0852      	lsrs	r2, r2, #1
 80001aa:	4413      	add	r3, r2
 80001ac:	0adb      	lsrs	r3, r3, #11
 80001ae:	600b      	str	r3, [r1, #0]
	for(int i = 0; i < ADC_CONVERSIONS; i++) {
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	3301      	adds	r3, #1
 80001b4:	60fb      	str	r3, [r7, #12]
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	dde5      	ble.n	8000188 <ADC_GetValues+0x10>
	}
}
 80001bc:	bf00      	nop
 80001be:	bf00      	nop
 80001c0:	3714      	adds	r7, #20
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	00100101 	.word	0x00100101

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fac8 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f814 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f8f8 	bl	80003cc <MX_GPIO_Init>
  MX_DMA_Init();
 80001dc:	f000 f8d8 	bl	8000390 <MX_DMA_Init>
  MX_ADC1_Init();
 80001e0:	f000 f85e 	bl	80002a0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80001e4:	f000 f8aa 	bl	800033c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ADC_Init(&hadc1, adc.buffer); //Inicialização do ADC
 80001e8:	4903      	ldr	r1, [pc, #12]	; (80001f8 <main+0x2c>)
 80001ea:	4804      	ldr	r0, [pc, #16]	; (80001fc <main+0x30>)
 80001ec:	f7ff ffb6 	bl	800015c <ADC_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(50);
 80001f0:	2032      	movs	r0, #50	; 0x32
 80001f2:	f000 fb19 	bl	8000828 <HAL_Delay>
 80001f6:	e7fb      	b.n	80001f0 <main+0x24>
 80001f8:	2000010c 	.word	0x2000010c
 80001fc:	20000098 	.word	0x20000098

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b094      	sub	sp, #80	; 0x50
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f002 fa18 	bl	8002644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000230:	2302      	movs	r3, #2
 8000232:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000234:	2301      	movs	r3, #1
 8000236:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000238:	2310      	movs	r3, #16
 800023a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023c:	2300      	movs	r3, #0
 800023e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000244:	4618      	mov	r0, r3
 8000246:	f001 fb4b 	bl	80018e0 <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000250:	f000 f908 	bl	8000464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000258:	2300      	movs	r3, #0
 800025a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fdb6 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800027a:	f000 f8f3 	bl	8000464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800027e:	2302      	movs	r3, #2
 8000280:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f001 ff43 	bl	8002114 <HAL_RCCEx_PeriphCLKConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000294:	f000 f8e6 	bl	8000464 <Error_Handler>
  }
}
 8000298:	bf00      	nop
 800029a:	3750      	adds	r7, #80	; 0x50
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b0:	4b20      	ldr	r3, [pc, #128]	; (8000334 <MX_ADC1_Init+0x94>)
 80002b2:	4a21      	ldr	r2, [pc, #132]	; (8000338 <MX_ADC1_Init+0x98>)
 80002b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002b6:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <MX_ADC1_Init+0x94>)
 80002b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002be:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <MX_ADC1_Init+0x94>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c4:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <MX_ADC1_Init+0x94>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <MX_ADC1_Init+0x94>)
 80002cc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d2:	4b18      	ldr	r3, [pc, #96]	; (8000334 <MX_ADC1_Init+0x94>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80002d8:	4b16      	ldr	r3, [pc, #88]	; (8000334 <MX_ADC1_Init+0x94>)
 80002da:	2202      	movs	r2, #2
 80002dc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002de:	4815      	ldr	r0, [pc, #84]	; (8000334 <MX_ADC1_Init+0x94>)
 80002e0:	f000 fac6 	bl	8000870 <HAL_ADC_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002ea:	f000 f8bb 	bl	8000464 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002f2:	2301      	movs	r3, #1
 80002f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80002f6:	2306      	movs	r3, #6
 80002f8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4619      	mov	r1, r3
 80002fe:	480d      	ldr	r0, [pc, #52]	; (8000334 <MX_ADC1_Init+0x94>)
 8000300:	f000 fc7e 	bl	8000c00 <HAL_ADC_ConfigChannel>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800030a:	f000 f8ab 	bl	8000464 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800030e:	2301      	movs	r3, #1
 8000310:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000312:	2302      	movs	r3, #2
 8000314:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4619      	mov	r1, r3
 800031a:	4806      	ldr	r0, [pc, #24]	; (8000334 <MX_ADC1_Init+0x94>)
 800031c:	f000 fc70 	bl	8000c00 <HAL_ADC_ConfigChannel>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000326:	f000 f89d 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000098 	.word	0x20000098
 8000338:	40012400 	.word	0x40012400

0800033c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000342:	4a12      	ldr	r2, [pc, #72]	; (800038c <MX_USART1_UART_Init+0x50>)
 8000344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000348:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800034c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000374:	f001 ff84 	bl	8002280 <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800037e:	f000 f871 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200000c8 	.word	0x200000c8
 800038c:	40013800 	.word	0x40013800

08000390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_DMA_Init+0x38>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a0b      	ldr	r2, [pc, #44]	; (80003c8 <MX_DMA_Init+0x38>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_DMA_Init+0x38>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	200b      	movs	r0, #11
 80003b4:	f000 fef5 	bl	80011a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003b8:	200b      	movs	r0, #11
 80003ba:	f000 ff0e 	bl	80011da <HAL_NVIC_EnableIRQ>

}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_GPIO_Init+0x40>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a0d      	ldr	r2, [pc, #52]	; (800040c <MX_GPIO_Init+0x40>)
 80003d8:	f043 0320 	orr.w	r3, r3, #32
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_GPIO_Init+0x40>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0320 	and.w	r3, r3, #32
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_GPIO_Init+0x40>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a07      	ldr	r2, [pc, #28]	; (800040c <MX_GPIO_Init+0x40>)
 80003f0:	f043 0304 	orr.w	r3, r3, #4
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <MX_GPIO_Init+0x40>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f003 0304 	and.w	r3, r3, #4
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	683b      	ldr	r3, [r7, #0]

}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
    ADC_GetValues(adc.buffer, adc.data); //Faz a leitura dos dados
 8000418:	490d      	ldr	r1, [pc, #52]	; (8000450 <HAL_ADC_ConvCpltCallback+0x40>)
 800041a:	480e      	ldr	r0, [pc, #56]	; (8000454 <HAL_ADC_ConvCpltCallback+0x44>)
 800041c:	f7ff feac 	bl	8000178 <ADC_GetValues>
    sprintf(uart.message, "1: %ld - 2: %ld\r\n", adc.data[0], adc.data[1]);
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <HAL_ADC_ConvCpltCallback+0x44>)
 8000422:	689a      	ldr	r2, [r3, #8]
 8000424:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <HAL_ADC_ConvCpltCallback+0x44>)
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	490b      	ldr	r1, [pc, #44]	; (8000458 <HAL_ADC_ConvCpltCallback+0x48>)
 800042a:	480c      	ldr	r0, [pc, #48]	; (800045c <HAL_ADC_ConvCpltCallback+0x4c>)
 800042c:	f002 f912 	bl	8002654 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart.message, strlen(uart.message), HAL_MAX_DELAY);
 8000430:	480a      	ldr	r0, [pc, #40]	; (800045c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000432:	f7ff fe8b 	bl	800014c <strlen>
 8000436:	4603      	mov	r3, r0
 8000438:	b29a      	uxth	r2, r3
 800043a:	f04f 33ff 	mov.w	r3, #4294967295
 800043e:	4907      	ldr	r1, [pc, #28]	; (800045c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000440:	4807      	ldr	r0, [pc, #28]	; (8000460 <HAL_ADC_ConvCpltCallback+0x50>)
 8000442:	f001 ff6a 	bl	800231a <HAL_UART_Transmit>
    //Envia a mensagem via UART
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000114 	.word	0x20000114
 8000454:	2000010c 	.word	0x2000010c
 8000458:	08002ee0 	.word	0x08002ee0
 800045c:	20000160 	.word	0x20000160
 8000460:	200000c8 	.word	0x200000c8

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	e7fe      	b.n	800046c <Error_Handler+0x8>
	...

08000470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <HAL_MspInit+0x5c>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	4a14      	ldr	r2, [pc, #80]	; (80004cc <HAL_MspInit+0x5c>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6193      	str	r3, [r2, #24]
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <HAL_MspInit+0x5c>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <HAL_MspInit+0x5c>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <HAL_MspInit+0x5c>)
 8000494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <HAL_MspInit+0x5c>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <HAL_MspInit+0x60>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <HAL_MspInit+0x60>)
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010000 	.word	0x40010000

080004d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a28      	ldr	r2, [pc, #160]	; (8000590 <HAL_ADC_MspInit+0xbc>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d149      	bne.n	8000588 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004f4:	4b27      	ldr	r3, [pc, #156]	; (8000594 <HAL_ADC_MspInit+0xc0>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a26      	ldr	r2, [pc, #152]	; (8000594 <HAL_ADC_MspInit+0xc0>)
 80004fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b24      	ldr	r3, [pc, #144]	; (8000594 <HAL_ADC_MspInit+0xc0>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b21      	ldr	r3, [pc, #132]	; (8000594 <HAL_ADC_MspInit+0xc0>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a20      	ldr	r2, [pc, #128]	; (8000594 <HAL_ADC_MspInit+0xc0>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <HAL_ADC_MspInit+0xc0>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000524:	2303      	movs	r3, #3
 8000526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000528:	2303      	movs	r3, #3
 800052a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	4819      	ldr	r0, [pc, #100]	; (8000598 <HAL_ADC_MspInit+0xc4>)
 8000534:	f001 f85a 	bl	80015ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <HAL_ADC_MspInit+0xc8>)
 800053a:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <HAL_ADC_MspInit+0xcc>)
 800053c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800053e:	4b17      	ldr	r3, [pc, #92]	; (800059c <HAL_ADC_MspInit+0xc8>)
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_ADC_MspInit+0xc8>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <HAL_ADC_MspInit+0xc8>)
 800054c:	2280      	movs	r2, #128	; 0x80
 800054e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_ADC_MspInit+0xc8>)
 8000552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000556:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <HAL_ADC_MspInit+0xc8>)
 800055a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800055e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <HAL_ADC_MspInit+0xc8>)
 8000562:	2220      	movs	r2, #32
 8000564:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <HAL_ADC_MspInit+0xc8>)
 8000568:	2200      	movs	r2, #0
 800056a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <HAL_ADC_MspInit+0xc8>)
 800056e:	f000 fe4f 	bl	8001210 <HAL_DMA_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000578:	f7ff ff74 	bl	8000464 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <HAL_ADC_MspInit+0xc8>)
 8000580:	621a      	str	r2, [r3, #32]
 8000582:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_ADC_MspInit+0xc8>)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40012400 	.word	0x40012400
 8000594:	40021000 	.word	0x40021000
 8000598:	40010800 	.word	0x40010800
 800059c:	2000011c 	.word	0x2000011c
 80005a0:	40020008 	.word	0x40020008

080005a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a1c      	ldr	r2, [pc, #112]	; (8000630 <HAL_UART_MspInit+0x8c>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d131      	bne.n	8000628 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <HAL_UART_MspInit+0x90>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <HAL_UART_MspInit+0x90>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <HAL_UART_MspInit+0x90>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <HAL_UART_MspInit+0x90>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a14      	ldr	r2, [pc, #80]	; (8000634 <HAL_UART_MspInit+0x90>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_UART_MspInit+0x90>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fa:	2302      	movs	r3, #2
 80005fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	4619      	mov	r1, r3
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <HAL_UART_MspInit+0x94>)
 800060a:	f000 ffef 	bl	80015ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800060e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <HAL_UART_MspInit+0x94>)
 8000624:	f000 ffe2 	bl	80015ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40013800 	.word	0x40013800
 8000634:	40021000 	.word	0x40021000
 8000638:	40010800 	.word	0x40010800

0800063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <NMI_Handler+0x4>

08000642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <HardFault_Handler+0x4>

08000648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <MemManage_Handler+0x4>

0800064e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <BusFault_Handler+0x4>

08000654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <UsageFault_Handler+0x4>

0800065a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000682:	f000 f8b5 	bl	80007f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <DMA1_Channel1_IRQHandler+0x10>)
 8000692:	f000 fe77 	bl	8001384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000011c 	.word	0x2000011c

080006a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a8:	4a14      	ldr	r2, [pc, #80]	; (80006fc <_sbrk+0x5c>)
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <_sbrk+0x60>)
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <_sbrk+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d102      	bne.n	80006c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <_sbrk+0x64>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <_sbrk+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <_sbrk+0x64>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d207      	bcs.n	80006e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d0:	f001 ff8e 	bl	80025f0 <__errno>
 80006d4:	4603      	mov	r3, r0
 80006d6:	220c      	movs	r2, #12
 80006d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	e009      	b.n	80006f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <_sbrk+0x64>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <_sbrk+0x64>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	4a05      	ldr	r2, [pc, #20]	; (8000704 <_sbrk+0x64>)
 80006f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006f2:	68fb      	ldr	r3, [r7, #12]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20002800 	.word	0x20002800
 8000700:	00000400 	.word	0x00000400
 8000704:	2000008c 	.word	0x2000008c
 8000708:	20000188 	.word	0x20000188

0800070c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	; (8000750 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	; (800075c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800073e:	f7ff ffe5 	bl	800070c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000742:	f001 ff5b 	bl	80025fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000746:	f7ff fd41 	bl	80001cc <main>
  bx lr
 800074a:	4770      	bx	lr
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000754:	08002f58 	.word	0x08002f58
  ldr r2, =_sbss
 8000758:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800075c:	20000188 	.word	0x20000188

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_Init+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <HAL_Init+0x28>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000774:	2003      	movs	r0, #3
 8000776:	f000 fd09 	bl	800118c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077a:	2000      	movs	r0, #0
 800077c:	f000 f808 	bl	8000790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000780:	f7ff fe76 	bl	8000470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40022000 	.word	0x40022000

08000790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_InitTick+0x54>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x58>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fd21 	bl	80011f6 <HAL_SYSTICK_Config>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00e      	b.n	80007dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d80a      	bhi.n	80007da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f000 fce9 	bl	80011a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <HAL_InitTick+0x5c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000004 	.word	0x20000004

080007f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_IncTick+0x1c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_IncTick+0x20>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	4a03      	ldr	r2, [pc, #12]	; (8000810 <HAL_IncTick+0x20>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	20000008 	.word	0x20000008
 8000810:	20000174 	.word	0x20000174

08000814 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <HAL_GetTick+0x10>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	20000174 	.word	0x20000174

08000828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000830:	f7ff fff0 	bl	8000814 <HAL_GetTick>
 8000834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000840:	d005      	beq.n	800084e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_Delay+0x44>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	4413      	add	r3, r2
 800084c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800084e:	bf00      	nop
 8000850:	f7ff ffe0 	bl	8000814 <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	429a      	cmp	r2, r3
 800085e:	d8f7      	bhi.n	8000850 <HAL_Delay+0x28>
  {
  }
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000008 	.word	0x20000008

08000870 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000878:	2300      	movs	r3, #0
 800087a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d101      	bne.n	8000892 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e0be      	b.n	8000a10 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800089c:	2b00      	cmp	r3, #0
 800089e:	d109      	bne.n	80008b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2200      	movs	r2, #0
 80008a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff fe10 	bl	80004d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 faf5 	bl	8000ea4 <ADC_ConversionStop_Disable>
 80008ba:	4603      	mov	r3, r0
 80008bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c2:	f003 0310 	and.w	r3, r3, #16
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8099 	bne.w	80009fe <HAL_ADC_Init+0x18e>
 80008cc:	7dfb      	ldrb	r3, [r7, #23]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f040 8095 	bne.w	80009fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008dc:	f023 0302 	bic.w	r3, r3, #2
 80008e0:	f043 0202 	orr.w	r2, r3, #2
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7b1b      	ldrb	r3, [r3, #12]
 80008f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000908:	d003      	beq.n	8000912 <HAL_ADC_Init+0xa2>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d102      	bne.n	8000918 <HAL_ADC_Init+0xa8>
 8000912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000916:	e000      	b.n	800091a <HAL_ADC_Init+0xaa>
 8000918:	2300      	movs	r3, #0
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4313      	orrs	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7d1b      	ldrb	r3, [r3, #20]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d119      	bne.n	800095c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7b1b      	ldrb	r3, [r3, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d109      	bne.n	8000944 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	3b01      	subs	r3, #1
 8000936:	035a      	lsls	r2, r3, #13
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	4313      	orrs	r3, r2
 800093c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	e00b      	b.n	800095c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000948:	f043 0220 	orr.w	r2, r3, #32
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000954:	f043 0201 	orr.w	r2, r3, #1
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	430a      	orrs	r2, r1
 800096e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	689a      	ldr	r2, [r3, #8]
 8000976:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <HAL_ADC_Init+0x1a8>)
 8000978:	4013      	ands	r3, r2
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	6812      	ldr	r2, [r2, #0]
 800097e:	68b9      	ldr	r1, [r7, #8]
 8000980:	430b      	orrs	r3, r1
 8000982:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800098c:	d003      	beq.n	8000996 <HAL_ADC_Init+0x126>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d104      	bne.n	80009a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	691b      	ldr	r3, [r3, #16]
 800099a:	3b01      	subs	r3, #1
 800099c:	051b      	lsls	r3, r3, #20
 800099e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	430a      	orrs	r2, r1
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_ADC_Init+0x1ac>)
 80009bc:	4013      	ands	r3, r2
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d10b      	bne.n	80009dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ce:	f023 0303 	bic.w	r3, r3, #3
 80009d2:	f043 0201 	orr.w	r2, r3, #1
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009da:	e018      	b.n	8000a0e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e0:	f023 0312 	bic.w	r3, r3, #18
 80009e4:	f043 0210 	orr.w	r2, r3, #16
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f0:	f043 0201 	orr.w	r2, r3, #1
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009fc:	e007      	b.n	8000a0e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a02:	f043 0210 	orr.w	r2, r3, #16
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	ffe1f7fd 	.word	0xffe1f7fd
 8000a1c:	ff1f0efe 	.word	0xff1f0efe

08000a20 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a64      	ldr	r2, [pc, #400]	; (8000bc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d004      	beq.n	8000a44 <HAL_ADC_Start_DMA+0x24>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a63      	ldr	r2, [pc, #396]	; (8000bcc <HAL_ADC_Start_DMA+0x1ac>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d106      	bne.n	8000a52 <HAL_ADC_Start_DMA+0x32>
 8000a44:	4b60      	ldr	r3, [pc, #384]	; (8000bc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f040 80b3 	bne.w	8000bb8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d101      	bne.n	8000a60 <HAL_ADC_Start_DMA+0x40>
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	e0ae      	b.n	8000bbe <HAL_ADC_Start_DMA+0x19e>
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2201      	movs	r2, #1
 8000a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f000 f9c1 	bl	8000df0 <ADC_Enable>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a72:	7dfb      	ldrb	r3, [r7, #23]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f040 809a 	bne.w	8000bae <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a82:	f023 0301 	bic.w	r3, r3, #1
 8000a86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a4e      	ldr	r2, [pc, #312]	; (8000bcc <HAL_ADC_Start_DMA+0x1ac>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d105      	bne.n	8000aa4 <HAL_ADC_Start_DMA+0x84>
 8000a98:	4b4b      	ldr	r3, [pc, #300]	; (8000bc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d115      	bne.n	8000ad0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d026      	beq.n	8000b0c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ac6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ace:	e01d      	b.n	8000b0c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a39      	ldr	r2, [pc, #228]	; (8000bc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d004      	beq.n	8000af0 <HAL_ADC_Start_DMA+0xd0>
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a38      	ldr	r2, [pc, #224]	; (8000bcc <HAL_ADC_Start_DMA+0x1ac>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d10d      	bne.n	8000b0c <HAL_ADC_Start_DMA+0xec>
 8000af0:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d007      	beq.n	8000b0c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d006      	beq.n	8000b26 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1c:	f023 0206 	bic.w	r2, r3, #6
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b24:	e002      	b.n	8000b2c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	6a1b      	ldr	r3, [r3, #32]
 8000b38:	4a25      	ldr	r2, [pc, #148]	; (8000bd0 <HAL_ADC_Start_DMA+0x1b0>)
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	6a1b      	ldr	r3, [r3, #32]
 8000b40:	4a24      	ldr	r2, [pc, #144]	; (8000bd4 <HAL_ADC_Start_DMA+0x1b4>)
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <HAL_ADC_Start_DMA+0x1b8>)
 8000b4a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f06f 0202 	mvn.w	r2, #2
 8000b54:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b64:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6a18      	ldr	r0, [r3, #32]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	334c      	adds	r3, #76	; 0x4c
 8000b70:	4619      	mov	r1, r3
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f000 fba5 	bl	80012c4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b84:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b88:	d108      	bne.n	8000b9c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b98:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b9a:	e00f      	b.n	8000bbc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000baa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000bac:	e006      	b.n	8000bbc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000bb6:	e001      	b.n	8000bbc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40012400 	.word	0x40012400
 8000bcc:	40012800 	.word	0x40012800
 8000bd0:	08000f27 	.word	0x08000f27
 8000bd4:	08000fa3 	.word	0x08000fa3
 8000bd8:	08000fbf 	.word	0x08000fbf

08000bdc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d101      	bne.n	8000c20 <HAL_ADC_ConfigChannel+0x20>
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	e0dc      	b.n	8000dda <HAL_ADC_ConfigChannel+0x1da>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2201      	movs	r2, #1
 8000c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	2b06      	cmp	r3, #6
 8000c2e:	d81c      	bhi.n	8000c6a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	3b05      	subs	r3, #5
 8000c42:	221f      	movs	r2, #31
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4019      	ands	r1, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	6818      	ldr	r0, [r3, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685a      	ldr	r2, [r3, #4]
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	3b05      	subs	r3, #5
 8000c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	635a      	str	r2, [r3, #52]	; 0x34
 8000c68:	e03c      	b.n	8000ce4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b0c      	cmp	r3, #12
 8000c70:	d81c      	bhi.n	8000cac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	3b23      	subs	r3, #35	; 0x23
 8000c84:	221f      	movs	r2, #31
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	4019      	ands	r1, r3
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	6818      	ldr	r0, [r3, #0]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3b23      	subs	r3, #35	; 0x23
 8000c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	631a      	str	r2, [r3, #48]	; 0x30
 8000caa:	e01b      	b.n	8000ce4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	3b41      	subs	r3, #65	; 0x41
 8000cbe:	221f      	movs	r2, #31
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	4019      	ands	r1, r3
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3b41      	subs	r3, #65	; 0x41
 8000cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b09      	cmp	r3, #9
 8000cea:	d91c      	bls.n	8000d26 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	68d9      	ldr	r1, [r3, #12]
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3b1e      	subs	r3, #30
 8000cfe:	2207      	movs	r2, #7
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4019      	ands	r1, r3
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	6898      	ldr	r0, [r3, #8]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	3b1e      	subs	r3, #30
 8000d18:	fa00 f203 	lsl.w	r2, r0, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	430a      	orrs	r2, r1
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	e019      	b.n	8000d5a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6919      	ldr	r1, [r3, #16]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	2207      	movs	r2, #7
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	4019      	ands	r1, r3
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	6898      	ldr	r0, [r3, #8]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b10      	cmp	r3, #16
 8000d60:	d003      	beq.n	8000d6a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d66:	2b11      	cmp	r3, #17
 8000d68:	d132      	bne.n	8000dd0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d125      	bne.n	8000dc0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d126      	bne.n	8000dd0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d90:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b10      	cmp	r3, #16
 8000d98:	d11a      	bne.n	8000dd0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a13      	ldr	r2, [pc, #76]	; (8000dec <HAL_ADC_ConfigChannel+0x1ec>)
 8000da0:	fba2 2303 	umull	r2, r3, r2, r3
 8000da4:	0c9a      	lsrs	r2, r3, #18
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000db0:	e002      	b.n	8000db8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f9      	bne.n	8000db2 <HAL_ADC_ConfigChannel+0x1b2>
 8000dbe:	e007      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc4:	f043 0220 	orr.w	r2, r3, #32
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40012400 	.word	0x40012400
 8000de8:	20000000 	.word	0x20000000
 8000dec:	431bde83 	.word	0x431bde83

08000df0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d040      	beq.n	8000e90 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f042 0201 	orr.w	r2, r2, #1
 8000e1c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <ADC_Enable+0xac>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <ADC_Enable+0xb0>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	0c9b      	lsrs	r3, r3, #18
 8000e2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e2c:	e002      	b.n	8000e34 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f9      	bne.n	8000e2e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e3a:	f7ff fceb 	bl	8000814 <HAL_GetTick>
 8000e3e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e40:	e01f      	b.n	8000e82 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e42:	f7ff fce7 	bl	8000814 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d918      	bls.n	8000e82 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d011      	beq.n	8000e82 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e62:	f043 0210 	orr.w	r2, r3, #16
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6e:	f043 0201 	orr.w	r2, r3, #1
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e007      	b.n	8000e92 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d1d8      	bne.n	8000e42 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	431bde83 	.word	0x431bde83

08000ea4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d12e      	bne.n	8000f1c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0201 	bic.w	r2, r2, #1
 8000ecc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ece:	f7ff fca1 	bl	8000814 <HAL_GetTick>
 8000ed2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ed4:	e01b      	b.n	8000f0e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ed6:	f7ff fc9d 	bl	8000814 <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d914      	bls.n	8000f0e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d10d      	bne.n	8000f0e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef6:	f043 0210 	orr.w	r2, r3, #16
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	f043 0201 	orr.w	r2, r3, #1
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e007      	b.n	8000f1e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d0dc      	beq.n	8000ed6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d127      	bne.n	8000f90 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f56:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f5a:	d115      	bne.n	8000f88 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d111      	bne.n	8000f88 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d105      	bne.n	8000f88 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	f043 0201 	orr.w	r2, r3, #1
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f7ff fa41 	bl	8000410 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000f8e:	e004      	b.n	8000f9a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	4798      	blx	r3
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff fe13 	bl	8000bdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	f043 0204 	orr.w	r2, r3, #4
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f7ff fe02 	bl	8000bee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4906      	ldr	r1, [pc, #24]	; (800108c <__NVIC_EnableIRQ+0x34>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001158:	d301      	bcc.n	800115e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115a:	2301      	movs	r3, #1
 800115c:	e00f      	b.n	800117e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <SysTick_Config+0x40>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001166:	210f      	movs	r1, #15
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f7ff ff90 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SysTick_Config+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SysTick_Config+0x40>)
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff2d 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff42 	bl	800103c <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff90 	bl	80010e4 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5f 	bl	8001090 <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff35 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffa2 	bl	8001148 <SysTick_Config>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e043      	b.n	80012ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <HAL_DMA_Init+0xa8>)
 800122e:	4413      	add	r3, r2
 8001230:	4a22      	ldr	r2, [pc, #136]	; (80012bc <HAL_DMA_Init+0xac>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	009a      	lsls	r2, r3, #2
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <HAL_DMA_Init+0xb0>)
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2202      	movs	r2, #2
 8001248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800125a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800125e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001268:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001274:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001280:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	bffdfff8 	.word	0xbffdfff8
 80012bc:	cccccccd 	.word	0xcccccccd
 80012c0:	40020000 	.word	0x40020000

080012c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_DMA_Start_IT+0x20>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e04a      	b.n	800137a <HAL_DMA_Start_IT+0xb6>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d13a      	bne.n	800136c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2202      	movs	r2, #2
 80012fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2200      	movs	r2, #0
 8001302:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f938 	bl	8001590 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 020e 	orr.w	r2, r2, #14
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e00f      	b.n	800135a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0204 	bic.w	r2, r2, #4
 8001348:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 020a 	orr.w	r2, r2, #10
 8001358:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0201 	orr.w	r2, r2, #1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e005      	b.n	8001378 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001374:	2302      	movs	r3, #2
 8001376:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001378:	7dfb      	ldrb	r3, [r7, #23]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	2204      	movs	r2, #4
 80013a2:	409a      	lsls	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d04f      	beq.n	800144c <HAL_DMA_IRQHandler+0xc8>
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d04a      	beq.n	800144c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d107      	bne.n	80013d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0204 	bic.w	r2, r2, #4
 80013d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a66      	ldr	r2, [pc, #408]	; (8001574 <HAL_DMA_IRQHandler+0x1f0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d029      	beq.n	8001432 <HAL_DMA_IRQHandler+0xae>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a65      	ldr	r2, [pc, #404]	; (8001578 <HAL_DMA_IRQHandler+0x1f4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d022      	beq.n	800142e <HAL_DMA_IRQHandler+0xaa>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a63      	ldr	r2, [pc, #396]	; (800157c <HAL_DMA_IRQHandler+0x1f8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d01a      	beq.n	8001428 <HAL_DMA_IRQHandler+0xa4>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a62      	ldr	r2, [pc, #392]	; (8001580 <HAL_DMA_IRQHandler+0x1fc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d012      	beq.n	8001422 <HAL_DMA_IRQHandler+0x9e>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a60      	ldr	r2, [pc, #384]	; (8001584 <HAL_DMA_IRQHandler+0x200>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00a      	beq.n	800141c <HAL_DMA_IRQHandler+0x98>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a5f      	ldr	r2, [pc, #380]	; (8001588 <HAL_DMA_IRQHandler+0x204>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d102      	bne.n	8001416 <HAL_DMA_IRQHandler+0x92>
 8001410:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001414:	e00e      	b.n	8001434 <HAL_DMA_IRQHandler+0xb0>
 8001416:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800141a:	e00b      	b.n	8001434 <HAL_DMA_IRQHandler+0xb0>
 800141c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001420:	e008      	b.n	8001434 <HAL_DMA_IRQHandler+0xb0>
 8001422:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001426:	e005      	b.n	8001434 <HAL_DMA_IRQHandler+0xb0>
 8001428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142c:	e002      	b.n	8001434 <HAL_DMA_IRQHandler+0xb0>
 800142e:	2340      	movs	r3, #64	; 0x40
 8001430:	e000      	b.n	8001434 <HAL_DMA_IRQHandler+0xb0>
 8001432:	2304      	movs	r3, #4
 8001434:	4a55      	ldr	r2, [pc, #340]	; (800158c <HAL_DMA_IRQHandler+0x208>)
 8001436:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 8094 	beq.w	800156a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800144a:	e08e      	b.n	800156a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	2202      	movs	r2, #2
 8001452:	409a      	lsls	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d056      	beq.n	800150a <HAL_DMA_IRQHandler+0x186>
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d051      	beq.n	800150a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0320 	and.w	r3, r3, #32
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10b      	bne.n	800148c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 020a 	bic.w	r2, r2, #10
 8001482:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a38      	ldr	r2, [pc, #224]	; (8001574 <HAL_DMA_IRQHandler+0x1f0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d029      	beq.n	80014ea <HAL_DMA_IRQHandler+0x166>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a37      	ldr	r2, [pc, #220]	; (8001578 <HAL_DMA_IRQHandler+0x1f4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d022      	beq.n	80014e6 <HAL_DMA_IRQHandler+0x162>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a35      	ldr	r2, [pc, #212]	; (800157c <HAL_DMA_IRQHandler+0x1f8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01a      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x15c>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a34      	ldr	r2, [pc, #208]	; (8001580 <HAL_DMA_IRQHandler+0x1fc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d012      	beq.n	80014da <HAL_DMA_IRQHandler+0x156>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a32      	ldr	r2, [pc, #200]	; (8001584 <HAL_DMA_IRQHandler+0x200>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00a      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x150>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a31      	ldr	r2, [pc, #196]	; (8001588 <HAL_DMA_IRQHandler+0x204>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d102      	bne.n	80014ce <HAL_DMA_IRQHandler+0x14a>
 80014c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014cc:	e00e      	b.n	80014ec <HAL_DMA_IRQHandler+0x168>
 80014ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014d2:	e00b      	b.n	80014ec <HAL_DMA_IRQHandler+0x168>
 80014d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d8:	e008      	b.n	80014ec <HAL_DMA_IRQHandler+0x168>
 80014da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014de:	e005      	b.n	80014ec <HAL_DMA_IRQHandler+0x168>
 80014e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e4:	e002      	b.n	80014ec <HAL_DMA_IRQHandler+0x168>
 80014e6:	2320      	movs	r3, #32
 80014e8:	e000      	b.n	80014ec <HAL_DMA_IRQHandler+0x168>
 80014ea:	2302      	movs	r3, #2
 80014ec:	4a27      	ldr	r2, [pc, #156]	; (800158c <HAL_DMA_IRQHandler+0x208>)
 80014ee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d034      	beq.n	800156a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001508:	e02f      	b.n	800156a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	2208      	movs	r2, #8
 8001510:	409a      	lsls	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d028      	beq.n	800156c <HAL_DMA_IRQHandler+0x1e8>
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d023      	beq.n	800156c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 020e 	bic.w	r2, r2, #14
 8001532:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800153c:	2101      	movs	r1, #1
 800153e:	fa01 f202 	lsl.w	r2, r1, r2
 8001542:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	4798      	blx	r3
    }
  }
  return;
 800156a:	bf00      	nop
 800156c:	bf00      	nop
}
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40020008 	.word	0x40020008
 8001578:	4002001c 	.word	0x4002001c
 800157c:	40020030 	.word	0x40020030
 8001580:	40020044 	.word	0x40020044
 8001584:	40020058 	.word	0x40020058
 8001588:	4002006c 	.word	0x4002006c
 800158c:	40020000 	.word	0x40020000

08001590 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b10      	cmp	r3, #16
 80015bc:	d108      	bne.n	80015d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015ce:	e007      	b.n	80015e0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	60da      	str	r2, [r3, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
	...

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b08b      	sub	sp, #44	; 0x2c
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fe:	e148      	b.n	8001892 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001600:	2201      	movs	r2, #1
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	429a      	cmp	r2, r3
 800161a:	f040 8137 	bne.w	800188c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4aa3      	ldr	r2, [pc, #652]	; (80018b0 <HAL_GPIO_Init+0x2c4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d05e      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 8001628:	4aa1      	ldr	r2, [pc, #644]	; (80018b0 <HAL_GPIO_Init+0x2c4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d875      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 800162e:	4aa1      	ldr	r2, [pc, #644]	; (80018b4 <HAL_GPIO_Init+0x2c8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d058      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 8001634:	4a9f      	ldr	r2, [pc, #636]	; (80018b4 <HAL_GPIO_Init+0x2c8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d86f      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 800163a:	4a9f      	ldr	r2, [pc, #636]	; (80018b8 <HAL_GPIO_Init+0x2cc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d052      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 8001640:	4a9d      	ldr	r2, [pc, #628]	; (80018b8 <HAL_GPIO_Init+0x2cc>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d869      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 8001646:	4a9d      	ldr	r2, [pc, #628]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d04c      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 800164c:	4a9b      	ldr	r2, [pc, #620]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d863      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 8001652:	4a9b      	ldr	r2, [pc, #620]	; (80018c0 <HAL_GPIO_Init+0x2d4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d046      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 8001658:	4a99      	ldr	r2, [pc, #612]	; (80018c0 <HAL_GPIO_Init+0x2d4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d85d      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 800165e:	2b12      	cmp	r3, #18
 8001660:	d82a      	bhi.n	80016b8 <HAL_GPIO_Init+0xcc>
 8001662:	2b12      	cmp	r3, #18
 8001664:	d859      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <HAL_GPIO_Init+0x80>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	080016e7 	.word	0x080016e7
 8001670:	080016c1 	.word	0x080016c1
 8001674:	080016d3 	.word	0x080016d3
 8001678:	08001715 	.word	0x08001715
 800167c:	0800171b 	.word	0x0800171b
 8001680:	0800171b 	.word	0x0800171b
 8001684:	0800171b 	.word	0x0800171b
 8001688:	0800171b 	.word	0x0800171b
 800168c:	0800171b 	.word	0x0800171b
 8001690:	0800171b 	.word	0x0800171b
 8001694:	0800171b 	.word	0x0800171b
 8001698:	0800171b 	.word	0x0800171b
 800169c:	0800171b 	.word	0x0800171b
 80016a0:	0800171b 	.word	0x0800171b
 80016a4:	0800171b 	.word	0x0800171b
 80016a8:	0800171b 	.word	0x0800171b
 80016ac:	0800171b 	.word	0x0800171b
 80016b0:	080016c9 	.word	0x080016c9
 80016b4:	080016dd 	.word	0x080016dd
 80016b8:	4a82      	ldr	r2, [pc, #520]	; (80018c4 <HAL_GPIO_Init+0x2d8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016be:	e02c      	b.n	800171a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	623b      	str	r3, [r7, #32]
          break;
 80016c6:	e029      	b.n	800171c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	3304      	adds	r3, #4
 80016ce:	623b      	str	r3, [r7, #32]
          break;
 80016d0:	e024      	b.n	800171c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	3308      	adds	r3, #8
 80016d8:	623b      	str	r3, [r7, #32]
          break;
 80016da:	e01f      	b.n	800171c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	330c      	adds	r3, #12
 80016e2:	623b      	str	r3, [r7, #32]
          break;
 80016e4:	e01a      	b.n	800171c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ee:	2304      	movs	r3, #4
 80016f0:	623b      	str	r3, [r7, #32]
          break;
 80016f2:	e013      	b.n	800171c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d105      	bne.n	8001708 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016fc:	2308      	movs	r3, #8
 80016fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	611a      	str	r2, [r3, #16]
          break;
 8001706:	e009      	b.n	800171c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001708:	2308      	movs	r3, #8
 800170a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	615a      	str	r2, [r3, #20]
          break;
 8001712:	e003      	b.n	800171c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
          break;
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x130>
          break;
 800171a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	d801      	bhi.n	8001726 <HAL_GPIO_Init+0x13a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	e001      	b.n	800172a <HAL_GPIO_Init+0x13e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3304      	adds	r3, #4
 800172a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2bff      	cmp	r3, #255	; 0xff
 8001730:	d802      	bhi.n	8001738 <HAL_GPIO_Init+0x14c>
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	e002      	b.n	800173e <HAL_GPIO_Init+0x152>
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	3b08      	subs	r3, #8
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	210f      	movs	r1, #15
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	401a      	ands	r2, r3
 8001750:	6a39      	ldr	r1, [r7, #32]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	431a      	orrs	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8090 	beq.w	800188c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800176c:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <HAL_GPIO_Init+0x2dc>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a55      	ldr	r2, [pc, #340]	; (80018c8 <HAL_GPIO_Init+0x2dc>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_GPIO_Init+0x2dc>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001784:	4a51      	ldr	r2, [pc, #324]	; (80018cc <HAL_GPIO_Init+0x2e0>)
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	3302      	adds	r3, #2
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	220f      	movs	r2, #15
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4013      	ands	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a49      	ldr	r2, [pc, #292]	; (80018d0 <HAL_GPIO_Init+0x2e4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00d      	beq.n	80017cc <HAL_GPIO_Init+0x1e0>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a48      	ldr	r2, [pc, #288]	; (80018d4 <HAL_GPIO_Init+0x2e8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d007      	beq.n	80017c8 <HAL_GPIO_Init+0x1dc>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a47      	ldr	r2, [pc, #284]	; (80018d8 <HAL_GPIO_Init+0x2ec>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_GPIO_Init+0x1d8>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e004      	b.n	80017ce <HAL_GPIO_Init+0x1e2>
 80017c4:	2303      	movs	r3, #3
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x1e2>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_GPIO_Init+0x1e2>
 80017cc:	2300      	movs	r3, #0
 80017ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d0:	f002 0203 	and.w	r2, r2, #3
 80017d4:	0092      	lsls	r2, r2, #2
 80017d6:	4093      	lsls	r3, r2
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017de:	493b      	ldr	r1, [pc, #236]	; (80018cc <HAL_GPIO_Init+0x2e0>)
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d006      	beq.n	8001806 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017f8:	4b38      	ldr	r3, [pc, #224]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4937      	ldr	r1, [pc, #220]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
 8001804:	e006      	b.n	8001814 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001806:	4b35      	ldr	r3, [pc, #212]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	43db      	mvns	r3, r3
 800180e:	4933      	ldr	r1, [pc, #204]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001810:	4013      	ands	r3, r2
 8001812:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001820:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	492d      	ldr	r1, [pc, #180]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	43db      	mvns	r3, r3
 8001836:	4929      	ldr	r1, [pc, #164]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001838:	4013      	ands	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	4923      	ldr	r1, [pc, #140]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	43db      	mvns	r3, r3
 800185e:	491f      	ldr	r1, [pc, #124]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001860:	4013      	ands	r3, r2
 8001862:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	4919      	ldr	r1, [pc, #100]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	60cb      	str	r3, [r1, #12]
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	43db      	mvns	r3, r3
 8001886:	4915      	ldr	r1, [pc, #84]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001888:	4013      	ands	r3, r2
 800188a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	3301      	adds	r3, #1
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	f47f aeaf 	bne.w	8001600 <HAL_GPIO_Init+0x14>
  }
}
 80018a2:	bf00      	nop
 80018a4:	bf00      	nop
 80018a6:	372c      	adds	r7, #44	; 0x2c
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	10320000 	.word	0x10320000
 80018b4:	10310000 	.word	0x10310000
 80018b8:	10220000 	.word	0x10220000
 80018bc:	10210000 	.word	0x10210000
 80018c0:	10120000 	.word	0x10120000
 80018c4:	10110000 	.word	0x10110000
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010000 	.word	0x40010000
 80018d0:	40010800 	.word	0x40010800
 80018d4:	40010c00 	.word	0x40010c00
 80018d8:	40011000 	.word	0x40011000
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e26c      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8087 	beq.w	8001a0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001900:	4b92      	ldr	r3, [pc, #584]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b04      	cmp	r3, #4
 800190a:	d00c      	beq.n	8001926 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800190c:	4b8f      	ldr	r3, [pc, #572]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d112      	bne.n	800193e <HAL_RCC_OscConfig+0x5e>
 8001918:	4b8c      	ldr	r3, [pc, #560]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d10b      	bne.n	800193e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001926:	4b89      	ldr	r3, [pc, #548]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d06c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x12c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d168      	bne.n	8001a0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e246      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x76>
 8001948:	4b80      	ldr	r3, [pc, #512]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a7f      	ldr	r2, [pc, #508]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800194e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	e02e      	b.n	80019b4 <HAL_RCC_OscConfig+0xd4>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x98>
 800195e:	4b7b      	ldr	r3, [pc, #492]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a7a      	ldr	r2, [pc, #488]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b78      	ldr	r3, [pc, #480]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a77      	ldr	r2, [pc, #476]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e01d      	b.n	80019b4 <HAL_RCC_OscConfig+0xd4>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0xbc>
 8001982:	4b72      	ldr	r3, [pc, #456]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a71      	ldr	r2, [pc, #452]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b6f      	ldr	r3, [pc, #444]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a6e      	ldr	r2, [pc, #440]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0xd4>
 800199c:	4b6b      	ldr	r3, [pc, #428]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a6a      	ldr	r2, [pc, #424]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a67      	ldr	r2, [pc, #412]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7fe ff2a 	bl	8000814 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7fe ff26 	bl	8000814 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1fa      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	4b5d      	ldr	r3, [pc, #372]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0xe4>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7fe ff16 	bl	8000814 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7fe ff12 	bl	8000814 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e1e6      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fe:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x10c>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d063      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a1a:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00b      	beq.n	8001a3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a26:	4b49      	ldr	r3, [pc, #292]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d11c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x18c>
 8001a32:	4b46      	ldr	r3, [pc, #280]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d116      	bne.n	8001a6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_RCC_OscConfig+0x176>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d001      	beq.n	8001a56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e1ba      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a56:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4939      	ldr	r1, [pc, #228]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6a:	e03a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a74:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7fe fecb 	bl	8000814 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a82:	f7fe fec7 	bl	8000814 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e19b      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a94:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4927      	ldr	r1, [pc, #156]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
 8001ab4:	e015      	b.n	8001ae2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7fe feaa 	bl	8000814 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac4:	f7fe fea6 	bl	8000814 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e17a      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d03a      	beq.n	8001b64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d019      	beq.n	8001b2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afc:	f7fe fe8a 	bl	8000814 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b04:	f7fe fe86 	bl	8000814 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e15a      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f000 fad8 	bl	80020d8 <RCC_Delay>
 8001b28:	e01c      	b.n	8001b64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7fe fe70 	bl	8000814 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b36:	e00f      	b.n	8001b58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7fe fe6c 	bl	8000814 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d908      	bls.n	8001b58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e140      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	42420000 	.word	0x42420000
 8001b54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b58:	4b9e      	ldr	r3, [pc, #632]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1e9      	bne.n	8001b38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80a6 	beq.w	8001cbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b76:	4b97      	ldr	r3, [pc, #604]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10d      	bne.n	8001b9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b94      	ldr	r3, [pc, #592]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a93      	ldr	r2, [pc, #588]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b91      	ldr	r3, [pc, #580]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9e:	4b8e      	ldr	r3, [pc, #568]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d118      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001baa:	4b8b      	ldr	r3, [pc, #556]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a8a      	ldr	r2, [pc, #552]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb6:	f7fe fe2d 	bl	8000814 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbe:	f7fe fe29 	bl	8000814 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b64      	cmp	r3, #100	; 0x64
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0fd      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	4b81      	ldr	r3, [pc, #516]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x312>
 8001be4:	4b7b      	ldr	r3, [pc, #492]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4a7a      	ldr	r2, [pc, #488]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6213      	str	r3, [r2, #32]
 8001bf0:	e02d      	b.n	8001c4e <HAL_RCC_OscConfig+0x36e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x334>
 8001bfa:	4b76      	ldr	r3, [pc, #472]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4a75      	ldr	r2, [pc, #468]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6213      	str	r3, [r2, #32]
 8001c06:	4b73      	ldr	r3, [pc, #460]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a72      	ldr	r2, [pc, #456]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	f023 0304 	bic.w	r3, r3, #4
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	e01c      	b.n	8001c4e <HAL_RCC_OscConfig+0x36e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d10c      	bne.n	8001c36 <HAL_RCC_OscConfig+0x356>
 8001c1c:	4b6d      	ldr	r3, [pc, #436]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4a6c      	ldr	r2, [pc, #432]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6213      	str	r3, [r2, #32]
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4a69      	ldr	r2, [pc, #420]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6213      	str	r3, [r2, #32]
 8001c34:	e00b      	b.n	8001c4e <HAL_RCC_OscConfig+0x36e>
 8001c36:	4b67      	ldr	r3, [pc, #412]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4a66      	ldr	r2, [pc, #408]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	6213      	str	r3, [r2, #32]
 8001c42:	4b64      	ldr	r3, [pc, #400]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4a63      	ldr	r2, [pc, #396]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	f023 0304 	bic.w	r3, r3, #4
 8001c4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d015      	beq.n	8001c82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7fe fddd 	bl	8000814 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7fe fdd9 	bl	8000814 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0ab      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	4b57      	ldr	r3, [pc, #348]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ee      	beq.n	8001c5e <HAL_RCC_OscConfig+0x37e>
 8001c80:	e014      	b.n	8001cac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7fe fdc7 	bl	8000814 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7fe fdc3 	bl	8000814 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e095      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1ee      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d105      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb2:	4b48      	ldr	r3, [pc, #288]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a47      	ldr	r2, [pc, #284]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8081 	beq.w	8001dca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc8:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d061      	beq.n	8001d98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d146      	bne.n	8001d6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cdc:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <HAL_RCC_OscConfig+0x4fc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7fe fd97 	bl	8000814 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7fe fd93 	bl	8000814 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e067      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfc:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d10:	d108      	bne.n	8001d24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d12:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	492d      	ldr	r1, [pc, #180]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d24:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a19      	ldr	r1, [r3, #32]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	430b      	orrs	r3, r1
 8001d36:	4927      	ldr	r1, [pc, #156]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_RCC_OscConfig+0x4fc>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7fe fd67 	bl	8000814 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7fe fd63 	bl	8000814 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e037      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x46a>
 8001d68:	e02f      	b.n	8001dca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <HAL_RCC_OscConfig+0x4fc>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7fe fd50 	bl	8000814 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d78:	f7fe fd4c 	bl	8000814 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e020      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x498>
 8001d96:	e018      	b.n	8001dca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e013      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d001      	beq.n	8001dca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	42420060 	.word	0x42420060

08001de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0d0      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d910      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 0207 	bic.w	r2, r3, #7
 8001e0a:	4965      	ldr	r1, [pc, #404]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0b8      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e3c:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e54:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b50      	ldr	r3, [pc, #320]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	494d      	ldr	r1, [pc, #308]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d040      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d115      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e07f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e073      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e06b      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebe:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f023 0203 	bic.w	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4936      	ldr	r1, [pc, #216]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7fe fca0 	bl	8000814 <HAL_GetTick>
 8001ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed8:	f7fe fc9c 	bl	8000814 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e053      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 020c 	and.w	r2, r3, #12
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d1eb      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d210      	bcs.n	8001f30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 0207 	bic.w	r2, r3, #7
 8001f16:	4922      	ldr	r1, [pc, #136]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e032      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4916      	ldr	r1, [pc, #88]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f6e:	f000 f821 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	490a      	ldr	r1, [pc, #40]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1cc>)
 8001f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1d0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fbfe 	bl	8000790 <HAL_InitTick>

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	08002f04 	.word	0x08002f04
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000004 	.word	0x20000004

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b490      	push	{r4, r7}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fba:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fbc:	1d3c      	adds	r4, r7, #4
 8001fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fc4:	f240 2301 	movw	r3, #513	; 0x201
 8001fc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d002      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d003      	beq.n	8001ffa <HAL_RCC_GetSysClockFreq+0x46>
 8001ff2:	e02d      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff6:	623b      	str	r3, [r7, #32]
      break;
 8001ff8:	e02d      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	0c9b      	lsrs	r3, r3, #18
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002006:	4413      	add	r3, r2
 8002008:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800200c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	0c5b      	lsrs	r3, r3, #17
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002026:	4413      	add	r3, r2
 8002028:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800202c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002032:	fb02 f203 	mul.w	r2, r2, r3
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
 800203e:	e004      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	623b      	str	r3, [r7, #32]
      break;
 800204e:	e002      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002052:	623b      	str	r3, [r7, #32]
      break;
 8002054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002056:	6a3b      	ldr	r3, [r7, #32]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3728      	adds	r7, #40	; 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bc90      	pop	{r4, r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	08002ef4 	.word	0x08002ef4
 8002068:	40021000 	.word	0x40021000
 800206c:	007a1200 	.word	0x007a1200
 8002070:	003d0900 	.word	0x003d0900

08002074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002078:	4b02      	ldr	r3, [pc, #8]	; (8002084 <HAL_RCC_GetHCLKFreq+0x10>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	20000000 	.word	0x20000000

08002088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800208c:	f7ff fff2 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4903      	ldr	r1, [pc, #12]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08002f14 	.word	0x08002f14

080020b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020b4:	f7ff ffde 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	0adb      	lsrs	r3, r3, #11
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	4903      	ldr	r1, [pc, #12]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08002f14 	.word	0x08002f14

080020d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <RCC_Delay+0x34>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <RCC_Delay+0x38>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0a5b      	lsrs	r3, r3, #9
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020f4:	bf00      	nop
  }
  while (Delay --);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1e5a      	subs	r2, r3, #1
 80020fa:	60fa      	str	r2, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f9      	bne.n	80020f4 <RCC_Delay+0x1c>
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	20000000 	.word	0x20000000
 8002110:	10624dd3 	.word	0x10624dd3

08002114 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d07d      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002134:	4b4f      	ldr	r3, [pc, #316]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10d      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002140:	4b4c      	ldr	r3, [pc, #304]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	4a4b      	ldr	r2, [pc, #300]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214a:	61d3      	str	r3, [r2, #28]
 800214c:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002158:	2301      	movs	r3, #1
 800215a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	4b46      	ldr	r3, [pc, #280]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d118      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002168:	4b43      	ldr	r3, [pc, #268]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a42      	ldr	r2, [pc, #264]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002174:	f7fe fb4e 	bl	8000814 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	e008      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217c:	f7fe fb4a 	bl	8000814 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e06d      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218e:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800219a:	4b36      	ldr	r3, [pc, #216]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d02e      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d027      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021b8:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021c2:	4b2e      	ldr	r3, [pc, #184]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021c8:	4b2c      	ldr	r3, [pc, #176]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021ce:	4a29      	ldr	r2, [pc, #164]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d014      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe fb19 	bl	8000814 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	e00a      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7fe fb15 	bl	8000814 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e036      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0ee      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4917      	ldr	r1, [pc, #92]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002216:	4313      	orrs	r3, r2
 8002218:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800221a:	7dfb      	ldrb	r3, [r7, #23]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	4a13      	ldr	r2, [pc, #76]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	490b      	ldr	r1, [pc, #44]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	4904      	ldr	r1, [pc, #16]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	40007000 	.word	0x40007000
 800227c:	42420440 	.word	0x42420440

08002280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e03f      	b.n	8002312 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe f97c 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2224      	movs	r2, #36	; 0x24
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f905 	bl	80024d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b08a      	sub	sp, #40	; 0x28
 800231e:	af02      	add	r7, sp, #8
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	4613      	mov	r3, r2
 8002328:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b20      	cmp	r3, #32
 8002338:	d17c      	bne.n	8002434 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <HAL_UART_Transmit+0x2c>
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e075      	b.n	8002436 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_UART_Transmit+0x3e>
 8002354:	2302      	movs	r3, #2
 8002356:	e06e      	b.n	8002436 <HAL_UART_Transmit+0x11c>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2221      	movs	r2, #33	; 0x21
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800236e:	f7fe fa51 	bl	8000814 <HAL_GetTick>
 8002372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002388:	d108      	bne.n	800239c <HAL_UART_Transmit+0x82>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d104      	bne.n	800239c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	e003      	b.n	80023a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023ac:	e02a      	b.n	8002404 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2200      	movs	r2, #0
 80023b6:	2180      	movs	r1, #128	; 0x80
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f840 	bl	800243e <UART_WaitOnFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e036      	b.n	8002436 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10b      	bne.n	80023e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	3302      	adds	r3, #2
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	e007      	b.n	80023f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	3301      	adds	r3, #1
 80023f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1cf      	bne.n	80023ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2200      	movs	r2, #0
 8002416:	2140      	movs	r1, #64	; 0x40
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f810 	bl	800243e <UART_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e006      	b.n	8002436 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800244e:	e02c      	b.n	80024aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d028      	beq.n	80024aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <UART_WaitOnFlagUntilTimeout+0x30>
 800245e:	f7fe f9d9 	bl	8000814 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	429a      	cmp	r2, r3
 800246c:	d21d      	bcs.n	80024aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800247c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e00f      	b.n	80024ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4013      	ands	r3, r2
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	bf0c      	ite	eq
 80024ba:	2301      	moveq	r3, #1
 80024bc:	2300      	movne	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d0c3      	beq.n	8002450 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800250e:	f023 030c 	bic.w	r3, r3, #12
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	430b      	orrs	r3, r1
 800251a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2c      	ldr	r2, [pc, #176]	; (80025e8 <UART_SetConfig+0x114>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d103      	bne.n	8002544 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800253c:	f7ff fdb8 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	e002      	b.n	800254a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002544:	f7ff fda0 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 8002548:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	009a      	lsls	r2, r3, #2
 8002554:	441a      	add	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	4a22      	ldr	r2, [pc, #136]	; (80025ec <UART_SetConfig+0x118>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	0119      	lsls	r1, r3, #4
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	009a      	lsls	r2, r3, #2
 8002574:	441a      	add	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002580:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <UART_SetConfig+0x118>)
 8002582:	fba3 0302 	umull	r0, r3, r3, r2
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2064      	movs	r0, #100	; 0x64
 800258a:	fb00 f303 	mul.w	r3, r0, r3
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	3332      	adds	r3, #50	; 0x32
 8002594:	4a15      	ldr	r2, [pc, #84]	; (80025ec <UART_SetConfig+0x118>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a0:	4419      	add	r1, r3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	009a      	lsls	r2, r3, #2
 80025ac:	441a      	add	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <UART_SetConfig+0x118>)
 80025ba:	fba3 0302 	umull	r0, r3, r3, r2
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2064      	movs	r0, #100	; 0x64
 80025c2:	fb00 f303 	mul.w	r3, r0, r3
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	3332      	adds	r3, #50	; 0x32
 80025cc:	4a07      	ldr	r2, [pc, #28]	; (80025ec <UART_SetConfig+0x118>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	f003 020f 	and.w	r2, r3, #15
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	440a      	add	r2, r1
 80025de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40013800 	.word	0x40013800
 80025ec:	51eb851f 	.word	0x51eb851f

080025f0 <__errno>:
 80025f0:	4b01      	ldr	r3, [pc, #4]	; (80025f8 <__errno+0x8>)
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000000c 	.word	0x2000000c

080025fc <__libc_init_array>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	2600      	movs	r6, #0
 8002600:	4d0c      	ldr	r5, [pc, #48]	; (8002634 <__libc_init_array+0x38>)
 8002602:	4c0d      	ldr	r4, [pc, #52]	; (8002638 <__libc_init_array+0x3c>)
 8002604:	1b64      	subs	r4, r4, r5
 8002606:	10a4      	asrs	r4, r4, #2
 8002608:	42a6      	cmp	r6, r4
 800260a:	d109      	bne.n	8002620 <__libc_init_array+0x24>
 800260c:	f000 fc5c 	bl	8002ec8 <_init>
 8002610:	2600      	movs	r6, #0
 8002612:	4d0a      	ldr	r5, [pc, #40]	; (800263c <__libc_init_array+0x40>)
 8002614:	4c0a      	ldr	r4, [pc, #40]	; (8002640 <__libc_init_array+0x44>)
 8002616:	1b64      	subs	r4, r4, r5
 8002618:	10a4      	asrs	r4, r4, #2
 800261a:	42a6      	cmp	r6, r4
 800261c:	d105      	bne.n	800262a <__libc_init_array+0x2e>
 800261e:	bd70      	pop	{r4, r5, r6, pc}
 8002620:	f855 3b04 	ldr.w	r3, [r5], #4
 8002624:	4798      	blx	r3
 8002626:	3601      	adds	r6, #1
 8002628:	e7ee      	b.n	8002608 <__libc_init_array+0xc>
 800262a:	f855 3b04 	ldr.w	r3, [r5], #4
 800262e:	4798      	blx	r3
 8002630:	3601      	adds	r6, #1
 8002632:	e7f2      	b.n	800261a <__libc_init_array+0x1e>
 8002634:	08002f50 	.word	0x08002f50
 8002638:	08002f50 	.word	0x08002f50
 800263c:	08002f50 	.word	0x08002f50
 8002640:	08002f54 	.word	0x08002f54

08002644 <memset>:
 8002644:	4603      	mov	r3, r0
 8002646:	4402      	add	r2, r0
 8002648:	4293      	cmp	r3, r2
 800264a:	d100      	bne.n	800264e <memset+0xa>
 800264c:	4770      	bx	lr
 800264e:	f803 1b01 	strb.w	r1, [r3], #1
 8002652:	e7f9      	b.n	8002648 <memset+0x4>

08002654 <siprintf>:
 8002654:	b40e      	push	{r1, r2, r3}
 8002656:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800265a:	b500      	push	{lr}
 800265c:	b09c      	sub	sp, #112	; 0x70
 800265e:	ab1d      	add	r3, sp, #116	; 0x74
 8002660:	9002      	str	r0, [sp, #8]
 8002662:	9006      	str	r0, [sp, #24]
 8002664:	9107      	str	r1, [sp, #28]
 8002666:	9104      	str	r1, [sp, #16]
 8002668:	4808      	ldr	r0, [pc, #32]	; (800268c <siprintf+0x38>)
 800266a:	4909      	ldr	r1, [pc, #36]	; (8002690 <siprintf+0x3c>)
 800266c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002670:	9105      	str	r1, [sp, #20]
 8002672:	6800      	ldr	r0, [r0, #0]
 8002674:	a902      	add	r1, sp, #8
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	f000 f868 	bl	800274c <_svfiprintf_r>
 800267c:	2200      	movs	r2, #0
 800267e:	9b02      	ldr	r3, [sp, #8]
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	b01c      	add	sp, #112	; 0x70
 8002684:	f85d eb04 	ldr.w	lr, [sp], #4
 8002688:	b003      	add	sp, #12
 800268a:	4770      	bx	lr
 800268c:	2000000c 	.word	0x2000000c
 8002690:	ffff0208 	.word	0xffff0208

08002694 <__ssputs_r>:
 8002694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002698:	688e      	ldr	r6, [r1, #8]
 800269a:	4682      	mov	sl, r0
 800269c:	429e      	cmp	r6, r3
 800269e:	460c      	mov	r4, r1
 80026a0:	4690      	mov	r8, r2
 80026a2:	461f      	mov	r7, r3
 80026a4:	d838      	bhi.n	8002718 <__ssputs_r+0x84>
 80026a6:	898a      	ldrh	r2, [r1, #12]
 80026a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80026ac:	d032      	beq.n	8002714 <__ssputs_r+0x80>
 80026ae:	6825      	ldr	r5, [r4, #0]
 80026b0:	6909      	ldr	r1, [r1, #16]
 80026b2:	3301      	adds	r3, #1
 80026b4:	eba5 0901 	sub.w	r9, r5, r1
 80026b8:	6965      	ldr	r5, [r4, #20]
 80026ba:	444b      	add	r3, r9
 80026bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80026c4:	106d      	asrs	r5, r5, #1
 80026c6:	429d      	cmp	r5, r3
 80026c8:	bf38      	it	cc
 80026ca:	461d      	movcc	r5, r3
 80026cc:	0553      	lsls	r3, r2, #21
 80026ce:	d531      	bpl.n	8002734 <__ssputs_r+0xa0>
 80026d0:	4629      	mov	r1, r5
 80026d2:	f000 fb53 	bl	8002d7c <_malloc_r>
 80026d6:	4606      	mov	r6, r0
 80026d8:	b950      	cbnz	r0, 80026f0 <__ssputs_r+0x5c>
 80026da:	230c      	movs	r3, #12
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f8ca 3000 	str.w	r3, [sl]
 80026e4:	89a3      	ldrh	r3, [r4, #12]
 80026e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ea:	81a3      	strh	r3, [r4, #12]
 80026ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026f0:	464a      	mov	r2, r9
 80026f2:	6921      	ldr	r1, [r4, #16]
 80026f4:	f000 face 	bl	8002c94 <memcpy>
 80026f8:	89a3      	ldrh	r3, [r4, #12]
 80026fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80026fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002702:	81a3      	strh	r3, [r4, #12]
 8002704:	6126      	str	r6, [r4, #16]
 8002706:	444e      	add	r6, r9
 8002708:	6026      	str	r6, [r4, #0]
 800270a:	463e      	mov	r6, r7
 800270c:	6165      	str	r5, [r4, #20]
 800270e:	eba5 0509 	sub.w	r5, r5, r9
 8002712:	60a5      	str	r5, [r4, #8]
 8002714:	42be      	cmp	r6, r7
 8002716:	d900      	bls.n	800271a <__ssputs_r+0x86>
 8002718:	463e      	mov	r6, r7
 800271a:	4632      	mov	r2, r6
 800271c:	4641      	mov	r1, r8
 800271e:	6820      	ldr	r0, [r4, #0]
 8002720:	f000 fac6 	bl	8002cb0 <memmove>
 8002724:	68a3      	ldr	r3, [r4, #8]
 8002726:	6822      	ldr	r2, [r4, #0]
 8002728:	1b9b      	subs	r3, r3, r6
 800272a:	4432      	add	r2, r6
 800272c:	2000      	movs	r0, #0
 800272e:	60a3      	str	r3, [r4, #8]
 8002730:	6022      	str	r2, [r4, #0]
 8002732:	e7db      	b.n	80026ec <__ssputs_r+0x58>
 8002734:	462a      	mov	r2, r5
 8002736:	f000 fb7b 	bl	8002e30 <_realloc_r>
 800273a:	4606      	mov	r6, r0
 800273c:	2800      	cmp	r0, #0
 800273e:	d1e1      	bne.n	8002704 <__ssputs_r+0x70>
 8002740:	4650      	mov	r0, sl
 8002742:	6921      	ldr	r1, [r4, #16]
 8002744:	f000 face 	bl	8002ce4 <_free_r>
 8002748:	e7c7      	b.n	80026da <__ssputs_r+0x46>
	...

0800274c <_svfiprintf_r>:
 800274c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002750:	4698      	mov	r8, r3
 8002752:	898b      	ldrh	r3, [r1, #12]
 8002754:	4607      	mov	r7, r0
 8002756:	061b      	lsls	r3, r3, #24
 8002758:	460d      	mov	r5, r1
 800275a:	4614      	mov	r4, r2
 800275c:	b09d      	sub	sp, #116	; 0x74
 800275e:	d50e      	bpl.n	800277e <_svfiprintf_r+0x32>
 8002760:	690b      	ldr	r3, [r1, #16]
 8002762:	b963      	cbnz	r3, 800277e <_svfiprintf_r+0x32>
 8002764:	2140      	movs	r1, #64	; 0x40
 8002766:	f000 fb09 	bl	8002d7c <_malloc_r>
 800276a:	6028      	str	r0, [r5, #0]
 800276c:	6128      	str	r0, [r5, #16]
 800276e:	b920      	cbnz	r0, 800277a <_svfiprintf_r+0x2e>
 8002770:	230c      	movs	r3, #12
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	e0d1      	b.n	800291e <_svfiprintf_r+0x1d2>
 800277a:	2340      	movs	r3, #64	; 0x40
 800277c:	616b      	str	r3, [r5, #20]
 800277e:	2300      	movs	r3, #0
 8002780:	9309      	str	r3, [sp, #36]	; 0x24
 8002782:	2320      	movs	r3, #32
 8002784:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002788:	2330      	movs	r3, #48	; 0x30
 800278a:	f04f 0901 	mov.w	r9, #1
 800278e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002792:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002938 <_svfiprintf_r+0x1ec>
 8002796:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800279a:	4623      	mov	r3, r4
 800279c:	469a      	mov	sl, r3
 800279e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027a2:	b10a      	cbz	r2, 80027a8 <_svfiprintf_r+0x5c>
 80027a4:	2a25      	cmp	r2, #37	; 0x25
 80027a6:	d1f9      	bne.n	800279c <_svfiprintf_r+0x50>
 80027a8:	ebba 0b04 	subs.w	fp, sl, r4
 80027ac:	d00b      	beq.n	80027c6 <_svfiprintf_r+0x7a>
 80027ae:	465b      	mov	r3, fp
 80027b0:	4622      	mov	r2, r4
 80027b2:	4629      	mov	r1, r5
 80027b4:	4638      	mov	r0, r7
 80027b6:	f7ff ff6d 	bl	8002694 <__ssputs_r>
 80027ba:	3001      	adds	r0, #1
 80027bc:	f000 80aa 	beq.w	8002914 <_svfiprintf_r+0x1c8>
 80027c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027c2:	445a      	add	r2, fp
 80027c4:	9209      	str	r2, [sp, #36]	; 0x24
 80027c6:	f89a 3000 	ldrb.w	r3, [sl]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 80a2 	beq.w	8002914 <_svfiprintf_r+0x1c8>
 80027d0:	2300      	movs	r3, #0
 80027d2:	f04f 32ff 	mov.w	r2, #4294967295
 80027d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027da:	f10a 0a01 	add.w	sl, sl, #1
 80027de:	9304      	str	r3, [sp, #16]
 80027e0:	9307      	str	r3, [sp, #28]
 80027e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027e6:	931a      	str	r3, [sp, #104]	; 0x68
 80027e8:	4654      	mov	r4, sl
 80027ea:	2205      	movs	r2, #5
 80027ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027f0:	4851      	ldr	r0, [pc, #324]	; (8002938 <_svfiprintf_r+0x1ec>)
 80027f2:	f000 fa41 	bl	8002c78 <memchr>
 80027f6:	9a04      	ldr	r2, [sp, #16]
 80027f8:	b9d8      	cbnz	r0, 8002832 <_svfiprintf_r+0xe6>
 80027fa:	06d0      	lsls	r0, r2, #27
 80027fc:	bf44      	itt	mi
 80027fe:	2320      	movmi	r3, #32
 8002800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002804:	0711      	lsls	r1, r2, #28
 8002806:	bf44      	itt	mi
 8002808:	232b      	movmi	r3, #43	; 0x2b
 800280a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800280e:	f89a 3000 	ldrb.w	r3, [sl]
 8002812:	2b2a      	cmp	r3, #42	; 0x2a
 8002814:	d015      	beq.n	8002842 <_svfiprintf_r+0xf6>
 8002816:	4654      	mov	r4, sl
 8002818:	2000      	movs	r0, #0
 800281a:	f04f 0c0a 	mov.w	ip, #10
 800281e:	9a07      	ldr	r2, [sp, #28]
 8002820:	4621      	mov	r1, r4
 8002822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002826:	3b30      	subs	r3, #48	; 0x30
 8002828:	2b09      	cmp	r3, #9
 800282a:	d94e      	bls.n	80028ca <_svfiprintf_r+0x17e>
 800282c:	b1b0      	cbz	r0, 800285c <_svfiprintf_r+0x110>
 800282e:	9207      	str	r2, [sp, #28]
 8002830:	e014      	b.n	800285c <_svfiprintf_r+0x110>
 8002832:	eba0 0308 	sub.w	r3, r0, r8
 8002836:	fa09 f303 	lsl.w	r3, r9, r3
 800283a:	4313      	orrs	r3, r2
 800283c:	46a2      	mov	sl, r4
 800283e:	9304      	str	r3, [sp, #16]
 8002840:	e7d2      	b.n	80027e8 <_svfiprintf_r+0x9c>
 8002842:	9b03      	ldr	r3, [sp, #12]
 8002844:	1d19      	adds	r1, r3, #4
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	9103      	str	r1, [sp, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	bfbb      	ittet	lt
 800284e:	425b      	neglt	r3, r3
 8002850:	f042 0202 	orrlt.w	r2, r2, #2
 8002854:	9307      	strge	r3, [sp, #28]
 8002856:	9307      	strlt	r3, [sp, #28]
 8002858:	bfb8      	it	lt
 800285a:	9204      	strlt	r2, [sp, #16]
 800285c:	7823      	ldrb	r3, [r4, #0]
 800285e:	2b2e      	cmp	r3, #46	; 0x2e
 8002860:	d10c      	bne.n	800287c <_svfiprintf_r+0x130>
 8002862:	7863      	ldrb	r3, [r4, #1]
 8002864:	2b2a      	cmp	r3, #42	; 0x2a
 8002866:	d135      	bne.n	80028d4 <_svfiprintf_r+0x188>
 8002868:	9b03      	ldr	r3, [sp, #12]
 800286a:	3402      	adds	r4, #2
 800286c:	1d1a      	adds	r2, r3, #4
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	9203      	str	r2, [sp, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	bfb8      	it	lt
 8002876:	f04f 33ff 	movlt.w	r3, #4294967295
 800287a:	9305      	str	r3, [sp, #20]
 800287c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002948 <_svfiprintf_r+0x1fc>
 8002880:	2203      	movs	r2, #3
 8002882:	4650      	mov	r0, sl
 8002884:	7821      	ldrb	r1, [r4, #0]
 8002886:	f000 f9f7 	bl	8002c78 <memchr>
 800288a:	b140      	cbz	r0, 800289e <_svfiprintf_r+0x152>
 800288c:	2340      	movs	r3, #64	; 0x40
 800288e:	eba0 000a 	sub.w	r0, r0, sl
 8002892:	fa03 f000 	lsl.w	r0, r3, r0
 8002896:	9b04      	ldr	r3, [sp, #16]
 8002898:	3401      	adds	r4, #1
 800289a:	4303      	orrs	r3, r0
 800289c:	9304      	str	r3, [sp, #16]
 800289e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028a2:	2206      	movs	r2, #6
 80028a4:	4825      	ldr	r0, [pc, #148]	; (800293c <_svfiprintf_r+0x1f0>)
 80028a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028aa:	f000 f9e5 	bl	8002c78 <memchr>
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d038      	beq.n	8002924 <_svfiprintf_r+0x1d8>
 80028b2:	4b23      	ldr	r3, [pc, #140]	; (8002940 <_svfiprintf_r+0x1f4>)
 80028b4:	bb1b      	cbnz	r3, 80028fe <_svfiprintf_r+0x1b2>
 80028b6:	9b03      	ldr	r3, [sp, #12]
 80028b8:	3307      	adds	r3, #7
 80028ba:	f023 0307 	bic.w	r3, r3, #7
 80028be:	3308      	adds	r3, #8
 80028c0:	9303      	str	r3, [sp, #12]
 80028c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028c4:	4433      	add	r3, r6
 80028c6:	9309      	str	r3, [sp, #36]	; 0x24
 80028c8:	e767      	b.n	800279a <_svfiprintf_r+0x4e>
 80028ca:	460c      	mov	r4, r1
 80028cc:	2001      	movs	r0, #1
 80028ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80028d2:	e7a5      	b.n	8002820 <_svfiprintf_r+0xd4>
 80028d4:	2300      	movs	r3, #0
 80028d6:	f04f 0c0a 	mov.w	ip, #10
 80028da:	4619      	mov	r1, r3
 80028dc:	3401      	adds	r4, #1
 80028de:	9305      	str	r3, [sp, #20]
 80028e0:	4620      	mov	r0, r4
 80028e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028e6:	3a30      	subs	r2, #48	; 0x30
 80028e8:	2a09      	cmp	r2, #9
 80028ea:	d903      	bls.n	80028f4 <_svfiprintf_r+0x1a8>
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0c5      	beq.n	800287c <_svfiprintf_r+0x130>
 80028f0:	9105      	str	r1, [sp, #20]
 80028f2:	e7c3      	b.n	800287c <_svfiprintf_r+0x130>
 80028f4:	4604      	mov	r4, r0
 80028f6:	2301      	movs	r3, #1
 80028f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80028fc:	e7f0      	b.n	80028e0 <_svfiprintf_r+0x194>
 80028fe:	ab03      	add	r3, sp, #12
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	462a      	mov	r2, r5
 8002904:	4638      	mov	r0, r7
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <_svfiprintf_r+0x1f8>)
 8002908:	a904      	add	r1, sp, #16
 800290a:	f3af 8000 	nop.w
 800290e:	1c42      	adds	r2, r0, #1
 8002910:	4606      	mov	r6, r0
 8002912:	d1d6      	bne.n	80028c2 <_svfiprintf_r+0x176>
 8002914:	89ab      	ldrh	r3, [r5, #12]
 8002916:	065b      	lsls	r3, r3, #25
 8002918:	f53f af2c 	bmi.w	8002774 <_svfiprintf_r+0x28>
 800291c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800291e:	b01d      	add	sp, #116	; 0x74
 8002920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002924:	ab03      	add	r3, sp, #12
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	462a      	mov	r2, r5
 800292a:	4638      	mov	r0, r7
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <_svfiprintf_r+0x1f8>)
 800292e:	a904      	add	r1, sp, #16
 8002930:	f000 f87c 	bl	8002a2c <_printf_i>
 8002934:	e7eb      	b.n	800290e <_svfiprintf_r+0x1c2>
 8002936:	bf00      	nop
 8002938:	08002f1c 	.word	0x08002f1c
 800293c:	08002f26 	.word	0x08002f26
 8002940:	00000000 	.word	0x00000000
 8002944:	08002695 	.word	0x08002695
 8002948:	08002f22 	.word	0x08002f22

0800294c <_printf_common>:
 800294c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002950:	4616      	mov	r6, r2
 8002952:	4699      	mov	r9, r3
 8002954:	688a      	ldr	r2, [r1, #8]
 8002956:	690b      	ldr	r3, [r1, #16]
 8002958:	4607      	mov	r7, r0
 800295a:	4293      	cmp	r3, r2
 800295c:	bfb8      	it	lt
 800295e:	4613      	movlt	r3, r2
 8002960:	6033      	str	r3, [r6, #0]
 8002962:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002966:	460c      	mov	r4, r1
 8002968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800296c:	b10a      	cbz	r2, 8002972 <_printf_common+0x26>
 800296e:	3301      	adds	r3, #1
 8002970:	6033      	str	r3, [r6, #0]
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	0699      	lsls	r1, r3, #26
 8002976:	bf42      	ittt	mi
 8002978:	6833      	ldrmi	r3, [r6, #0]
 800297a:	3302      	addmi	r3, #2
 800297c:	6033      	strmi	r3, [r6, #0]
 800297e:	6825      	ldr	r5, [r4, #0]
 8002980:	f015 0506 	ands.w	r5, r5, #6
 8002984:	d106      	bne.n	8002994 <_printf_common+0x48>
 8002986:	f104 0a19 	add.w	sl, r4, #25
 800298a:	68e3      	ldr	r3, [r4, #12]
 800298c:	6832      	ldr	r2, [r6, #0]
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	42ab      	cmp	r3, r5
 8002992:	dc28      	bgt.n	80029e6 <_printf_common+0x9a>
 8002994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002998:	1e13      	subs	r3, r2, #0
 800299a:	6822      	ldr	r2, [r4, #0]
 800299c:	bf18      	it	ne
 800299e:	2301      	movne	r3, #1
 80029a0:	0692      	lsls	r2, r2, #26
 80029a2:	d42d      	bmi.n	8002a00 <_printf_common+0xb4>
 80029a4:	4649      	mov	r1, r9
 80029a6:	4638      	mov	r0, r7
 80029a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029ac:	47c0      	blx	r8
 80029ae:	3001      	adds	r0, #1
 80029b0:	d020      	beq.n	80029f4 <_printf_common+0xa8>
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	68e5      	ldr	r5, [r4, #12]
 80029b6:	f003 0306 	and.w	r3, r3, #6
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	bf18      	it	ne
 80029be:	2500      	movne	r5, #0
 80029c0:	6832      	ldr	r2, [r6, #0]
 80029c2:	f04f 0600 	mov.w	r6, #0
 80029c6:	68a3      	ldr	r3, [r4, #8]
 80029c8:	bf08      	it	eq
 80029ca:	1aad      	subeq	r5, r5, r2
 80029cc:	6922      	ldr	r2, [r4, #16]
 80029ce:	bf08      	it	eq
 80029d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029d4:	4293      	cmp	r3, r2
 80029d6:	bfc4      	itt	gt
 80029d8:	1a9b      	subgt	r3, r3, r2
 80029da:	18ed      	addgt	r5, r5, r3
 80029dc:	341a      	adds	r4, #26
 80029de:	42b5      	cmp	r5, r6
 80029e0:	d11a      	bne.n	8002a18 <_printf_common+0xcc>
 80029e2:	2000      	movs	r0, #0
 80029e4:	e008      	b.n	80029f8 <_printf_common+0xac>
 80029e6:	2301      	movs	r3, #1
 80029e8:	4652      	mov	r2, sl
 80029ea:	4649      	mov	r1, r9
 80029ec:	4638      	mov	r0, r7
 80029ee:	47c0      	blx	r8
 80029f0:	3001      	adds	r0, #1
 80029f2:	d103      	bne.n	80029fc <_printf_common+0xb0>
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029fc:	3501      	adds	r5, #1
 80029fe:	e7c4      	b.n	800298a <_printf_common+0x3e>
 8002a00:	2030      	movs	r0, #48	; 0x30
 8002a02:	18e1      	adds	r1, r4, r3
 8002a04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a0e:	4422      	add	r2, r4
 8002a10:	3302      	adds	r3, #2
 8002a12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a16:	e7c5      	b.n	80029a4 <_printf_common+0x58>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	4649      	mov	r1, r9
 8002a1e:	4638      	mov	r0, r7
 8002a20:	47c0      	blx	r8
 8002a22:	3001      	adds	r0, #1
 8002a24:	d0e6      	beq.n	80029f4 <_printf_common+0xa8>
 8002a26:	3601      	adds	r6, #1
 8002a28:	e7d9      	b.n	80029de <_printf_common+0x92>
	...

08002a2c <_printf_i>:
 8002a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a30:	460c      	mov	r4, r1
 8002a32:	7e27      	ldrb	r7, [r4, #24]
 8002a34:	4691      	mov	r9, r2
 8002a36:	2f78      	cmp	r7, #120	; 0x78
 8002a38:	4680      	mov	r8, r0
 8002a3a:	469a      	mov	sl, r3
 8002a3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002a3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a42:	d807      	bhi.n	8002a54 <_printf_i+0x28>
 8002a44:	2f62      	cmp	r7, #98	; 0x62
 8002a46:	d80a      	bhi.n	8002a5e <_printf_i+0x32>
 8002a48:	2f00      	cmp	r7, #0
 8002a4a:	f000 80d9 	beq.w	8002c00 <_printf_i+0x1d4>
 8002a4e:	2f58      	cmp	r7, #88	; 0x58
 8002a50:	f000 80a4 	beq.w	8002b9c <_printf_i+0x170>
 8002a54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002a58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a5c:	e03a      	b.n	8002ad4 <_printf_i+0xa8>
 8002a5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a62:	2b15      	cmp	r3, #21
 8002a64:	d8f6      	bhi.n	8002a54 <_printf_i+0x28>
 8002a66:	a001      	add	r0, pc, #4	; (adr r0, 8002a6c <_printf_i+0x40>)
 8002a68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002a6c:	08002ac5 	.word	0x08002ac5
 8002a70:	08002ad9 	.word	0x08002ad9
 8002a74:	08002a55 	.word	0x08002a55
 8002a78:	08002a55 	.word	0x08002a55
 8002a7c:	08002a55 	.word	0x08002a55
 8002a80:	08002a55 	.word	0x08002a55
 8002a84:	08002ad9 	.word	0x08002ad9
 8002a88:	08002a55 	.word	0x08002a55
 8002a8c:	08002a55 	.word	0x08002a55
 8002a90:	08002a55 	.word	0x08002a55
 8002a94:	08002a55 	.word	0x08002a55
 8002a98:	08002be7 	.word	0x08002be7
 8002a9c:	08002b09 	.word	0x08002b09
 8002aa0:	08002bc9 	.word	0x08002bc9
 8002aa4:	08002a55 	.word	0x08002a55
 8002aa8:	08002a55 	.word	0x08002a55
 8002aac:	08002c09 	.word	0x08002c09
 8002ab0:	08002a55 	.word	0x08002a55
 8002ab4:	08002b09 	.word	0x08002b09
 8002ab8:	08002a55 	.word	0x08002a55
 8002abc:	08002a55 	.word	0x08002a55
 8002ac0:	08002bd1 	.word	0x08002bd1
 8002ac4:	680b      	ldr	r3, [r1, #0]
 8002ac6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002aca:	1d1a      	adds	r2, r3, #4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	600a      	str	r2, [r1, #0]
 8002ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0a4      	b.n	8002c22 <_printf_i+0x1f6>
 8002ad8:	6825      	ldr	r5, [r4, #0]
 8002ada:	6808      	ldr	r0, [r1, #0]
 8002adc:	062e      	lsls	r6, r5, #24
 8002ade:	f100 0304 	add.w	r3, r0, #4
 8002ae2:	d50a      	bpl.n	8002afa <_printf_i+0xce>
 8002ae4:	6805      	ldr	r5, [r0, #0]
 8002ae6:	600b      	str	r3, [r1, #0]
 8002ae8:	2d00      	cmp	r5, #0
 8002aea:	da03      	bge.n	8002af4 <_printf_i+0xc8>
 8002aec:	232d      	movs	r3, #45	; 0x2d
 8002aee:	426d      	negs	r5, r5
 8002af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002af4:	230a      	movs	r3, #10
 8002af6:	485e      	ldr	r0, [pc, #376]	; (8002c70 <_printf_i+0x244>)
 8002af8:	e019      	b.n	8002b2e <_printf_i+0x102>
 8002afa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002afe:	6805      	ldr	r5, [r0, #0]
 8002b00:	600b      	str	r3, [r1, #0]
 8002b02:	bf18      	it	ne
 8002b04:	b22d      	sxthne	r5, r5
 8002b06:	e7ef      	b.n	8002ae8 <_printf_i+0xbc>
 8002b08:	680b      	ldr	r3, [r1, #0]
 8002b0a:	6825      	ldr	r5, [r4, #0]
 8002b0c:	1d18      	adds	r0, r3, #4
 8002b0e:	6008      	str	r0, [r1, #0]
 8002b10:	0628      	lsls	r0, r5, #24
 8002b12:	d501      	bpl.n	8002b18 <_printf_i+0xec>
 8002b14:	681d      	ldr	r5, [r3, #0]
 8002b16:	e002      	b.n	8002b1e <_printf_i+0xf2>
 8002b18:	0669      	lsls	r1, r5, #25
 8002b1a:	d5fb      	bpl.n	8002b14 <_printf_i+0xe8>
 8002b1c:	881d      	ldrh	r5, [r3, #0]
 8002b1e:	2f6f      	cmp	r7, #111	; 0x6f
 8002b20:	bf0c      	ite	eq
 8002b22:	2308      	moveq	r3, #8
 8002b24:	230a      	movne	r3, #10
 8002b26:	4852      	ldr	r0, [pc, #328]	; (8002c70 <_printf_i+0x244>)
 8002b28:	2100      	movs	r1, #0
 8002b2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b2e:	6866      	ldr	r6, [r4, #4]
 8002b30:	2e00      	cmp	r6, #0
 8002b32:	bfa8      	it	ge
 8002b34:	6821      	ldrge	r1, [r4, #0]
 8002b36:	60a6      	str	r6, [r4, #8]
 8002b38:	bfa4      	itt	ge
 8002b3a:	f021 0104 	bicge.w	r1, r1, #4
 8002b3e:	6021      	strge	r1, [r4, #0]
 8002b40:	b90d      	cbnz	r5, 8002b46 <_printf_i+0x11a>
 8002b42:	2e00      	cmp	r6, #0
 8002b44:	d04d      	beq.n	8002be2 <_printf_i+0x1b6>
 8002b46:	4616      	mov	r6, r2
 8002b48:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b4c:	fb03 5711 	mls	r7, r3, r1, r5
 8002b50:	5dc7      	ldrb	r7, [r0, r7]
 8002b52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b56:	462f      	mov	r7, r5
 8002b58:	42bb      	cmp	r3, r7
 8002b5a:	460d      	mov	r5, r1
 8002b5c:	d9f4      	bls.n	8002b48 <_printf_i+0x11c>
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d10b      	bne.n	8002b7a <_printf_i+0x14e>
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	07df      	lsls	r7, r3, #31
 8002b66:	d508      	bpl.n	8002b7a <_printf_i+0x14e>
 8002b68:	6923      	ldr	r3, [r4, #16]
 8002b6a:	6861      	ldr	r1, [r4, #4]
 8002b6c:	4299      	cmp	r1, r3
 8002b6e:	bfde      	ittt	le
 8002b70:	2330      	movle	r3, #48	; 0x30
 8002b72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002b7a:	1b92      	subs	r2, r2, r6
 8002b7c:	6122      	str	r2, [r4, #16]
 8002b7e:	464b      	mov	r3, r9
 8002b80:	4621      	mov	r1, r4
 8002b82:	4640      	mov	r0, r8
 8002b84:	f8cd a000 	str.w	sl, [sp]
 8002b88:	aa03      	add	r2, sp, #12
 8002b8a:	f7ff fedf 	bl	800294c <_printf_common>
 8002b8e:	3001      	adds	r0, #1
 8002b90:	d14c      	bne.n	8002c2c <_printf_i+0x200>
 8002b92:	f04f 30ff 	mov.w	r0, #4294967295
 8002b96:	b004      	add	sp, #16
 8002b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b9c:	4834      	ldr	r0, [pc, #208]	; (8002c70 <_printf_i+0x244>)
 8002b9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002ba2:	680e      	ldr	r6, [r1, #0]
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	f856 5b04 	ldr.w	r5, [r6], #4
 8002baa:	061f      	lsls	r7, r3, #24
 8002bac:	600e      	str	r6, [r1, #0]
 8002bae:	d514      	bpl.n	8002bda <_printf_i+0x1ae>
 8002bb0:	07d9      	lsls	r1, r3, #31
 8002bb2:	bf44      	itt	mi
 8002bb4:	f043 0320 	orrmi.w	r3, r3, #32
 8002bb8:	6023      	strmi	r3, [r4, #0]
 8002bba:	b91d      	cbnz	r5, 8002bc4 <_printf_i+0x198>
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	f023 0320 	bic.w	r3, r3, #32
 8002bc2:	6023      	str	r3, [r4, #0]
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	e7af      	b.n	8002b28 <_printf_i+0xfc>
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	f043 0320 	orr.w	r3, r3, #32
 8002bce:	6023      	str	r3, [r4, #0]
 8002bd0:	2378      	movs	r3, #120	; 0x78
 8002bd2:	4828      	ldr	r0, [pc, #160]	; (8002c74 <_printf_i+0x248>)
 8002bd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bd8:	e7e3      	b.n	8002ba2 <_printf_i+0x176>
 8002bda:	065e      	lsls	r6, r3, #25
 8002bdc:	bf48      	it	mi
 8002bde:	b2ad      	uxthmi	r5, r5
 8002be0:	e7e6      	b.n	8002bb0 <_printf_i+0x184>
 8002be2:	4616      	mov	r6, r2
 8002be4:	e7bb      	b.n	8002b5e <_printf_i+0x132>
 8002be6:	680b      	ldr	r3, [r1, #0]
 8002be8:	6826      	ldr	r6, [r4, #0]
 8002bea:	1d1d      	adds	r5, r3, #4
 8002bec:	6960      	ldr	r0, [r4, #20]
 8002bee:	600d      	str	r5, [r1, #0]
 8002bf0:	0635      	lsls	r5, r6, #24
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	d501      	bpl.n	8002bfa <_printf_i+0x1ce>
 8002bf6:	6018      	str	r0, [r3, #0]
 8002bf8:	e002      	b.n	8002c00 <_printf_i+0x1d4>
 8002bfa:	0671      	lsls	r1, r6, #25
 8002bfc:	d5fb      	bpl.n	8002bf6 <_printf_i+0x1ca>
 8002bfe:	8018      	strh	r0, [r3, #0]
 8002c00:	2300      	movs	r3, #0
 8002c02:	4616      	mov	r6, r2
 8002c04:	6123      	str	r3, [r4, #16]
 8002c06:	e7ba      	b.n	8002b7e <_printf_i+0x152>
 8002c08:	680b      	ldr	r3, [r1, #0]
 8002c0a:	1d1a      	adds	r2, r3, #4
 8002c0c:	600a      	str	r2, [r1, #0]
 8002c0e:	681e      	ldr	r6, [r3, #0]
 8002c10:	2100      	movs	r1, #0
 8002c12:	4630      	mov	r0, r6
 8002c14:	6862      	ldr	r2, [r4, #4]
 8002c16:	f000 f82f 	bl	8002c78 <memchr>
 8002c1a:	b108      	cbz	r0, 8002c20 <_printf_i+0x1f4>
 8002c1c:	1b80      	subs	r0, r0, r6
 8002c1e:	6060      	str	r0, [r4, #4]
 8002c20:	6863      	ldr	r3, [r4, #4]
 8002c22:	6123      	str	r3, [r4, #16]
 8002c24:	2300      	movs	r3, #0
 8002c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c2a:	e7a8      	b.n	8002b7e <_printf_i+0x152>
 8002c2c:	4632      	mov	r2, r6
 8002c2e:	4649      	mov	r1, r9
 8002c30:	4640      	mov	r0, r8
 8002c32:	6923      	ldr	r3, [r4, #16]
 8002c34:	47d0      	blx	sl
 8002c36:	3001      	adds	r0, #1
 8002c38:	d0ab      	beq.n	8002b92 <_printf_i+0x166>
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	079b      	lsls	r3, r3, #30
 8002c3e:	d413      	bmi.n	8002c68 <_printf_i+0x23c>
 8002c40:	68e0      	ldr	r0, [r4, #12]
 8002c42:	9b03      	ldr	r3, [sp, #12]
 8002c44:	4298      	cmp	r0, r3
 8002c46:	bfb8      	it	lt
 8002c48:	4618      	movlt	r0, r3
 8002c4a:	e7a4      	b.n	8002b96 <_printf_i+0x16a>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	4632      	mov	r2, r6
 8002c50:	4649      	mov	r1, r9
 8002c52:	4640      	mov	r0, r8
 8002c54:	47d0      	blx	sl
 8002c56:	3001      	adds	r0, #1
 8002c58:	d09b      	beq.n	8002b92 <_printf_i+0x166>
 8002c5a:	3501      	adds	r5, #1
 8002c5c:	68e3      	ldr	r3, [r4, #12]
 8002c5e:	9903      	ldr	r1, [sp, #12]
 8002c60:	1a5b      	subs	r3, r3, r1
 8002c62:	42ab      	cmp	r3, r5
 8002c64:	dcf2      	bgt.n	8002c4c <_printf_i+0x220>
 8002c66:	e7eb      	b.n	8002c40 <_printf_i+0x214>
 8002c68:	2500      	movs	r5, #0
 8002c6a:	f104 0619 	add.w	r6, r4, #25
 8002c6e:	e7f5      	b.n	8002c5c <_printf_i+0x230>
 8002c70:	08002f2d 	.word	0x08002f2d
 8002c74:	08002f3e 	.word	0x08002f3e

08002c78 <memchr>:
 8002c78:	4603      	mov	r3, r0
 8002c7a:	b510      	push	{r4, lr}
 8002c7c:	b2c9      	uxtb	r1, r1
 8002c7e:	4402      	add	r2, r0
 8002c80:	4293      	cmp	r3, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	d101      	bne.n	8002c8a <memchr+0x12>
 8002c86:	2000      	movs	r0, #0
 8002c88:	e003      	b.n	8002c92 <memchr+0x1a>
 8002c8a:	7804      	ldrb	r4, [r0, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	428c      	cmp	r4, r1
 8002c90:	d1f6      	bne.n	8002c80 <memchr+0x8>
 8002c92:	bd10      	pop	{r4, pc}

08002c94 <memcpy>:
 8002c94:	440a      	add	r2, r1
 8002c96:	4291      	cmp	r1, r2
 8002c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c9c:	d100      	bne.n	8002ca0 <memcpy+0xc>
 8002c9e:	4770      	bx	lr
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ca6:	4291      	cmp	r1, r2
 8002ca8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cac:	d1f9      	bne.n	8002ca2 <memcpy+0xe>
 8002cae:	bd10      	pop	{r4, pc}

08002cb0 <memmove>:
 8002cb0:	4288      	cmp	r0, r1
 8002cb2:	b510      	push	{r4, lr}
 8002cb4:	eb01 0402 	add.w	r4, r1, r2
 8002cb8:	d902      	bls.n	8002cc0 <memmove+0x10>
 8002cba:	4284      	cmp	r4, r0
 8002cbc:	4623      	mov	r3, r4
 8002cbe:	d807      	bhi.n	8002cd0 <memmove+0x20>
 8002cc0:	1e43      	subs	r3, r0, #1
 8002cc2:	42a1      	cmp	r1, r4
 8002cc4:	d008      	beq.n	8002cd8 <memmove+0x28>
 8002cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002cca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002cce:	e7f8      	b.n	8002cc2 <memmove+0x12>
 8002cd0:	4601      	mov	r1, r0
 8002cd2:	4402      	add	r2, r0
 8002cd4:	428a      	cmp	r2, r1
 8002cd6:	d100      	bne.n	8002cda <memmove+0x2a>
 8002cd8:	bd10      	pop	{r4, pc}
 8002cda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ce2:	e7f7      	b.n	8002cd4 <memmove+0x24>

08002ce4 <_free_r>:
 8002ce4:	b538      	push	{r3, r4, r5, lr}
 8002ce6:	4605      	mov	r5, r0
 8002ce8:	2900      	cmp	r1, #0
 8002cea:	d043      	beq.n	8002d74 <_free_r+0x90>
 8002cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cf0:	1f0c      	subs	r4, r1, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bfb8      	it	lt
 8002cf6:	18e4      	addlt	r4, r4, r3
 8002cf8:	f000 f8d0 	bl	8002e9c <__malloc_lock>
 8002cfc:	4a1e      	ldr	r2, [pc, #120]	; (8002d78 <_free_r+0x94>)
 8002cfe:	6813      	ldr	r3, [r2, #0]
 8002d00:	4610      	mov	r0, r2
 8002d02:	b933      	cbnz	r3, 8002d12 <_free_r+0x2e>
 8002d04:	6063      	str	r3, [r4, #4]
 8002d06:	6014      	str	r4, [r2, #0]
 8002d08:	4628      	mov	r0, r5
 8002d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d0e:	f000 b8cb 	b.w	8002ea8 <__malloc_unlock>
 8002d12:	42a3      	cmp	r3, r4
 8002d14:	d90a      	bls.n	8002d2c <_free_r+0x48>
 8002d16:	6821      	ldr	r1, [r4, #0]
 8002d18:	1862      	adds	r2, r4, r1
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	bf01      	itttt	eq
 8002d1e:	681a      	ldreq	r2, [r3, #0]
 8002d20:	685b      	ldreq	r3, [r3, #4]
 8002d22:	1852      	addeq	r2, r2, r1
 8002d24:	6022      	streq	r2, [r4, #0]
 8002d26:	6063      	str	r3, [r4, #4]
 8002d28:	6004      	str	r4, [r0, #0]
 8002d2a:	e7ed      	b.n	8002d08 <_free_r+0x24>
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	b10b      	cbz	r3, 8002d36 <_free_r+0x52>
 8002d32:	42a3      	cmp	r3, r4
 8002d34:	d9fa      	bls.n	8002d2c <_free_r+0x48>
 8002d36:	6811      	ldr	r1, [r2, #0]
 8002d38:	1850      	adds	r0, r2, r1
 8002d3a:	42a0      	cmp	r0, r4
 8002d3c:	d10b      	bne.n	8002d56 <_free_r+0x72>
 8002d3e:	6820      	ldr	r0, [r4, #0]
 8002d40:	4401      	add	r1, r0
 8002d42:	1850      	adds	r0, r2, r1
 8002d44:	4283      	cmp	r3, r0
 8002d46:	6011      	str	r1, [r2, #0]
 8002d48:	d1de      	bne.n	8002d08 <_free_r+0x24>
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4401      	add	r1, r0
 8002d50:	6011      	str	r1, [r2, #0]
 8002d52:	6053      	str	r3, [r2, #4]
 8002d54:	e7d8      	b.n	8002d08 <_free_r+0x24>
 8002d56:	d902      	bls.n	8002d5e <_free_r+0x7a>
 8002d58:	230c      	movs	r3, #12
 8002d5a:	602b      	str	r3, [r5, #0]
 8002d5c:	e7d4      	b.n	8002d08 <_free_r+0x24>
 8002d5e:	6820      	ldr	r0, [r4, #0]
 8002d60:	1821      	adds	r1, r4, r0
 8002d62:	428b      	cmp	r3, r1
 8002d64:	bf01      	itttt	eq
 8002d66:	6819      	ldreq	r1, [r3, #0]
 8002d68:	685b      	ldreq	r3, [r3, #4]
 8002d6a:	1809      	addeq	r1, r1, r0
 8002d6c:	6021      	streq	r1, [r4, #0]
 8002d6e:	6063      	str	r3, [r4, #4]
 8002d70:	6054      	str	r4, [r2, #4]
 8002d72:	e7c9      	b.n	8002d08 <_free_r+0x24>
 8002d74:	bd38      	pop	{r3, r4, r5, pc}
 8002d76:	bf00      	nop
 8002d78:	20000090 	.word	0x20000090

08002d7c <_malloc_r>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	1ccd      	adds	r5, r1, #3
 8002d80:	f025 0503 	bic.w	r5, r5, #3
 8002d84:	3508      	adds	r5, #8
 8002d86:	2d0c      	cmp	r5, #12
 8002d88:	bf38      	it	cc
 8002d8a:	250c      	movcc	r5, #12
 8002d8c:	2d00      	cmp	r5, #0
 8002d8e:	4606      	mov	r6, r0
 8002d90:	db01      	blt.n	8002d96 <_malloc_r+0x1a>
 8002d92:	42a9      	cmp	r1, r5
 8002d94:	d903      	bls.n	8002d9e <_malloc_r+0x22>
 8002d96:	230c      	movs	r3, #12
 8002d98:	6033      	str	r3, [r6, #0]
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d9e:	f000 f87d 	bl	8002e9c <__malloc_lock>
 8002da2:	4921      	ldr	r1, [pc, #132]	; (8002e28 <_malloc_r+0xac>)
 8002da4:	680a      	ldr	r2, [r1, #0]
 8002da6:	4614      	mov	r4, r2
 8002da8:	b99c      	cbnz	r4, 8002dd2 <_malloc_r+0x56>
 8002daa:	4f20      	ldr	r7, [pc, #128]	; (8002e2c <_malloc_r+0xb0>)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b923      	cbnz	r3, 8002dba <_malloc_r+0x3e>
 8002db0:	4621      	mov	r1, r4
 8002db2:	4630      	mov	r0, r6
 8002db4:	f000 f862 	bl	8002e7c <_sbrk_r>
 8002db8:	6038      	str	r0, [r7, #0]
 8002dba:	4629      	mov	r1, r5
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	f000 f85d 	bl	8002e7c <_sbrk_r>
 8002dc2:	1c43      	adds	r3, r0, #1
 8002dc4:	d123      	bne.n	8002e0e <_malloc_r+0x92>
 8002dc6:	230c      	movs	r3, #12
 8002dc8:	4630      	mov	r0, r6
 8002dca:	6033      	str	r3, [r6, #0]
 8002dcc:	f000 f86c 	bl	8002ea8 <__malloc_unlock>
 8002dd0:	e7e3      	b.n	8002d9a <_malloc_r+0x1e>
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	1b5b      	subs	r3, r3, r5
 8002dd6:	d417      	bmi.n	8002e08 <_malloc_r+0x8c>
 8002dd8:	2b0b      	cmp	r3, #11
 8002dda:	d903      	bls.n	8002de4 <_malloc_r+0x68>
 8002ddc:	6023      	str	r3, [r4, #0]
 8002dde:	441c      	add	r4, r3
 8002de0:	6025      	str	r5, [r4, #0]
 8002de2:	e004      	b.n	8002dee <_malloc_r+0x72>
 8002de4:	6863      	ldr	r3, [r4, #4]
 8002de6:	42a2      	cmp	r2, r4
 8002de8:	bf0c      	ite	eq
 8002dea:	600b      	streq	r3, [r1, #0]
 8002dec:	6053      	strne	r3, [r2, #4]
 8002dee:	4630      	mov	r0, r6
 8002df0:	f000 f85a 	bl	8002ea8 <__malloc_unlock>
 8002df4:	f104 000b 	add.w	r0, r4, #11
 8002df8:	1d23      	adds	r3, r4, #4
 8002dfa:	f020 0007 	bic.w	r0, r0, #7
 8002dfe:	1ac2      	subs	r2, r0, r3
 8002e00:	d0cc      	beq.n	8002d9c <_malloc_r+0x20>
 8002e02:	1a1b      	subs	r3, r3, r0
 8002e04:	50a3      	str	r3, [r4, r2]
 8002e06:	e7c9      	b.n	8002d9c <_malloc_r+0x20>
 8002e08:	4622      	mov	r2, r4
 8002e0a:	6864      	ldr	r4, [r4, #4]
 8002e0c:	e7cc      	b.n	8002da8 <_malloc_r+0x2c>
 8002e0e:	1cc4      	adds	r4, r0, #3
 8002e10:	f024 0403 	bic.w	r4, r4, #3
 8002e14:	42a0      	cmp	r0, r4
 8002e16:	d0e3      	beq.n	8002de0 <_malloc_r+0x64>
 8002e18:	1a21      	subs	r1, r4, r0
 8002e1a:	4630      	mov	r0, r6
 8002e1c:	f000 f82e 	bl	8002e7c <_sbrk_r>
 8002e20:	3001      	adds	r0, #1
 8002e22:	d1dd      	bne.n	8002de0 <_malloc_r+0x64>
 8002e24:	e7cf      	b.n	8002dc6 <_malloc_r+0x4a>
 8002e26:	bf00      	nop
 8002e28:	20000090 	.word	0x20000090
 8002e2c:	20000094 	.word	0x20000094

08002e30 <_realloc_r>:
 8002e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e32:	4607      	mov	r7, r0
 8002e34:	4614      	mov	r4, r2
 8002e36:	460e      	mov	r6, r1
 8002e38:	b921      	cbnz	r1, 8002e44 <_realloc_r+0x14>
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e40:	f7ff bf9c 	b.w	8002d7c <_malloc_r>
 8002e44:	b922      	cbnz	r2, 8002e50 <_realloc_r+0x20>
 8002e46:	f7ff ff4d 	bl	8002ce4 <_free_r>
 8002e4a:	4625      	mov	r5, r4
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e50:	f000 f830 	bl	8002eb4 <_malloc_usable_size_r>
 8002e54:	42a0      	cmp	r0, r4
 8002e56:	d20f      	bcs.n	8002e78 <_realloc_r+0x48>
 8002e58:	4621      	mov	r1, r4
 8002e5a:	4638      	mov	r0, r7
 8002e5c:	f7ff ff8e 	bl	8002d7c <_malloc_r>
 8002e60:	4605      	mov	r5, r0
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d0f2      	beq.n	8002e4c <_realloc_r+0x1c>
 8002e66:	4631      	mov	r1, r6
 8002e68:	4622      	mov	r2, r4
 8002e6a:	f7ff ff13 	bl	8002c94 <memcpy>
 8002e6e:	4631      	mov	r1, r6
 8002e70:	4638      	mov	r0, r7
 8002e72:	f7ff ff37 	bl	8002ce4 <_free_r>
 8002e76:	e7e9      	b.n	8002e4c <_realloc_r+0x1c>
 8002e78:	4635      	mov	r5, r6
 8002e7a:	e7e7      	b.n	8002e4c <_realloc_r+0x1c>

08002e7c <_sbrk_r>:
 8002e7c:	b538      	push	{r3, r4, r5, lr}
 8002e7e:	2300      	movs	r3, #0
 8002e80:	4d05      	ldr	r5, [pc, #20]	; (8002e98 <_sbrk_r+0x1c>)
 8002e82:	4604      	mov	r4, r0
 8002e84:	4608      	mov	r0, r1
 8002e86:	602b      	str	r3, [r5, #0]
 8002e88:	f7fd fc0a 	bl	80006a0 <_sbrk>
 8002e8c:	1c43      	adds	r3, r0, #1
 8002e8e:	d102      	bne.n	8002e96 <_sbrk_r+0x1a>
 8002e90:	682b      	ldr	r3, [r5, #0]
 8002e92:	b103      	cbz	r3, 8002e96 <_sbrk_r+0x1a>
 8002e94:	6023      	str	r3, [r4, #0]
 8002e96:	bd38      	pop	{r3, r4, r5, pc}
 8002e98:	20000178 	.word	0x20000178

08002e9c <__malloc_lock>:
 8002e9c:	4801      	ldr	r0, [pc, #4]	; (8002ea4 <__malloc_lock+0x8>)
 8002e9e:	f000 b811 	b.w	8002ec4 <__retarget_lock_acquire_recursive>
 8002ea2:	bf00      	nop
 8002ea4:	20000180 	.word	0x20000180

08002ea8 <__malloc_unlock>:
 8002ea8:	4801      	ldr	r0, [pc, #4]	; (8002eb0 <__malloc_unlock+0x8>)
 8002eaa:	f000 b80c 	b.w	8002ec6 <__retarget_lock_release_recursive>
 8002eae:	bf00      	nop
 8002eb0:	20000180 	.word	0x20000180

08002eb4 <_malloc_usable_size_r>:
 8002eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eb8:	1f18      	subs	r0, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	bfbc      	itt	lt
 8002ebe:	580b      	ldrlt	r3, [r1, r0]
 8002ec0:	18c0      	addlt	r0, r0, r3
 8002ec2:	4770      	bx	lr

08002ec4 <__retarget_lock_acquire_recursive>:
 8002ec4:	4770      	bx	lr

08002ec6 <__retarget_lock_release_recursive>:
 8002ec6:	4770      	bx	lr

08002ec8 <_init>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	bf00      	nop
 8002ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ece:	bc08      	pop	{r3}
 8002ed0:	469e      	mov	lr, r3
 8002ed2:	4770      	bx	lr

08002ed4 <_fini>:
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	bf00      	nop
 8002ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eda:	bc08      	pop	{r3}
 8002edc:	469e      	mov	lr, r3
 8002ede:	4770      	bx	lr
