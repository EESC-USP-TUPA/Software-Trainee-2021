
UART_Trainee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004078  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004184  08004184  00014184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f0  080041f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080041f0  080041f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041f0  080041f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f4  080041f4  000141f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000070  08004268  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004268  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a25  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad3  00000000  00000000  00028abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0002a598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002ad88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001745d  00000000  00000000  0002b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009017  00000000  00000000  0004292d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000853cf  00000000  00000000  0004b944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0d13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023dc  00000000  00000000  000d0d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800416c 	.word	0x0800416c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800416c 	.word	0x0800416c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092c:	f000 fb68 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f846 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000934:	f000 f92a 	bl	8000b8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000938:	f000 f8fa 	bl	8000b30 <MX_DMA_Init>
  MX_ADC1_Init();
 800093c:	f000 f890 	bl	8000a60 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000940:	f000 f8cc 	bl	8000adc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &buffer_adc, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	4916      	ldr	r1, [pc, #88]	; (80009a0 <main+0x78>)
 8000948:	4816      	ldr	r0, [pc, #88]	; (80009a4 <main+0x7c>)
 800094a:	f000 fcb7 	bl	80012bc <HAL_ADC_Start_DMA>
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer, 1);
 800094e:	2201      	movs	r2, #1
 8000950:	4915      	ldr	r1, [pc, #84]	; (80009a8 <main+0x80>)
 8000952:	4816      	ldr	r0, [pc, #88]	; (80009ac <main+0x84>)
 8000954:	f002 fa56 	bl	8002e04 <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	adc = buffer_adc / 8.125;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <main+0x78>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fd37 	bl	80003d0 <__aeabi_ui2d>
 8000962:	f04f 0200 	mov.w	r2, #0
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <main+0x88>)
 8000968:	f7ff fed6 	bl	8000718 <__aeabi_ddiv>
 800096c:	4602      	mov	r2, r0
 800096e:	460b      	mov	r3, r1
 8000970:	4610      	mov	r0, r2
 8000972:	4619      	mov	r1, r3
 8000974:	f7ff ffb8 	bl	80008e8 <__aeabi_d2uiz>
 8000978:	4603      	mov	r3, r0
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <main+0x8c>)
 800097c:	6013      	str	r3, [r2, #0]
//	HAL_UART_Receive_IT(&huart1, (uint8_t*)buffer, 1);
	sprintf((char*)message, "%ld C\r\n", adc);
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <main+0x8c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	490c      	ldr	r1, [pc, #48]	; (80009b8 <main+0x90>)
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <main+0x94>)
 8000988:	f002 ffb6 	bl	80038f8 <siprintf>
	HAL_UART_Transmit_DMA(&huart1, message, 8);
 800098c:	2208      	movs	r2, #8
 800098e:	490b      	ldr	r1, [pc, #44]	; (80009bc <main+0x94>)
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <main+0x84>)
 8000992:	f002 f9cb 	bl	8002d2c <HAL_UART_Transmit_DMA>
	HAL_Delay(200);
 8000996:	20c8      	movs	r0, #200	; 0xc8
 8000998:	f000 fb94 	bl	80010c4 <HAL_Delay>
	adc = buffer_adc / 8.125;
 800099c:	e7dc      	b.n	8000958 <main+0x30>
 800099e:	bf00      	nop
 80009a0:	200001a0 	.word	0x200001a0
 80009a4:	200000e8 	.word	0x200000e8
 80009a8:	200001a4 	.word	0x200001a4
 80009ac:	2000015c 	.word	0x2000015c
 80009b0:	40204000 	.word	0x40204000
 80009b4:	200001a8 	.word	0x200001a8
 80009b8:	08004184 	.word	0x08004184
 80009bc:	20000098 	.word	0x20000098

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ca:	2228      	movs	r2, #40	; 0x28
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 ff8a 	bl	80038e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f0:	2302      	movs	r3, #2
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f4:	2301      	movs	r3, #1
 80009f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f8:	2310      	movs	r3, #16
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 fc73 	bl	80022f0 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000a10:	f000 f8fa 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 fede 	bl	80027f0 <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000a3a:	f000 f8e5 	bl	8000c08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 f86b 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a54:	f000 f8d8 	bl	8000c08 <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3750      	adds	r7, #80	; 0x50
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_ADC1_Init+0x74>)
 8000a72:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <MX_ADC1_Init+0x78>)
 8000a74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_ADC1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_ADC1_Init+0x74>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_ADC1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_ADC1_Init+0x74>)
 8000a8a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_ADC1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_ADC1_Init+0x74>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MX_ADC1_Init+0x74>)
 8000a9e:	f000 fb35 	bl	800110c <HAL_ADC_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f000 f8ae 	bl	8000c08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_ADC1_Init+0x74>)
 8000abe:	f000 fcf7 	bl	80014b0 <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ac8:	f000 f89e 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200000e8 	.word	0x200000e8
 8000ad8:	40012400 	.word	0x40012400

08000adc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MX_USART1_UART_Init+0x50>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000ae8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000aec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000b14:	f002 f8bc 	bl	8002c90 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b1e:	f000 f873 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000015c 	.word	0x2000015c
 8000b2c:	40013800 	.word	0x40013800

08000b30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_DMA_Init+0x58>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <MX_DMA_Init+0x58>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6153      	str	r3, [r2, #20]
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_DMA_Init+0x58>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	200b      	movs	r0, #11
 8000b54:	f000 ff7d 	bl	8001a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b58:	200b      	movs	r0, #11
 8000b5a:	f000 ff96 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	200e      	movs	r0, #14
 8000b64:	f000 ff75 	bl	8001a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000b68:	200e      	movs	r0, #14
 8000b6a:	f000 ff8e 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	200f      	movs	r0, #15
 8000b74:	f000 ff6d 	bl	8001a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000b78:	200f      	movs	r0, #15
 8000b7a:	f000 ff86 	bl	8001a8a <HAL_NVIC_EnableIRQ>

}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_GPIO_Init+0x40>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <MX_GPIO_Init+0x40>)
 8000b98:	f043 0320 	orr.w	r3, r3, #32
 8000b9c:	6193      	str	r3, [r2, #24]
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_GPIO_Init+0x40>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f003 0320 	and.w	r3, r3, #32
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_GPIO_Init+0x40>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <MX_GPIO_Init+0x40>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <MX_GPIO_Init+0x40>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	sprintf((char*)message, "%c C\r\n", buffer[0]);
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <HAL_UART_RxCpltCallback+0x28>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4907      	ldr	r1, [pc, #28]	; (8000bfc <HAL_UART_RxCpltCallback+0x2c>)
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <HAL_UART_RxCpltCallback+0x30>)
 8000be2:	f002 fe89 	bl	80038f8 <siprintf>
	HAL_UART_Transmit_DMA(&huart1, message, 8);
 8000be6:	2208      	movs	r2, #8
 8000be8:	4905      	ldr	r1, [pc, #20]	; (8000c00 <HAL_UART_RxCpltCallback+0x30>)
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <HAL_UART_RxCpltCallback+0x34>)
 8000bec:	f002 f89e 	bl	8002d2c <HAL_UART_Transmit_DMA>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200001a4 	.word	0x200001a4
 8000bfc:	0800418c 	.word	0x0800418c
 8000c00:	20000098 	.word	0x20000098
 8000c04:	2000015c 	.word	0x2000015c

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6193      	str	r3, [r2, #24]
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	61d3      	str	r3, [r2, #28]
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_MspInit+0x60>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_MspInit+0x60>)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010000 	.word	0x40010000

08000c78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a28      	ldr	r2, [pc, #160]	; (8000d34 <HAL_ADC_MspInit+0xbc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d149      	bne.n	8000d2c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a26      	ldr	r2, [pc, #152]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a20      	ldr	r2, [pc, #128]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4819      	ldr	r0, [pc, #100]	; (8000d3c <HAL_ADC_MspInit+0xc4>)
 8000cd8:	f001 f990 	bl	8001ffc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000cde:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_ADC_MspInit+0xcc>)
 8000ce0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cfa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000cfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000d06:	2220      	movs	r2, #32
 8000d08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d10:	480b      	ldr	r0, [pc, #44]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000d12:	f000 fed5 	bl	8001ac0 <HAL_DMA_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000d1c:	f7ff ff74 	bl	8000c08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000d24:	621a      	str	r2, [r3, #32]
 8000d26:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40012400 	.word	0x40012400
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010800 	.word	0x40010800
 8000d40:	200001ac 	.word	0x200001ac
 8000d44:	40020008 	.word	0x40020008

08000d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a47      	ldr	r2, [pc, #284]	; (8000e80 <HAL_UART_MspInit+0x138>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	f040 8086 	bne.w	8000e76 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d6a:	4b46      	ldr	r3, [pc, #280]	; (8000e84 <HAL_UART_MspInit+0x13c>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4a45      	ldr	r2, [pc, #276]	; (8000e84 <HAL_UART_MspInit+0x13c>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6193      	str	r3, [r2, #24]
 8000d76:	4b43      	ldr	r3, [pc, #268]	; (8000e84 <HAL_UART_MspInit+0x13c>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b40      	ldr	r3, [pc, #256]	; (8000e84 <HAL_UART_MspInit+0x13c>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	4a3f      	ldr	r2, [pc, #252]	; (8000e84 <HAL_UART_MspInit+0x13c>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6193      	str	r3, [r2, #24]
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <HAL_UART_MspInit+0x13c>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4619      	mov	r1, r3
 8000dae:	4836      	ldr	r0, [pc, #216]	; (8000e88 <HAL_UART_MspInit+0x140>)
 8000db0:	f001 f924 	bl	8001ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	482f      	ldr	r0, [pc, #188]	; (8000e88 <HAL_UART_MspInit+0x140>)
 8000dca:	f001 f917 	bl	8001ffc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000dce:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <HAL_UART_MspInit+0x144>)
 8000dd0:	4a2f      	ldr	r2, [pc, #188]	; (8000e90 <HAL_UART_MspInit+0x148>)
 8000dd2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <HAL_UART_MspInit+0x144>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dda:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <HAL_UART_MspInit+0x144>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000de0:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <HAL_UART_MspInit+0x144>)
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de6:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <HAL_UART_MspInit+0x144>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <HAL_UART_MspInit+0x144>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <HAL_UART_MspInit+0x144>)
 8000df4:	2220      	movs	r2, #32
 8000df6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <HAL_UART_MspInit+0x144>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000dfe:	4823      	ldr	r0, [pc, #140]	; (8000e8c <HAL_UART_MspInit+0x144>)
 8000e00:	f000 fe5e 	bl	8001ac0 <HAL_DMA_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000e0a:	f7ff fefd 	bl	8000c08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <HAL_UART_MspInit+0x144>)
 8000e12:	639a      	str	r2, [r3, #56]	; 0x38
 8000e14:	4a1d      	ldr	r2, [pc, #116]	; (8000e8c <HAL_UART_MspInit+0x144>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <HAL_UART_MspInit+0x14c>)
 8000e1c:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <HAL_UART_MspInit+0x150>)
 8000e1e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_UART_MspInit+0x14c>)
 8000e22:	2210      	movs	r2, #16
 8000e24:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_UART_MspInit+0x14c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_UART_MspInit+0x14c>)
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_UART_MspInit+0x14c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_UART_MspInit+0x14c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_UART_MspInit+0x14c>)
 8000e40:	2220      	movs	r2, #32
 8000e42:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_UART_MspInit+0x14c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000e4a:	4812      	ldr	r0, [pc, #72]	; (8000e94 <HAL_UART_MspInit+0x14c>)
 8000e4c:	f000 fe38 	bl	8001ac0 <HAL_DMA_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000e56:	f7ff fed7 	bl	8000c08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <HAL_UART_MspInit+0x14c>)
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e60:	4a0c      	ldr	r2, [pc, #48]	; (8000e94 <HAL_UART_MspInit+0x14c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2025      	movs	r0, #37	; 0x25
 8000e6c:	f000 fdf1 	bl	8001a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e70:	2025      	movs	r0, #37	; 0x25
 8000e72:	f000 fe0a 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40013800 	.word	0x40013800
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010800 	.word	0x40010800
 8000e8c:	20000118 	.word	0x20000118
 8000e90:	40020058 	.word	0x40020058
 8000e94:	200000a4 	.word	0x200000a4
 8000e98:	40020044 	.word	0x40020044

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr

08000ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee2:	f000 f8d3 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <DMA1_Channel1_IRQHandler+0x10>)
 8000ef2:	f000 ff4f 	bl	8001d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200001ac 	.word	0x200001ac

08000f00 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <DMA1_Channel4_IRQHandler+0x10>)
 8000f06:	f000 ff45 	bl	8001d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000a4 	.word	0x200000a4

08000f14 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <DMA1_Channel5_IRQHandler+0x10>)
 8000f1a:	f000 ff3b 	bl	8001d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000118 	.word	0x20000118

08000f28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <USART1_IRQHandler+0x10>)
 8000f2e:	f001 ff99 	bl	8002e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000015c 	.word	0x2000015c

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f002 fc92 	bl	8003894 <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20002800 	.word	0x20002800
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	2000008c 	.word	0x2000008c
 8000fa4:	20000208 	.word	0x20000208

08000fa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fb6:	490d      	ldr	r1, [pc, #52]	; (8000fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	; (8000ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fda:	f7ff ffe5 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f002 fc5f 	bl	80038a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe2:	f7ff fca1 	bl	8000928 <main>
  bx lr
 8000fe6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ff0:	080041f8 	.word	0x080041f8
  ldr r2, =_sbss
 8000ff4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ff8:	20000204 	.word	0x20000204

08000ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_2_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_Init+0x28>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_Init+0x28>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 fd13 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fdfa 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40022000 	.word	0x40022000

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fd2b 	bl	8001aa6 <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 fcf3 	bl	8001a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000000 	.word	0x20000000
 8001084:	20000008 	.word	0x20000008
 8001088:	20000004 	.word	0x20000004

0800108c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_IncTick+0x20>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a03      	ldr	r2, [pc, #12]	; (80010ac <HAL_IncTick+0x20>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	20000008 	.word	0x20000008
 80010ac:	200001f0 	.word	0x200001f0

080010b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <HAL_GetTick+0x10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	200001f0 	.word	0x200001f0

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff fff0 	bl	80010b0 <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffe0 	bl	80010b0 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008

0800110c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e0be      	b.n	80012ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	2b00      	cmp	r3, #0
 800113a:	d109      	bne.n	8001150 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff fd94 	bl	8000c78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 faff 	bl	8001754 <ADC_ConversionStop_Disable>
 8001156:	4603      	mov	r3, r0
 8001158:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	2b00      	cmp	r3, #0
 8001164:	f040 8099 	bne.w	800129a <HAL_ADC_Init+0x18e>
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	2b00      	cmp	r3, #0
 800116c:	f040 8095 	bne.w	800129a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001174:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001178:	f023 0302 	bic.w	r3, r3, #2
 800117c:	f043 0202 	orr.w	r2, r3, #2
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800118c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7b1b      	ldrb	r3, [r3, #12]
 8001192:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001194:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	4313      	orrs	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011a4:	d003      	beq.n	80011ae <HAL_ADC_Init+0xa2>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d102      	bne.n	80011b4 <HAL_ADC_Init+0xa8>
 80011ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b2:	e000      	b.n	80011b6 <HAL_ADC_Init+0xaa>
 80011b4:	2300      	movs	r3, #0
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7d1b      	ldrb	r3, [r3, #20]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d119      	bne.n	80011f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7b1b      	ldrb	r3, [r3, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d109      	bne.n	80011e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	035a      	lsls	r2, r3, #13
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	e00b      	b.n	80011f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	f043 0220 	orr.w	r2, r3, #32
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	f043 0201 	orr.w	r2, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	430a      	orrs	r2, r1
 800120a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <HAL_ADC_Init+0x1a8>)
 8001214:	4013      	ands	r3, r2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	430b      	orrs	r3, r1
 800121e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001228:	d003      	beq.n	8001232 <HAL_ADC_Init+0x126>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d104      	bne.n	800123c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	3b01      	subs	r3, #1
 8001238:	051b      	lsls	r3, r3, #20
 800123a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	430a      	orrs	r2, r1
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_ADC_Init+0x1ac>)
 8001258:	4013      	ands	r3, r2
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	429a      	cmp	r2, r3
 800125e:	d10b      	bne.n	8001278 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	f023 0303 	bic.w	r3, r3, #3
 800126e:	f043 0201 	orr.w	r2, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001276:	e018      	b.n	80012aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	f023 0312 	bic.w	r3, r3, #18
 8001280:	f043 0210 	orr.w	r2, r3, #16
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001298:	e007      	b.n	80012aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	f043 0210 	orr.w	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	ffe1f7fd 	.word	0xffe1f7fd
 80012b8:	ff1f0efe 	.word	0xff1f0efe

080012bc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a64      	ldr	r2, [pc, #400]	; (8001464 <HAL_ADC_Start_DMA+0x1a8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d004      	beq.n	80012e0 <HAL_ADC_Start_DMA+0x24>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a63      	ldr	r2, [pc, #396]	; (8001468 <HAL_ADC_Start_DMA+0x1ac>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d106      	bne.n	80012ee <HAL_ADC_Start_DMA+0x32>
 80012e0:	4b60      	ldr	r3, [pc, #384]	; (8001464 <HAL_ADC_Start_DMA+0x1a8>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f040 80b3 	bne.w	8001454 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <HAL_ADC_Start_DMA+0x40>
 80012f8:	2302      	movs	r3, #2
 80012fa:	e0ae      	b.n	800145a <HAL_ADC_Start_DMA+0x19e>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 f9cb 	bl	80016a0 <ADC_Enable>
 800130a:	4603      	mov	r3, r0
 800130c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	2b00      	cmp	r3, #0
 8001312:	f040 809a 	bne.w	800144a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a4e      	ldr	r2, [pc, #312]	; (8001468 <HAL_ADC_Start_DMA+0x1ac>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d105      	bne.n	8001340 <HAL_ADC_Start_DMA+0x84>
 8001334:	4b4b      	ldr	r3, [pc, #300]	; (8001464 <HAL_ADC_Start_DMA+0x1a8>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d115      	bne.n	800136c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001344:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001356:	2b00      	cmp	r3, #0
 8001358:	d026      	beq.n	80013a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001362:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800136a:	e01d      	b.n	80013a8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a39      	ldr	r2, [pc, #228]	; (8001464 <HAL_ADC_Start_DMA+0x1a8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d004      	beq.n	800138c <HAL_ADC_Start_DMA+0xd0>
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a38      	ldr	r2, [pc, #224]	; (8001468 <HAL_ADC_Start_DMA+0x1ac>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d10d      	bne.n	80013a8 <HAL_ADC_Start_DMA+0xec>
 800138c:	4b35      	ldr	r3, [pc, #212]	; (8001464 <HAL_ADC_Start_DMA+0x1a8>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	2b00      	cmp	r3, #0
 8001396:	d007      	beq.n	80013a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	f023 0206 	bic.w	r2, r3, #6
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
 80013c0:	e002      	b.n	80013c8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4a25      	ldr	r2, [pc, #148]	; (800146c <HAL_ADC_Start_DMA+0x1b0>)
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4a24      	ldr	r2, [pc, #144]	; (8001470 <HAL_ADC_Start_DMA+0x1b4>)
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4a23      	ldr	r2, [pc, #140]	; (8001474 <HAL_ADC_Start_DMA+0x1b8>)
 80013e6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f06f 0202 	mvn.w	r2, #2
 80013f0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001400:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6a18      	ldr	r0, [r3, #32]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	334c      	adds	r3, #76	; 0x4c
 800140c:	4619      	mov	r1, r3
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f000 fbaf 	bl	8001b74 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001420:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001424:	d108      	bne.n	8001438 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001434:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001436:	e00f      	b.n	8001458 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001446:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001448:	e006      	b.n	8001458 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001452:	e001      	b.n	8001458 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001458:	7dfb      	ldrb	r3, [r7, #23]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40012400 	.word	0x40012400
 8001468:	40012800 	.word	0x40012800
 800146c:	080017d7 	.word	0x080017d7
 8001470:	08001853 	.word	0x08001853
 8001474:	0800186f 	.word	0x0800186f

08001478 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x20>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e0dc      	b.n	800168a <HAL_ADC_ConfigChannel+0x1da>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b06      	cmp	r3, #6
 80014de:	d81c      	bhi.n	800151a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	3b05      	subs	r3, #5
 80014f2:	221f      	movs	r2, #31
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	4019      	ands	r1, r3
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b05      	subs	r3, #5
 800150c:	fa00 f203 	lsl.w	r2, r0, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	635a      	str	r2, [r3, #52]	; 0x34
 8001518:	e03c      	b.n	8001594 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b0c      	cmp	r3, #12
 8001520:	d81c      	bhi.n	800155c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	3b23      	subs	r3, #35	; 0x23
 8001534:	221f      	movs	r2, #31
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	4019      	ands	r1, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b23      	subs	r3, #35	; 0x23
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
 800155a:	e01b      	b.n	8001594 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	3b41      	subs	r3, #65	; 0x41
 800156e:	221f      	movs	r2, #31
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	4019      	ands	r1, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	3b41      	subs	r3, #65	; 0x41
 8001588:	fa00 f203 	lsl.w	r2, r0, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d91c      	bls.n	80015d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68d9      	ldr	r1, [r3, #12]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4613      	mov	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	3b1e      	subs	r3, #30
 80015ae:	2207      	movs	r2, #7
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	4019      	ands	r1, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	6898      	ldr	r0, [r3, #8]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	3b1e      	subs	r3, #30
 80015c8:	fa00 f203 	lsl.w	r2, r0, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	e019      	b.n	800160a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6919      	ldr	r1, [r3, #16]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	2207      	movs	r2, #7
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4019      	ands	r1, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	6898      	ldr	r0, [r3, #8]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b10      	cmp	r3, #16
 8001610:	d003      	beq.n	800161a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001616:	2b11      	cmp	r3, #17
 8001618:	d132      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <HAL_ADC_ConfigChannel+0x1e4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d125      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d126      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001640:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b10      	cmp	r3, #16
 8001648:	d11a      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_ADC_ConfigChannel+0x1e8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a13      	ldr	r2, [pc, #76]	; (800169c <HAL_ADC_ConfigChannel+0x1ec>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	0c9a      	lsrs	r2, r3, #18
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001660:	e002      	b.n	8001668 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	3b01      	subs	r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f9      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x1b2>
 800166e:	e007      	b.n	8001680 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	f043 0220 	orr.w	r2, r3, #32
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001688:	7bfb      	ldrb	r3, [r7, #15]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	40012400 	.word	0x40012400
 8001698:	20000000 	.word	0x20000000
 800169c:	431bde83 	.word	0x431bde83

080016a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d040      	beq.n	8001740 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <ADC_Enable+0xac>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <ADC_Enable+0xb0>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	0c9b      	lsrs	r3, r3, #18
 80016da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016dc:	e002      	b.n	80016e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f9      	bne.n	80016de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016ea:	f7ff fce1 	bl	80010b0 <HAL_GetTick>
 80016ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016f0:	e01f      	b.n	8001732 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016f2:	f7ff fcdd 	bl	80010b0 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d918      	bls.n	8001732 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b01      	cmp	r3, #1
 800170c:	d011      	beq.n	8001732 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	f043 0210 	orr.w	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	f043 0201 	orr.w	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e007      	b.n	8001742 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b01      	cmp	r3, #1
 800173e:	d1d8      	bne.n	80016f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000000 	.word	0x20000000
 8001750:	431bde83 	.word	0x431bde83

08001754 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b01      	cmp	r3, #1
 800176c:	d12e      	bne.n	80017cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800177e:	f7ff fc97 	bl	80010b0 <HAL_GetTick>
 8001782:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001784:	e01b      	b.n	80017be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001786:	f7ff fc93 	bl	80010b0 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d914      	bls.n	80017be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d10d      	bne.n	80017be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	f043 0210 	orr.w	r2, r3, #16
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e007      	b.n	80017ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d0dc      	beq.n	8001786 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d127      	bne.n	8001840 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001806:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800180a:	d115      	bne.n	8001838 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001810:	2b00      	cmp	r3, #0
 8001812:	d111      	bne.n	8001838 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f7ff fe1d 	bl	8001478 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800183e:	e004      	b.n	800184a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4798      	blx	r3
}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7ff fe12 	bl	800148a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b084      	sub	sp, #16
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	f043 0204 	orr.w	r2, r3, #4
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f7ff fe01 	bl	800149c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	2b00      	cmp	r3, #0
 8001918:	db0b      	blt.n	8001932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	f003 021f 	and.w	r2, r3, #31
 8001920:	4906      	ldr	r1, [pc, #24]	; (800193c <__NVIC_EnableIRQ+0x34>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	2001      	movs	r0, #1
 800192a:	fa00 f202 	lsl.w	r2, r0, r2
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100

08001940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	; (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	; (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
         );
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a08:	d301      	bcc.n	8001a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00f      	b.n	8001a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <SysTick_Config+0x40>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a16:	210f      	movs	r1, #15
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f7ff ff90 	bl	8001940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <SysTick_Config+0x40>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <SysTick_Config+0x40>)
 8001a28:	2207      	movs	r2, #7
 8001a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	e000e010 	.word	0xe000e010

08001a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff2d 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a64:	f7ff ff42 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7ff ff90 	bl	8001994 <NVIC_EncodePriority>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5f 	bl	8001940 <__NVIC_SetPriority>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff35 	bl	8001908 <__NVIC_EnableIRQ>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffa2 	bl	80019f8 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e043      	b.n	8001b5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <HAL_DMA_Init+0xa8>)
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <HAL_DMA_Init+0xac>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	009a      	lsls	r2, r3, #2
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <HAL_DMA_Init+0xb0>)
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	bffdfff8 	.word	0xbffdfff8
 8001b6c:	cccccccd 	.word	0xcccccccd
 8001b70:	40020000 	.word	0x40020000

08001b74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_DMA_Start_IT+0x20>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e04a      	b.n	8001c2a <HAL_DMA_Start_IT+0xb6>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d13a      	bne.n	8001c1c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f9e8 	bl	8001fa0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 020e 	orr.w	r2, r2, #14
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	e00f      	b.n	8001c0a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0204 	bic.w	r2, r2, #4
 8001bf8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 020a 	orr.w	r2, r2, #10
 8001c08:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e005      	b.n	8001c28 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c24:	2302      	movs	r3, #2
 8001c26:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b085      	sub	sp, #20
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d008      	beq.n	8001c5a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e020      	b.n	8001c9c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 020e 	bic.w	r2, r2, #14
 8001c68:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c82:	2101      	movs	r1, #1
 8001c84:	fa01 f202 	lsl.w	r2, r1, r2
 8001c88:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d005      	beq.n	8001cca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e051      	b.n	8001d6e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 020e 	bic.w	r2, r2, #14
 8001cd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a22      	ldr	r2, [pc, #136]	; (8001d78 <HAL_DMA_Abort_IT+0xd0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d029      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xa0>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a20      	ldr	r2, [pc, #128]	; (8001d7c <HAL_DMA_Abort_IT+0xd4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d022      	beq.n	8001d44 <HAL_DMA_Abort_IT+0x9c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1f      	ldr	r2, [pc, #124]	; (8001d80 <HAL_DMA_Abort_IT+0xd8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d01a      	beq.n	8001d3e <HAL_DMA_Abort_IT+0x96>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <HAL_DMA_Abort_IT+0xdc>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d012      	beq.n	8001d38 <HAL_DMA_Abort_IT+0x90>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_DMA_Abort_IT+0xe0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00a      	beq.n	8001d32 <HAL_DMA_Abort_IT+0x8a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <HAL_DMA_Abort_IT+0xe4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d102      	bne.n	8001d2c <HAL_DMA_Abort_IT+0x84>
 8001d26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d2a:	e00e      	b.n	8001d4a <HAL_DMA_Abort_IT+0xa2>
 8001d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d30:	e00b      	b.n	8001d4a <HAL_DMA_Abort_IT+0xa2>
 8001d32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d36:	e008      	b.n	8001d4a <HAL_DMA_Abort_IT+0xa2>
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	e005      	b.n	8001d4a <HAL_DMA_Abort_IT+0xa2>
 8001d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d42:	e002      	b.n	8001d4a <HAL_DMA_Abort_IT+0xa2>
 8001d44:	2310      	movs	r3, #16
 8001d46:	e000      	b.n	8001d4a <HAL_DMA_Abort_IT+0xa2>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	4a11      	ldr	r2, [pc, #68]	; (8001d90 <HAL_DMA_Abort_IT+0xe8>)
 8001d4c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
    } 
  }
  return status;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40020008 	.word	0x40020008
 8001d7c:	4002001c 	.word	0x4002001c
 8001d80:	40020030 	.word	0x40020030
 8001d84:	40020044 	.word	0x40020044
 8001d88:	40020058 	.word	0x40020058
 8001d8c:	4002006c 	.word	0x4002006c
 8001d90:	40020000 	.word	0x40020000

08001d94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	2204      	movs	r2, #4
 8001db2:	409a      	lsls	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d04f      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xc8>
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d04a      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d107      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0204 	bic.w	r2, r2, #4
 8001de2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a66      	ldr	r2, [pc, #408]	; (8001f84 <HAL_DMA_IRQHandler+0x1f0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d029      	beq.n	8001e42 <HAL_DMA_IRQHandler+0xae>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a65      	ldr	r2, [pc, #404]	; (8001f88 <HAL_DMA_IRQHandler+0x1f4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d022      	beq.n	8001e3e <HAL_DMA_IRQHandler+0xaa>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a63      	ldr	r2, [pc, #396]	; (8001f8c <HAL_DMA_IRQHandler+0x1f8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0xa4>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a62      	ldr	r2, [pc, #392]	; (8001f90 <HAL_DMA_IRQHandler+0x1fc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d012      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x9e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a60      	ldr	r2, [pc, #384]	; (8001f94 <HAL_DMA_IRQHandler+0x200>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00a      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x98>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a5f      	ldr	r2, [pc, #380]	; (8001f98 <HAL_DMA_IRQHandler+0x204>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d102      	bne.n	8001e26 <HAL_DMA_IRQHandler+0x92>
 8001e20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e24:	e00e      	b.n	8001e44 <HAL_DMA_IRQHandler+0xb0>
 8001e26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e2a:	e00b      	b.n	8001e44 <HAL_DMA_IRQHandler+0xb0>
 8001e2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e30:	e008      	b.n	8001e44 <HAL_DMA_IRQHandler+0xb0>
 8001e32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e36:	e005      	b.n	8001e44 <HAL_DMA_IRQHandler+0xb0>
 8001e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3c:	e002      	b.n	8001e44 <HAL_DMA_IRQHandler+0xb0>
 8001e3e:	2340      	movs	r3, #64	; 0x40
 8001e40:	e000      	b.n	8001e44 <HAL_DMA_IRQHandler+0xb0>
 8001e42:	2304      	movs	r3, #4
 8001e44:	4a55      	ldr	r2, [pc, #340]	; (8001f9c <HAL_DMA_IRQHandler+0x208>)
 8001e46:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 8094 	beq.w	8001f7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e5a:	e08e      	b.n	8001f7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	2202      	movs	r2, #2
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d056      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x186>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d051      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10b      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 020a 	bic.w	r2, r2, #10
 8001e92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a38      	ldr	r2, [pc, #224]	; (8001f84 <HAL_DMA_IRQHandler+0x1f0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d029      	beq.n	8001efa <HAL_DMA_IRQHandler+0x166>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a37      	ldr	r2, [pc, #220]	; (8001f88 <HAL_DMA_IRQHandler+0x1f4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d022      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x162>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a35      	ldr	r2, [pc, #212]	; (8001f8c <HAL_DMA_IRQHandler+0x1f8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01a      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x15c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a34      	ldr	r2, [pc, #208]	; (8001f90 <HAL_DMA_IRQHandler+0x1fc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d012      	beq.n	8001eea <HAL_DMA_IRQHandler+0x156>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a32      	ldr	r2, [pc, #200]	; (8001f94 <HAL_DMA_IRQHandler+0x200>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00a      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x150>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a31      	ldr	r2, [pc, #196]	; (8001f98 <HAL_DMA_IRQHandler+0x204>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d102      	bne.n	8001ede <HAL_DMA_IRQHandler+0x14a>
 8001ed8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001edc:	e00e      	b.n	8001efc <HAL_DMA_IRQHandler+0x168>
 8001ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ee2:	e00b      	b.n	8001efc <HAL_DMA_IRQHandler+0x168>
 8001ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee8:	e008      	b.n	8001efc <HAL_DMA_IRQHandler+0x168>
 8001eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eee:	e005      	b.n	8001efc <HAL_DMA_IRQHandler+0x168>
 8001ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef4:	e002      	b.n	8001efc <HAL_DMA_IRQHandler+0x168>
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	e000      	b.n	8001efc <HAL_DMA_IRQHandler+0x168>
 8001efa:	2302      	movs	r3, #2
 8001efc:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <HAL_DMA_IRQHandler+0x208>)
 8001efe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d034      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f18:	e02f      	b.n	8001f7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	2208      	movs	r2, #8
 8001f20:	409a      	lsls	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d028      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x1e8>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d023      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 020e 	bic.w	r2, r2, #14
 8001f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	4798      	blx	r3
    }
  }
  return;
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
}
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40020008 	.word	0x40020008
 8001f88:	4002001c 	.word	0x4002001c
 8001f8c:	40020030 	.word	0x40020030
 8001f90:	40020044 	.word	0x40020044
 8001f94:	40020058 	.word	0x40020058
 8001f98:	4002006c 	.word	0x4002006c
 8001f9c:	40020000 	.word	0x40020000

08001fa0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d108      	bne.n	8001fe0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fde:	e007      	b.n	8001ff0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	60da      	str	r2, [r3, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b08b      	sub	sp, #44	; 0x2c
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200e:	e148      	b.n	80022a2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002010:	2201      	movs	r2, #1
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	429a      	cmp	r2, r3
 800202a:	f040 8137 	bne.w	800229c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4aa3      	ldr	r2, [pc, #652]	; (80022c0 <HAL_GPIO_Init+0x2c4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d05e      	beq.n	80020f6 <HAL_GPIO_Init+0xfa>
 8002038:	4aa1      	ldr	r2, [pc, #644]	; (80022c0 <HAL_GPIO_Init+0x2c4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d875      	bhi.n	800212a <HAL_GPIO_Init+0x12e>
 800203e:	4aa1      	ldr	r2, [pc, #644]	; (80022c4 <HAL_GPIO_Init+0x2c8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d058      	beq.n	80020f6 <HAL_GPIO_Init+0xfa>
 8002044:	4a9f      	ldr	r2, [pc, #636]	; (80022c4 <HAL_GPIO_Init+0x2c8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d86f      	bhi.n	800212a <HAL_GPIO_Init+0x12e>
 800204a:	4a9f      	ldr	r2, [pc, #636]	; (80022c8 <HAL_GPIO_Init+0x2cc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d052      	beq.n	80020f6 <HAL_GPIO_Init+0xfa>
 8002050:	4a9d      	ldr	r2, [pc, #628]	; (80022c8 <HAL_GPIO_Init+0x2cc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d869      	bhi.n	800212a <HAL_GPIO_Init+0x12e>
 8002056:	4a9d      	ldr	r2, [pc, #628]	; (80022cc <HAL_GPIO_Init+0x2d0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d04c      	beq.n	80020f6 <HAL_GPIO_Init+0xfa>
 800205c:	4a9b      	ldr	r2, [pc, #620]	; (80022cc <HAL_GPIO_Init+0x2d0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d863      	bhi.n	800212a <HAL_GPIO_Init+0x12e>
 8002062:	4a9b      	ldr	r2, [pc, #620]	; (80022d0 <HAL_GPIO_Init+0x2d4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d046      	beq.n	80020f6 <HAL_GPIO_Init+0xfa>
 8002068:	4a99      	ldr	r2, [pc, #612]	; (80022d0 <HAL_GPIO_Init+0x2d4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d85d      	bhi.n	800212a <HAL_GPIO_Init+0x12e>
 800206e:	2b12      	cmp	r3, #18
 8002070:	d82a      	bhi.n	80020c8 <HAL_GPIO_Init+0xcc>
 8002072:	2b12      	cmp	r3, #18
 8002074:	d859      	bhi.n	800212a <HAL_GPIO_Init+0x12e>
 8002076:	a201      	add	r2, pc, #4	; (adr r2, 800207c <HAL_GPIO_Init+0x80>)
 8002078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207c:	080020f7 	.word	0x080020f7
 8002080:	080020d1 	.word	0x080020d1
 8002084:	080020e3 	.word	0x080020e3
 8002088:	08002125 	.word	0x08002125
 800208c:	0800212b 	.word	0x0800212b
 8002090:	0800212b 	.word	0x0800212b
 8002094:	0800212b 	.word	0x0800212b
 8002098:	0800212b 	.word	0x0800212b
 800209c:	0800212b 	.word	0x0800212b
 80020a0:	0800212b 	.word	0x0800212b
 80020a4:	0800212b 	.word	0x0800212b
 80020a8:	0800212b 	.word	0x0800212b
 80020ac:	0800212b 	.word	0x0800212b
 80020b0:	0800212b 	.word	0x0800212b
 80020b4:	0800212b 	.word	0x0800212b
 80020b8:	0800212b 	.word	0x0800212b
 80020bc:	0800212b 	.word	0x0800212b
 80020c0:	080020d9 	.word	0x080020d9
 80020c4:	080020ed 	.word	0x080020ed
 80020c8:	4a82      	ldr	r2, [pc, #520]	; (80022d4 <HAL_GPIO_Init+0x2d8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ce:	e02c      	b.n	800212a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	623b      	str	r3, [r7, #32]
          break;
 80020d6:	e029      	b.n	800212c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	3304      	adds	r3, #4
 80020de:	623b      	str	r3, [r7, #32]
          break;
 80020e0:	e024      	b.n	800212c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	3308      	adds	r3, #8
 80020e8:	623b      	str	r3, [r7, #32]
          break;
 80020ea:	e01f      	b.n	800212c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	330c      	adds	r3, #12
 80020f2:	623b      	str	r3, [r7, #32]
          break;
 80020f4:	e01a      	b.n	800212c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d102      	bne.n	8002104 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020fe:	2304      	movs	r3, #4
 8002100:	623b      	str	r3, [r7, #32]
          break;
 8002102:	e013      	b.n	800212c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800210c:	2308      	movs	r3, #8
 800210e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	611a      	str	r2, [r3, #16]
          break;
 8002116:	e009      	b.n	800212c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002118:	2308      	movs	r3, #8
 800211a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	615a      	str	r2, [r3, #20]
          break;
 8002122:	e003      	b.n	800212c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
          break;
 8002128:	e000      	b.n	800212c <HAL_GPIO_Init+0x130>
          break;
 800212a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2bff      	cmp	r3, #255	; 0xff
 8002130:	d801      	bhi.n	8002136 <HAL_GPIO_Init+0x13a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	e001      	b.n	800213a <HAL_GPIO_Init+0x13e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3304      	adds	r3, #4
 800213a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2bff      	cmp	r3, #255	; 0xff
 8002140:	d802      	bhi.n	8002148 <HAL_GPIO_Init+0x14c>
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	e002      	b.n	800214e <HAL_GPIO_Init+0x152>
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	3b08      	subs	r3, #8
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	210f      	movs	r1, #15
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	401a      	ands	r2, r3
 8002160:	6a39      	ldr	r1, [r7, #32]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	431a      	orrs	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8090 	beq.w	800229c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800217c:	4b56      	ldr	r3, [pc, #344]	; (80022d8 <HAL_GPIO_Init+0x2dc>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4a55      	ldr	r2, [pc, #340]	; (80022d8 <HAL_GPIO_Init+0x2dc>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6193      	str	r3, [r2, #24]
 8002188:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <HAL_GPIO_Init+0x2dc>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002194:	4a51      	ldr	r2, [pc, #324]	; (80022dc <HAL_GPIO_Init+0x2e0>)
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	3302      	adds	r3, #2
 800219c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	220f      	movs	r2, #15
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4013      	ands	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a49      	ldr	r2, [pc, #292]	; (80022e0 <HAL_GPIO_Init+0x2e4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00d      	beq.n	80021dc <HAL_GPIO_Init+0x1e0>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a48      	ldr	r2, [pc, #288]	; (80022e4 <HAL_GPIO_Init+0x2e8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d007      	beq.n	80021d8 <HAL_GPIO_Init+0x1dc>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a47      	ldr	r2, [pc, #284]	; (80022e8 <HAL_GPIO_Init+0x2ec>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d101      	bne.n	80021d4 <HAL_GPIO_Init+0x1d8>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e004      	b.n	80021de <HAL_GPIO_Init+0x1e2>
 80021d4:	2303      	movs	r3, #3
 80021d6:	e002      	b.n	80021de <HAL_GPIO_Init+0x1e2>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_GPIO_Init+0x1e2>
 80021dc:	2300      	movs	r3, #0
 80021de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e0:	f002 0203 	and.w	r2, r2, #3
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	4093      	lsls	r3, r2
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ee:	493b      	ldr	r1, [pc, #236]	; (80022dc <HAL_GPIO_Init+0x2e0>)
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002208:	4b38      	ldr	r3, [pc, #224]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4937      	ldr	r1, [pc, #220]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002216:	4b35      	ldr	r3, [pc, #212]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	43db      	mvns	r3, r3
 800221e:	4933      	ldr	r1, [pc, #204]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 8002220:	4013      	ands	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002230:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	492d      	ldr	r1, [pc, #180]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800223e:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	43db      	mvns	r3, r3
 8002246:	4929      	ldr	r1, [pc, #164]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 8002248:	4013      	ands	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002258:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	4923      	ldr	r1, [pc, #140]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	43db      	mvns	r3, r3
 800226e:	491f      	ldr	r1, [pc, #124]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 8002270:	4013      	ands	r3, r2
 8002272:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002280:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	4919      	ldr	r1, [pc, #100]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	60cb      	str	r3, [r1, #12]
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800228e:	4b17      	ldr	r3, [pc, #92]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	43db      	mvns	r3, r3
 8002296:	4915      	ldr	r1, [pc, #84]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 8002298:	4013      	ands	r3, r2
 800229a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	3301      	adds	r3, #1
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f47f aeaf 	bne.w	8002010 <HAL_GPIO_Init+0x14>
  }
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	372c      	adds	r7, #44	; 0x2c
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	10320000 	.word	0x10320000
 80022c4:	10310000 	.word	0x10310000
 80022c8:	10220000 	.word	0x10220000
 80022cc:	10210000 	.word	0x10210000
 80022d0:	10120000 	.word	0x10120000
 80022d4:	10110000 	.word	0x10110000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40010000 	.word	0x40010000
 80022e0:	40010800 	.word	0x40010800
 80022e4:	40010c00 	.word	0x40010c00
 80022e8:	40011000 	.word	0x40011000
 80022ec:	40010400 	.word	0x40010400

080022f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e26c      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8087 	beq.w	800241e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002310:	4b92      	ldr	r3, [pc, #584]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b04      	cmp	r3, #4
 800231a:	d00c      	beq.n	8002336 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800231c:	4b8f      	ldr	r3, [pc, #572]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b08      	cmp	r3, #8
 8002326:	d112      	bne.n	800234e <HAL_RCC_OscConfig+0x5e>
 8002328:	4b8c      	ldr	r3, [pc, #560]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002334:	d10b      	bne.n	800234e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002336:	4b89      	ldr	r3, [pc, #548]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d06c      	beq.n	800241c <HAL_RCC_OscConfig+0x12c>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d168      	bne.n	800241c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e246      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002356:	d106      	bne.n	8002366 <HAL_RCC_OscConfig+0x76>
 8002358:	4b80      	ldr	r3, [pc, #512]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a7f      	ldr	r2, [pc, #508]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 800235e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	e02e      	b.n	80023c4 <HAL_RCC_OscConfig+0xd4>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x98>
 800236e:	4b7b      	ldr	r3, [pc, #492]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a7a      	ldr	r2, [pc, #488]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b78      	ldr	r3, [pc, #480]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a77      	ldr	r2, [pc, #476]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e01d      	b.n	80023c4 <HAL_RCC_OscConfig+0xd4>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0xbc>
 8002392:	4b72      	ldr	r3, [pc, #456]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a71      	ldr	r2, [pc, #452]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b6f      	ldr	r3, [pc, #444]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a6e      	ldr	r2, [pc, #440]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0xd4>
 80023ac:	4b6b      	ldr	r3, [pc, #428]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a6a      	ldr	r2, [pc, #424]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80023b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b68      	ldr	r3, [pc, #416]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a67      	ldr	r2, [pc, #412]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80023be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7fe fe70 	bl	80010b0 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d4:	f7fe fe6c 	bl	80010b0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1fa      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	4b5d      	ldr	r3, [pc, #372]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0xe4>
 80023f2:	e014      	b.n	800241e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fe5c 	bl	80010b0 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7fe fe58 	bl	80010b0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e1e6      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x10c>
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d063      	beq.n	80024f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800242a:	4b4c      	ldr	r3, [pc, #304]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002436:	4b49      	ldr	r3, [pc, #292]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b08      	cmp	r3, #8
 8002440:	d11c      	bne.n	800247c <HAL_RCC_OscConfig+0x18c>
 8002442:	4b46      	ldr	r3, [pc, #280]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d116      	bne.n	800247c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	4b43      	ldr	r3, [pc, #268]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d005      	beq.n	8002466 <HAL_RCC_OscConfig+0x176>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d001      	beq.n	8002466 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e1ba      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002466:	4b3d      	ldr	r3, [pc, #244]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4939      	ldr	r1, [pc, #228]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	e03a      	b.n	80024f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d020      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002484:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HAL_RCC_OscConfig+0x270>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7fe fe11 	bl	80010b0 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002492:	f7fe fe0d 	bl	80010b0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e19b      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b0:	4b2a      	ldr	r3, [pc, #168]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4927      	ldr	r1, [pc, #156]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]
 80024c4:	e015      	b.n	80024f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c6:	4b26      	ldr	r3, [pc, #152]	; (8002560 <HAL_RCC_OscConfig+0x270>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7fe fdf0 	bl	80010b0 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d4:	f7fe fdec 	bl	80010b0 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e17a      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d03a      	beq.n	8002574 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d019      	beq.n	800253a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_RCC_OscConfig+0x274>)
 8002508:	2201      	movs	r2, #1
 800250a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250c:	f7fe fdd0 	bl	80010b0 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002514:	f7fe fdcc 	bl	80010b0 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e15a      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002532:	2001      	movs	r0, #1
 8002534:	f000 fad8 	bl	8002ae8 <RCC_Delay>
 8002538:	e01c      	b.n	8002574 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_RCC_OscConfig+0x274>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002540:	f7fe fdb6 	bl	80010b0 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002546:	e00f      	b.n	8002568 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002548:	f7fe fdb2 	bl	80010b0 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d908      	bls.n	8002568 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e140      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	42420000 	.word	0x42420000
 8002564:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002568:	4b9e      	ldr	r3, [pc, #632]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e9      	bne.n	8002548 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80a6 	beq.w	80026ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002586:	4b97      	ldr	r3, [pc, #604]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10d      	bne.n	80025ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	4b94      	ldr	r3, [pc, #592]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4a93      	ldr	r2, [pc, #588]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259c:	61d3      	str	r3, [r2, #28]
 800259e:	4b91      	ldr	r3, [pc, #580]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025aa:	2301      	movs	r3, #1
 80025ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ae:	4b8e      	ldr	r3, [pc, #568]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d118      	bne.n	80025ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ba:	4b8b      	ldr	r3, [pc, #556]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a8a      	ldr	r2, [pc, #552]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c6:	f7fe fd73 	bl	80010b0 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ce:	f7fe fd6f 	bl	80010b0 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b64      	cmp	r3, #100	; 0x64
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0fd      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	4b81      	ldr	r3, [pc, #516]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d106      	bne.n	8002602 <HAL_RCC_OscConfig+0x312>
 80025f4:	4b7b      	ldr	r3, [pc, #492]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4a7a      	ldr	r2, [pc, #488]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6213      	str	r3, [r2, #32]
 8002600:	e02d      	b.n	800265e <HAL_RCC_OscConfig+0x36e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0x334>
 800260a:	4b76      	ldr	r3, [pc, #472]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4a75      	ldr	r2, [pc, #468]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6213      	str	r3, [r2, #32]
 8002616:	4b73      	ldr	r3, [pc, #460]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4a72      	ldr	r2, [pc, #456]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	f023 0304 	bic.w	r3, r3, #4
 8002620:	6213      	str	r3, [r2, #32]
 8002622:	e01c      	b.n	800265e <HAL_RCC_OscConfig+0x36e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b05      	cmp	r3, #5
 800262a:	d10c      	bne.n	8002646 <HAL_RCC_OscConfig+0x356>
 800262c:	4b6d      	ldr	r3, [pc, #436]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4a6c      	ldr	r2, [pc, #432]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	f043 0304 	orr.w	r3, r3, #4
 8002636:	6213      	str	r3, [r2, #32]
 8002638:	4b6a      	ldr	r3, [pc, #424]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4a69      	ldr	r2, [pc, #420]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6213      	str	r3, [r2, #32]
 8002644:	e00b      	b.n	800265e <HAL_RCC_OscConfig+0x36e>
 8002646:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4a66      	ldr	r2, [pc, #408]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	6213      	str	r3, [r2, #32]
 8002652:	4b64      	ldr	r3, [pc, #400]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	4a63      	ldr	r2, [pc, #396]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	f023 0304 	bic.w	r3, r3, #4
 800265c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d015      	beq.n	8002692 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002666:	f7fe fd23 	bl	80010b0 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266c:	e00a      	b.n	8002684 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266e:	f7fe fd1f 	bl	80010b0 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	f241 3288 	movw	r2, #5000	; 0x1388
 800267c:	4293      	cmp	r3, r2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e0ab      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	4b57      	ldr	r3, [pc, #348]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0ee      	beq.n	800266e <HAL_RCC_OscConfig+0x37e>
 8002690:	e014      	b.n	80026bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002692:	f7fe fd0d 	bl	80010b0 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7fe fd09 	bl	80010b0 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e095      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b0:	4b4c      	ldr	r3, [pc, #304]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1ee      	bne.n	800269a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d105      	bne.n	80026ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c2:	4b48      	ldr	r3, [pc, #288]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	4a47      	ldr	r2, [pc, #284]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8081 	beq.w	80027da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d8:	4b42      	ldr	r3, [pc, #264]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d061      	beq.n	80027a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d146      	bne.n	800277a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ec:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <HAL_RCC_OscConfig+0x4fc>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe fcdd 	bl	80010b0 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe fcd9 	bl	80010b0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e067      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270c:	4b35      	ldr	r3, [pc, #212]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002720:	d108      	bne.n	8002734 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002722:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	492d      	ldr	r1, [pc, #180]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002734:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a19      	ldr	r1, [r3, #32]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	430b      	orrs	r3, r1
 8002746:	4927      	ldr	r1, [pc, #156]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <HAL_RCC_OscConfig+0x4fc>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7fe fcad 	bl	80010b0 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275a:	f7fe fca9 	bl	80010b0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e037      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x46a>
 8002778:	e02f      	b.n	80027da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <HAL_RCC_OscConfig+0x4fc>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe fc96 	bl	80010b0 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fc92 	bl	80010b0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e020      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279a:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x498>
 80027a6:	e018      	b.n	80027da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e013      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40007000 	.word	0x40007000
 80027ec:	42420060 	.word	0x42420060

080027f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0d0      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002804:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d910      	bls.n	8002834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b67      	ldr	r3, [pc, #412]	; (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 0207 	bic.w	r2, r3, #7
 800281a:	4965      	ldr	r1, [pc, #404]	; (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	4b63      	ldr	r3, [pc, #396]	; (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0b8      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d020      	beq.n	8002882 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800284c:	4b59      	ldr	r3, [pc, #356]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a58      	ldr	r2, [pc, #352]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002856:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002864:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a52      	ldr	r2, [pc, #328]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800286e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002870:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	494d      	ldr	r1, [pc, #308]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d040      	beq.n	8002910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d115      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e07f      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ae:	4b41      	ldr	r3, [pc, #260]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e073      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028be:	4b3d      	ldr	r3, [pc, #244]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e06b      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4936      	ldr	r1, [pc, #216]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e0:	f7fe fbe6 	bl	80010b0 <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7fe fbe2 	bl	80010b0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e053      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 020c 	and.w	r2, r3, #12
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d1eb      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002910:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d210      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 0207 	bic.w	r2, r3, #7
 8002926:	4922      	ldr	r1, [pc, #136]	; (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e032      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4916      	ldr	r1, [pc, #88]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800296a:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	490e      	ldr	r1, [pc, #56]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800297e:	f000 f821 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 8002982:	4602      	mov	r2, r0
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	490a      	ldr	r1, [pc, #40]	; (80029b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	5ccb      	ldrb	r3, [r1, r3]
 8002992:	fa22 f303 	lsr.w	r3, r2, r3
 8002996:	4a09      	ldr	r2, [pc, #36]	; (80029bc <HAL_RCC_ClockConfig+0x1cc>)
 8002998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_RCC_ClockConfig+0x1d0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe fb44 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40022000 	.word	0x40022000
 80029b4:	40021000 	.word	0x40021000
 80029b8:	080041a4 	.word	0x080041a4
 80029bc:	20000000 	.word	0x20000000
 80029c0:	20000004 	.word	0x20000004

080029c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c4:	b490      	push	{r4, r7}
 80029c6:	b08a      	sub	sp, #40	; 0x28
 80029c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029cc:	1d3c      	adds	r4, r7, #4
 80029ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029d4:	f240 2301 	movw	r3, #513	; 0x201
 80029d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d002      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x40>
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d003      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x46>
 8002a02:	e02d      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a06:	623b      	str	r3, [r7, #32]
      break;
 8002a08:	e02d      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	0c9b      	lsrs	r3, r3, #18
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a16:	4413      	add	r3, r2
 8002a18:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a1c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d013      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0c5b      	lsrs	r3, r3, #17
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a36:	4413      	add	r3, r2
 8002a38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a42:	fb02 f203 	mul.w	r2, r2, r3
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4e:	e004      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	623b      	str	r3, [r7, #32]
      break;
 8002a5e:	e002      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a62:	623b      	str	r3, [r7, #32]
      break;
 8002a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a66:	6a3b      	ldr	r3, [r7, #32]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3728      	adds	r7, #40	; 0x28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc90      	pop	{r4, r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	08004194 	.word	0x08004194
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	007a1200 	.word	0x007a1200
 8002a80:	003d0900 	.word	0x003d0900

08002a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b02      	ldr	r3, [pc, #8]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	20000000 	.word	0x20000000

08002a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a9c:	f7ff fff2 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	0a1b      	lsrs	r3, r3, #8
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4903      	ldr	r1, [pc, #12]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	080041b4 	.word	0x080041b4

08002ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac4:	f7ff ffde 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	0adb      	lsrs	r3, r3, #11
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4903      	ldr	r1, [pc, #12]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	080041b4 	.word	0x080041b4

08002ae8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <RCC_Delay+0x34>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <RCC_Delay+0x38>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0a5b      	lsrs	r3, r3, #9
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b04:	bf00      	nop
  }
  while (Delay --);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e5a      	subs	r2, r3, #1
 8002b0a:	60fa      	str	r2, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f9      	bne.n	8002b04 <RCC_Delay+0x1c>
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	10624dd3 	.word	0x10624dd3

08002b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d07d      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b40:	2300      	movs	r3, #0
 8002b42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b44:	4b4f      	ldr	r3, [pc, #316]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10d      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b50:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	4a4b      	ldr	r2, [pc, #300]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	61d3      	str	r3, [r2, #28]
 8002b5c:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	4b46      	ldr	r3, [pc, #280]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d118      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b78:	4b43      	ldr	r3, [pc, #268]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a42      	ldr	r2, [pc, #264]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b84:	f7fe fa94 	bl	80010b0 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	e008      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8c:	f7fe fa90 	bl	80010b0 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e06d      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b3a      	ldr	r3, [pc, #232]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d02e      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d027      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd2:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd8:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bde:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d014      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7fe fa5f 	bl	80010b0 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe fa5b 	bl	80010b0 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e036      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ee      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c18:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4917      	ldr	r1, [pc, #92]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	490b      	ldr	r1, [pc, #44]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	4904      	ldr	r1, [pc, #16]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42420440 	.word	0x42420440

08002c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e03f      	b.n	8002d22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fe f846 	bl	8000d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	; 0x24
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fd4f 	bl	8003778 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d153      	bne.n	8002dee <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_UART_Transmit_DMA+0x26>
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e04c      	b.n	8002df0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_UART_Transmit_DMA+0x38>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e045      	b.n	8002df0 <HAL_UART_Transmit_DMA+0xc4>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	88fa      	ldrh	r2, [r7, #6]
 8002d7c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2221      	movs	r2, #33	; 0x21
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d90:	4a19      	ldr	r2, [pc, #100]	; (8002df8 <HAL_UART_Transmit_DMA+0xcc>)
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d98:	4a18      	ldr	r2, [pc, #96]	; (8002dfc <HAL_UART_Transmit_DMA+0xd0>)
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da0:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <HAL_UART_Transmit_DMA+0xd4>)
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	2200      	movs	r2, #0
 8002daa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002dac:	f107 0308 	add.w	r3, r7, #8
 8002db0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	f7fe fed6 	bl	8001b74 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dd0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002de8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e000      	b.n	8002df0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
  }
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	08003217 	.word	0x08003217
 8002dfc:	08003269 	.word	0x08003269
 8002e00:	08003351 	.word	0x08003351

08002e04 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d11d      	bne.n	8002e5a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_UART_Receive_DMA+0x26>
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e016      	b.n	8002e5c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_UART_Receive_DMA+0x38>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e00f      	b.n	8002e5c <HAL_UART_Receive_DMA+0x58>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fac7 	bl	80033e4 <UART_Start_Receive_DMA>
 8002e56:	4603      	mov	r3, r0
 8002e58:	e000      	b.n	8002e5c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10d      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x52>
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fbb8 	bl	8003624 <UART_Receive_IT>
      return;
 8002eb4:	e17b      	b.n	80031ae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80b1 	beq.w	8003020 <HAL_UART_IRQHandler+0x1bc>
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <HAL_UART_IRQHandler+0x70>
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80a6 	beq.w	8003020 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x90>
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f043 0201 	orr.w	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_UART_IRQHandler+0xb0>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f043 0202 	orr.w	r2, r3, #2
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_UART_IRQHandler+0xd0>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f043 0204 	orr.w	r2, r3, #4
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00f      	beq.n	8002f5e <HAL_UART_IRQHandler+0xfa>
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d104      	bne.n	8002f52 <HAL_UART_IRQHandler+0xee>
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f043 0208 	orr.w	r2, r3, #8
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 811e 	beq.w	80031a4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_UART_IRQHandler+0x11e>
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fb51 	bl	8003624 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <HAL_UART_IRQHandler+0x146>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d031      	beq.n	800300e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fa93 	bl	80034d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d023      	beq.n	8003006 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fcc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d013      	beq.n	8002ffe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	4a76      	ldr	r2, [pc, #472]	; (80031b4 <HAL_UART_IRQHandler+0x350>)
 8002fdc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fe60 	bl	8001ca8 <HAL_DMA_Abort_IT>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d016      	beq.n	800301c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	e00e      	b.n	800301c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f8f5 	bl	80031ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	e00a      	b.n	800301c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8f1 	bl	80031ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300c:	e006      	b.n	800301c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8ed 	bl	80031ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800301a:	e0c3      	b.n	80031a4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	bf00      	nop
    return;
 800301e:	e0c1      	b.n	80031a4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	2b01      	cmp	r3, #1
 8003026:	f040 80a1 	bne.w	800316c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 809b 	beq.w	800316c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8095 	beq.w	800316c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d04e      	beq.n	8003104 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003070:	8a3b      	ldrh	r3, [r7, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8098 	beq.w	80031a8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800307c:	8a3a      	ldrh	r2, [r7, #16]
 800307e:	429a      	cmp	r2, r3
 8003080:	f080 8092 	bcs.w	80031a8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8a3a      	ldrh	r2, [r7, #16]
 8003088:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2b20      	cmp	r3, #32
 8003092:	d02b      	beq.n	80030ec <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0210 	bic.w	r2, r2, #16
 80030e0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fda3 	bl	8001c32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	4619      	mov	r1, r3
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f87f 	bl	8003200 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003102:	e051      	b.n	80031a8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800310c:	b29b      	uxth	r3, r3
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d047      	beq.n	80031ac <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800311c:	8a7b      	ldrh	r3, [r7, #18]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d044      	beq.n	80031ac <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003130:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0210 	bic.w	r2, r2, #16
 800315e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003160:	8a7b      	ldrh	r3, [r7, #18]
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f84b 	bl	8003200 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800316a:	e01f      	b.n	80031ac <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_UART_IRQHandler+0x324>
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f9e8 	bl	8003556 <UART_Transmit_IT>
    return;
 8003186:	e012      	b.n	80031ae <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00d      	beq.n	80031ae <HAL_UART_IRQHandler+0x34a>
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fa29 	bl	80035f4 <UART_EndTransmit_IT>
    return;
 80031a2:	e004      	b.n	80031ae <HAL_UART_IRQHandler+0x34a>
    return;
 80031a4:	bf00      	nop
 80031a6:	e002      	b.n	80031ae <HAL_UART_IRQHandler+0x34a>
      return;
 80031a8:	bf00      	nop
 80031aa:	e000      	b.n	80031ae <HAL_UART_IRQHandler+0x34a>
      return;
 80031ac:	bf00      	nop
  }
}
 80031ae:	3728      	adds	r7, #40	; 0x28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	0800352f 	.word	0x0800352f

080031b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d113      	bne.n	800325a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003246:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003256:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003258:	e002      	b.n	8003260 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f7ff ffac 	bl	80031b8 <HAL_UART_TxCpltCallback>
}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f7ff ffa7 	bl	80031ca <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800327c:	bf00      	nop
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d12a      	bne.n	80032f6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0201 	bic.w	r2, r2, #1
 80032c4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d107      	bne.n	80032f6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0210 	bic.w	r2, r2, #16
 80032f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d106      	bne.n	800330c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003302:	4619      	mov	r1, r3
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f7ff ff7b 	bl	8003200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800330a:	e002      	b.n	8003312 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7fd fc5f 	bl	8000bd0 <HAL_UART_RxCpltCallback>
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	2b01      	cmp	r3, #1
 800332e:	d108      	bne.n	8003342 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	b29b      	uxth	r3, r3
 8003338:	4619      	mov	r1, r3
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff ff60 	bl	8003200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003340:	e002      	b.n	8003348 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f7ff ff4a 	bl	80031dc <HAL_UART_RxHalfCpltCallback>
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b21      	cmp	r3, #33	; 0x21
 8003382:	d108      	bne.n	8003396 <UART_DMAError+0x46>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2200      	movs	r2, #0
 800338e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003390:	68b8      	ldr	r0, [r7, #8]
 8003392:	f000 f88b 	bl	80034ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b22      	cmp	r3, #34	; 0x22
 80033b6:	d108      	bne.n	80033ca <UART_DMAError+0x7a>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2200      	movs	r2, #0
 80033c2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80033c4:	68b8      	ldr	r0, [r7, #8]
 80033c6:	f000 f886 	bl	80034d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f043 0210 	orr.w	r2, r3, #16
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033d6:	68b8      	ldr	r0, [r7, #8]
 80033d8:	f7ff ff09 	bl	80031ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	4613      	mov	r3, r2
 80033f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	88fa      	ldrh	r2, [r7, #6]
 80033fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2222      	movs	r2, #34	; 0x22
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <UART_Start_Receive_DMA+0xbc>)
 8003412:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	4a22      	ldr	r2, [pc, #136]	; (80034a4 <UART_Start_Receive_DMA+0xc0>)
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	4a21      	ldr	r2, [pc, #132]	; (80034a8 <UART_Start_Receive_DMA+0xc4>)
 8003422:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	2200      	movs	r2, #0
 800342a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800342c:	f107 0308 	add.w	r3, r7, #8
 8003430:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	f7fe fb96 	bl	8001b74 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003474:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003494:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	08003285 	.word	0x08003285
 80034a4:	0800331b 	.word	0x0800331b
 80034a8:	08003351 	.word	0x08003351

080034ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80034c2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	2b01      	cmp	r3, #1
 8003504:	d107      	bne.n	8003516 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0210 	bic.w	r2, r2, #16
 8003514:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f7ff fe50 	bl	80031ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800354e:	bf00      	nop
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003556:	b480      	push	{r7}
 8003558:	b085      	sub	sp, #20
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b21      	cmp	r3, #33	; 0x21
 8003568:	d13e      	bne.n	80035e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003572:	d114      	bne.n	800359e <UART_Transmit_IT+0x48>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d110      	bne.n	800359e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003590:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	1c9a      	adds	r2, r3, #2
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	621a      	str	r2, [r3, #32]
 800359c:	e008      	b.n	80035b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	1c59      	adds	r1, r3, #1
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6211      	str	r1, [r2, #32]
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4619      	mov	r1, r3
 80035be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10f      	bne.n	80035e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e000      	b.n	80035ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035e8:	2302      	movs	r3, #2
  }
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800360a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff fdcf 	bl	80031b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b22      	cmp	r3, #34	; 0x22
 8003636:	f040 8099 	bne.w	800376c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003642:	d117      	bne.n	8003674 <UART_Receive_IT+0x50>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d113      	bne.n	8003674 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	b29b      	uxth	r3, r3
 800365e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003662:	b29a      	uxth	r2, r3
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
 8003672:	e026      	b.n	80036c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003686:	d007      	beq.n	8003698 <UART_Receive_IT+0x74>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <UART_Receive_IT+0x82>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	e008      	b.n	80036b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4619      	mov	r1, r3
 80036d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d148      	bne.n	8003768 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0220 	bic.w	r2, r2, #32
 80036e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0201 	bic.w	r2, r2, #1
 8003704:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	2b01      	cmp	r3, #1
 8003714:	d123      	bne.n	800375e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0210 	bic.w	r2, r2, #16
 800372a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b10      	cmp	r3, #16
 8003738:	d10a      	bne.n	8003750 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003754:	4619      	mov	r1, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff fd52 	bl	8003200 <HAL_UARTEx_RxEventCallback>
 800375c:	e002      	b.n	8003764 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fd fa36 	bl	8000bd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e002      	b.n	800376e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
  }
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037b2:	f023 030c 	bic.w	r3, r3, #12
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	430b      	orrs	r3, r1
 80037be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2c      	ldr	r2, [pc, #176]	; (800388c <UART_SetConfig+0x114>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d103      	bne.n	80037e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037e0:	f7ff f96e 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	e002      	b.n	80037ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037e8:	f7ff f956 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 80037ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009a      	lsls	r2, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	4a22      	ldr	r2, [pc, #136]	; (8003890 <UART_SetConfig+0x118>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	0119      	lsls	r1, r3, #4
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	009a      	lsls	r2, r3, #2
 8003818:	441a      	add	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	fbb2 f2f3 	udiv	r2, r2, r3
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <UART_SetConfig+0x118>)
 8003826:	fba3 0302 	umull	r0, r3, r3, r2
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2064      	movs	r0, #100	; 0x64
 800382e:	fb00 f303 	mul.w	r3, r0, r3
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	3332      	adds	r3, #50	; 0x32
 8003838:	4a15      	ldr	r2, [pc, #84]	; (8003890 <UART_SetConfig+0x118>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003844:	4419      	add	r1, r3
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009a      	lsls	r2, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	fbb2 f2f3 	udiv	r2, r2, r3
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <UART_SetConfig+0x118>)
 800385e:	fba3 0302 	umull	r0, r3, r3, r2
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2064      	movs	r0, #100	; 0x64
 8003866:	fb00 f303 	mul.w	r3, r0, r3
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	3332      	adds	r3, #50	; 0x32
 8003870:	4a07      	ldr	r2, [pc, #28]	; (8003890 <UART_SetConfig+0x118>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	440a      	add	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40013800 	.word	0x40013800
 8003890:	51eb851f 	.word	0x51eb851f

08003894 <__errno>:
 8003894:	4b01      	ldr	r3, [pc, #4]	; (800389c <__errno+0x8>)
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	2000000c 	.word	0x2000000c

080038a0 <__libc_init_array>:
 80038a0:	b570      	push	{r4, r5, r6, lr}
 80038a2:	2600      	movs	r6, #0
 80038a4:	4d0c      	ldr	r5, [pc, #48]	; (80038d8 <__libc_init_array+0x38>)
 80038a6:	4c0d      	ldr	r4, [pc, #52]	; (80038dc <__libc_init_array+0x3c>)
 80038a8:	1b64      	subs	r4, r4, r5
 80038aa:	10a4      	asrs	r4, r4, #2
 80038ac:	42a6      	cmp	r6, r4
 80038ae:	d109      	bne.n	80038c4 <__libc_init_array+0x24>
 80038b0:	f000 fc5c 	bl	800416c <_init>
 80038b4:	2600      	movs	r6, #0
 80038b6:	4d0a      	ldr	r5, [pc, #40]	; (80038e0 <__libc_init_array+0x40>)
 80038b8:	4c0a      	ldr	r4, [pc, #40]	; (80038e4 <__libc_init_array+0x44>)
 80038ba:	1b64      	subs	r4, r4, r5
 80038bc:	10a4      	asrs	r4, r4, #2
 80038be:	42a6      	cmp	r6, r4
 80038c0:	d105      	bne.n	80038ce <__libc_init_array+0x2e>
 80038c2:	bd70      	pop	{r4, r5, r6, pc}
 80038c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c8:	4798      	blx	r3
 80038ca:	3601      	adds	r6, #1
 80038cc:	e7ee      	b.n	80038ac <__libc_init_array+0xc>
 80038ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d2:	4798      	blx	r3
 80038d4:	3601      	adds	r6, #1
 80038d6:	e7f2      	b.n	80038be <__libc_init_array+0x1e>
 80038d8:	080041f0 	.word	0x080041f0
 80038dc:	080041f0 	.word	0x080041f0
 80038e0:	080041f0 	.word	0x080041f0
 80038e4:	080041f4 	.word	0x080041f4

080038e8 <memset>:
 80038e8:	4603      	mov	r3, r0
 80038ea:	4402      	add	r2, r0
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d100      	bne.n	80038f2 <memset+0xa>
 80038f0:	4770      	bx	lr
 80038f2:	f803 1b01 	strb.w	r1, [r3], #1
 80038f6:	e7f9      	b.n	80038ec <memset+0x4>

080038f8 <siprintf>:
 80038f8:	b40e      	push	{r1, r2, r3}
 80038fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038fe:	b500      	push	{lr}
 8003900:	b09c      	sub	sp, #112	; 0x70
 8003902:	ab1d      	add	r3, sp, #116	; 0x74
 8003904:	9002      	str	r0, [sp, #8]
 8003906:	9006      	str	r0, [sp, #24]
 8003908:	9107      	str	r1, [sp, #28]
 800390a:	9104      	str	r1, [sp, #16]
 800390c:	4808      	ldr	r0, [pc, #32]	; (8003930 <siprintf+0x38>)
 800390e:	4909      	ldr	r1, [pc, #36]	; (8003934 <siprintf+0x3c>)
 8003910:	f853 2b04 	ldr.w	r2, [r3], #4
 8003914:	9105      	str	r1, [sp, #20]
 8003916:	6800      	ldr	r0, [r0, #0]
 8003918:	a902      	add	r1, sp, #8
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	f000 f868 	bl	80039f0 <_svfiprintf_r>
 8003920:	2200      	movs	r2, #0
 8003922:	9b02      	ldr	r3, [sp, #8]
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	b01c      	add	sp, #112	; 0x70
 8003928:	f85d eb04 	ldr.w	lr, [sp], #4
 800392c:	b003      	add	sp, #12
 800392e:	4770      	bx	lr
 8003930:	2000000c 	.word	0x2000000c
 8003934:	ffff0208 	.word	0xffff0208

08003938 <__ssputs_r>:
 8003938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800393c:	688e      	ldr	r6, [r1, #8]
 800393e:	4682      	mov	sl, r0
 8003940:	429e      	cmp	r6, r3
 8003942:	460c      	mov	r4, r1
 8003944:	4690      	mov	r8, r2
 8003946:	461f      	mov	r7, r3
 8003948:	d838      	bhi.n	80039bc <__ssputs_r+0x84>
 800394a:	898a      	ldrh	r2, [r1, #12]
 800394c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003950:	d032      	beq.n	80039b8 <__ssputs_r+0x80>
 8003952:	6825      	ldr	r5, [r4, #0]
 8003954:	6909      	ldr	r1, [r1, #16]
 8003956:	3301      	adds	r3, #1
 8003958:	eba5 0901 	sub.w	r9, r5, r1
 800395c:	6965      	ldr	r5, [r4, #20]
 800395e:	444b      	add	r3, r9
 8003960:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003964:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003968:	106d      	asrs	r5, r5, #1
 800396a:	429d      	cmp	r5, r3
 800396c:	bf38      	it	cc
 800396e:	461d      	movcc	r5, r3
 8003970:	0553      	lsls	r3, r2, #21
 8003972:	d531      	bpl.n	80039d8 <__ssputs_r+0xa0>
 8003974:	4629      	mov	r1, r5
 8003976:	f000 fb53 	bl	8004020 <_malloc_r>
 800397a:	4606      	mov	r6, r0
 800397c:	b950      	cbnz	r0, 8003994 <__ssputs_r+0x5c>
 800397e:	230c      	movs	r3, #12
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	f8ca 3000 	str.w	r3, [sl]
 8003988:	89a3      	ldrh	r3, [r4, #12]
 800398a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800398e:	81a3      	strh	r3, [r4, #12]
 8003990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003994:	464a      	mov	r2, r9
 8003996:	6921      	ldr	r1, [r4, #16]
 8003998:	f000 face 	bl	8003f38 <memcpy>
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a6:	81a3      	strh	r3, [r4, #12]
 80039a8:	6126      	str	r6, [r4, #16]
 80039aa:	444e      	add	r6, r9
 80039ac:	6026      	str	r6, [r4, #0]
 80039ae:	463e      	mov	r6, r7
 80039b0:	6165      	str	r5, [r4, #20]
 80039b2:	eba5 0509 	sub.w	r5, r5, r9
 80039b6:	60a5      	str	r5, [r4, #8]
 80039b8:	42be      	cmp	r6, r7
 80039ba:	d900      	bls.n	80039be <__ssputs_r+0x86>
 80039bc:	463e      	mov	r6, r7
 80039be:	4632      	mov	r2, r6
 80039c0:	4641      	mov	r1, r8
 80039c2:	6820      	ldr	r0, [r4, #0]
 80039c4:	f000 fac6 	bl	8003f54 <memmove>
 80039c8:	68a3      	ldr	r3, [r4, #8]
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	1b9b      	subs	r3, r3, r6
 80039ce:	4432      	add	r2, r6
 80039d0:	2000      	movs	r0, #0
 80039d2:	60a3      	str	r3, [r4, #8]
 80039d4:	6022      	str	r2, [r4, #0]
 80039d6:	e7db      	b.n	8003990 <__ssputs_r+0x58>
 80039d8:	462a      	mov	r2, r5
 80039da:	f000 fb7b 	bl	80040d4 <_realloc_r>
 80039de:	4606      	mov	r6, r0
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d1e1      	bne.n	80039a8 <__ssputs_r+0x70>
 80039e4:	4650      	mov	r0, sl
 80039e6:	6921      	ldr	r1, [r4, #16]
 80039e8:	f000 face 	bl	8003f88 <_free_r>
 80039ec:	e7c7      	b.n	800397e <__ssputs_r+0x46>
	...

080039f0 <_svfiprintf_r>:
 80039f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f4:	4698      	mov	r8, r3
 80039f6:	898b      	ldrh	r3, [r1, #12]
 80039f8:	4607      	mov	r7, r0
 80039fa:	061b      	lsls	r3, r3, #24
 80039fc:	460d      	mov	r5, r1
 80039fe:	4614      	mov	r4, r2
 8003a00:	b09d      	sub	sp, #116	; 0x74
 8003a02:	d50e      	bpl.n	8003a22 <_svfiprintf_r+0x32>
 8003a04:	690b      	ldr	r3, [r1, #16]
 8003a06:	b963      	cbnz	r3, 8003a22 <_svfiprintf_r+0x32>
 8003a08:	2140      	movs	r1, #64	; 0x40
 8003a0a:	f000 fb09 	bl	8004020 <_malloc_r>
 8003a0e:	6028      	str	r0, [r5, #0]
 8003a10:	6128      	str	r0, [r5, #16]
 8003a12:	b920      	cbnz	r0, 8003a1e <_svfiprintf_r+0x2e>
 8003a14:	230c      	movs	r3, #12
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	e0d1      	b.n	8003bc2 <_svfiprintf_r+0x1d2>
 8003a1e:	2340      	movs	r3, #64	; 0x40
 8003a20:	616b      	str	r3, [r5, #20]
 8003a22:	2300      	movs	r3, #0
 8003a24:	9309      	str	r3, [sp, #36]	; 0x24
 8003a26:	2320      	movs	r3, #32
 8003a28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a2c:	2330      	movs	r3, #48	; 0x30
 8003a2e:	f04f 0901 	mov.w	r9, #1
 8003a32:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003bdc <_svfiprintf_r+0x1ec>
 8003a3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a3e:	4623      	mov	r3, r4
 8003a40:	469a      	mov	sl, r3
 8003a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a46:	b10a      	cbz	r2, 8003a4c <_svfiprintf_r+0x5c>
 8003a48:	2a25      	cmp	r2, #37	; 0x25
 8003a4a:	d1f9      	bne.n	8003a40 <_svfiprintf_r+0x50>
 8003a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a50:	d00b      	beq.n	8003a6a <_svfiprintf_r+0x7a>
 8003a52:	465b      	mov	r3, fp
 8003a54:	4622      	mov	r2, r4
 8003a56:	4629      	mov	r1, r5
 8003a58:	4638      	mov	r0, r7
 8003a5a:	f7ff ff6d 	bl	8003938 <__ssputs_r>
 8003a5e:	3001      	adds	r0, #1
 8003a60:	f000 80aa 	beq.w	8003bb8 <_svfiprintf_r+0x1c8>
 8003a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a66:	445a      	add	r2, fp
 8003a68:	9209      	str	r2, [sp, #36]	; 0x24
 8003a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80a2 	beq.w	8003bb8 <_svfiprintf_r+0x1c8>
 8003a74:	2300      	movs	r3, #0
 8003a76:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a7e:	f10a 0a01 	add.w	sl, sl, #1
 8003a82:	9304      	str	r3, [sp, #16]
 8003a84:	9307      	str	r3, [sp, #28]
 8003a86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a8a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a8c:	4654      	mov	r4, sl
 8003a8e:	2205      	movs	r2, #5
 8003a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a94:	4851      	ldr	r0, [pc, #324]	; (8003bdc <_svfiprintf_r+0x1ec>)
 8003a96:	f000 fa41 	bl	8003f1c <memchr>
 8003a9a:	9a04      	ldr	r2, [sp, #16]
 8003a9c:	b9d8      	cbnz	r0, 8003ad6 <_svfiprintf_r+0xe6>
 8003a9e:	06d0      	lsls	r0, r2, #27
 8003aa0:	bf44      	itt	mi
 8003aa2:	2320      	movmi	r3, #32
 8003aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aa8:	0711      	lsls	r1, r2, #28
 8003aaa:	bf44      	itt	mi
 8003aac:	232b      	movmi	r3, #43	; 0x2b
 8003aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab8:	d015      	beq.n	8003ae6 <_svfiprintf_r+0xf6>
 8003aba:	4654      	mov	r4, sl
 8003abc:	2000      	movs	r0, #0
 8003abe:	f04f 0c0a 	mov.w	ip, #10
 8003ac2:	9a07      	ldr	r2, [sp, #28]
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aca:	3b30      	subs	r3, #48	; 0x30
 8003acc:	2b09      	cmp	r3, #9
 8003ace:	d94e      	bls.n	8003b6e <_svfiprintf_r+0x17e>
 8003ad0:	b1b0      	cbz	r0, 8003b00 <_svfiprintf_r+0x110>
 8003ad2:	9207      	str	r2, [sp, #28]
 8003ad4:	e014      	b.n	8003b00 <_svfiprintf_r+0x110>
 8003ad6:	eba0 0308 	sub.w	r3, r0, r8
 8003ada:	fa09 f303 	lsl.w	r3, r9, r3
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	46a2      	mov	sl, r4
 8003ae2:	9304      	str	r3, [sp, #16]
 8003ae4:	e7d2      	b.n	8003a8c <_svfiprintf_r+0x9c>
 8003ae6:	9b03      	ldr	r3, [sp, #12]
 8003ae8:	1d19      	adds	r1, r3, #4
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	9103      	str	r1, [sp, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bfbb      	ittet	lt
 8003af2:	425b      	neglt	r3, r3
 8003af4:	f042 0202 	orrlt.w	r2, r2, #2
 8003af8:	9307      	strge	r3, [sp, #28]
 8003afa:	9307      	strlt	r3, [sp, #28]
 8003afc:	bfb8      	it	lt
 8003afe:	9204      	strlt	r2, [sp, #16]
 8003b00:	7823      	ldrb	r3, [r4, #0]
 8003b02:	2b2e      	cmp	r3, #46	; 0x2e
 8003b04:	d10c      	bne.n	8003b20 <_svfiprintf_r+0x130>
 8003b06:	7863      	ldrb	r3, [r4, #1]
 8003b08:	2b2a      	cmp	r3, #42	; 0x2a
 8003b0a:	d135      	bne.n	8003b78 <_svfiprintf_r+0x188>
 8003b0c:	9b03      	ldr	r3, [sp, #12]
 8003b0e:	3402      	adds	r4, #2
 8003b10:	1d1a      	adds	r2, r3, #4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	9203      	str	r2, [sp, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bfb8      	it	lt
 8003b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b1e:	9305      	str	r3, [sp, #20]
 8003b20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003bec <_svfiprintf_r+0x1fc>
 8003b24:	2203      	movs	r2, #3
 8003b26:	4650      	mov	r0, sl
 8003b28:	7821      	ldrb	r1, [r4, #0]
 8003b2a:	f000 f9f7 	bl	8003f1c <memchr>
 8003b2e:	b140      	cbz	r0, 8003b42 <_svfiprintf_r+0x152>
 8003b30:	2340      	movs	r3, #64	; 0x40
 8003b32:	eba0 000a 	sub.w	r0, r0, sl
 8003b36:	fa03 f000 	lsl.w	r0, r3, r0
 8003b3a:	9b04      	ldr	r3, [sp, #16]
 8003b3c:	3401      	adds	r4, #1
 8003b3e:	4303      	orrs	r3, r0
 8003b40:	9304      	str	r3, [sp, #16]
 8003b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b46:	2206      	movs	r2, #6
 8003b48:	4825      	ldr	r0, [pc, #148]	; (8003be0 <_svfiprintf_r+0x1f0>)
 8003b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b4e:	f000 f9e5 	bl	8003f1c <memchr>
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d038      	beq.n	8003bc8 <_svfiprintf_r+0x1d8>
 8003b56:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <_svfiprintf_r+0x1f4>)
 8003b58:	bb1b      	cbnz	r3, 8003ba2 <_svfiprintf_r+0x1b2>
 8003b5a:	9b03      	ldr	r3, [sp, #12]
 8003b5c:	3307      	adds	r3, #7
 8003b5e:	f023 0307 	bic.w	r3, r3, #7
 8003b62:	3308      	adds	r3, #8
 8003b64:	9303      	str	r3, [sp, #12]
 8003b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b68:	4433      	add	r3, r6
 8003b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b6c:	e767      	b.n	8003a3e <_svfiprintf_r+0x4e>
 8003b6e:	460c      	mov	r4, r1
 8003b70:	2001      	movs	r0, #1
 8003b72:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b76:	e7a5      	b.n	8003ac4 <_svfiprintf_r+0xd4>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f04f 0c0a 	mov.w	ip, #10
 8003b7e:	4619      	mov	r1, r3
 8003b80:	3401      	adds	r4, #1
 8003b82:	9305      	str	r3, [sp, #20]
 8003b84:	4620      	mov	r0, r4
 8003b86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b8a:	3a30      	subs	r2, #48	; 0x30
 8003b8c:	2a09      	cmp	r2, #9
 8003b8e:	d903      	bls.n	8003b98 <_svfiprintf_r+0x1a8>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0c5      	beq.n	8003b20 <_svfiprintf_r+0x130>
 8003b94:	9105      	str	r1, [sp, #20]
 8003b96:	e7c3      	b.n	8003b20 <_svfiprintf_r+0x130>
 8003b98:	4604      	mov	r4, r0
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ba0:	e7f0      	b.n	8003b84 <_svfiprintf_r+0x194>
 8003ba2:	ab03      	add	r3, sp, #12
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	462a      	mov	r2, r5
 8003ba8:	4638      	mov	r0, r7
 8003baa:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <_svfiprintf_r+0x1f8>)
 8003bac:	a904      	add	r1, sp, #16
 8003bae:	f3af 8000 	nop.w
 8003bb2:	1c42      	adds	r2, r0, #1
 8003bb4:	4606      	mov	r6, r0
 8003bb6:	d1d6      	bne.n	8003b66 <_svfiprintf_r+0x176>
 8003bb8:	89ab      	ldrh	r3, [r5, #12]
 8003bba:	065b      	lsls	r3, r3, #25
 8003bbc:	f53f af2c 	bmi.w	8003a18 <_svfiprintf_r+0x28>
 8003bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bc2:	b01d      	add	sp, #116	; 0x74
 8003bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc8:	ab03      	add	r3, sp, #12
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	462a      	mov	r2, r5
 8003bce:	4638      	mov	r0, r7
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <_svfiprintf_r+0x1f8>)
 8003bd2:	a904      	add	r1, sp, #16
 8003bd4:	f000 f87c 	bl	8003cd0 <_printf_i>
 8003bd8:	e7eb      	b.n	8003bb2 <_svfiprintf_r+0x1c2>
 8003bda:	bf00      	nop
 8003bdc:	080041bc 	.word	0x080041bc
 8003be0:	080041c6 	.word	0x080041c6
 8003be4:	00000000 	.word	0x00000000
 8003be8:	08003939 	.word	0x08003939
 8003bec:	080041c2 	.word	0x080041c2

08003bf0 <_printf_common>:
 8003bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf4:	4616      	mov	r6, r2
 8003bf6:	4699      	mov	r9, r3
 8003bf8:	688a      	ldr	r2, [r1, #8]
 8003bfa:	690b      	ldr	r3, [r1, #16]
 8003bfc:	4607      	mov	r7, r0
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	bfb8      	it	lt
 8003c02:	4613      	movlt	r3, r2
 8003c04:	6033      	str	r3, [r6, #0]
 8003c06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c0a:	460c      	mov	r4, r1
 8003c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c10:	b10a      	cbz	r2, 8003c16 <_printf_common+0x26>
 8003c12:	3301      	adds	r3, #1
 8003c14:	6033      	str	r3, [r6, #0]
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	0699      	lsls	r1, r3, #26
 8003c1a:	bf42      	ittt	mi
 8003c1c:	6833      	ldrmi	r3, [r6, #0]
 8003c1e:	3302      	addmi	r3, #2
 8003c20:	6033      	strmi	r3, [r6, #0]
 8003c22:	6825      	ldr	r5, [r4, #0]
 8003c24:	f015 0506 	ands.w	r5, r5, #6
 8003c28:	d106      	bne.n	8003c38 <_printf_common+0x48>
 8003c2a:	f104 0a19 	add.w	sl, r4, #25
 8003c2e:	68e3      	ldr	r3, [r4, #12]
 8003c30:	6832      	ldr	r2, [r6, #0]
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	42ab      	cmp	r3, r5
 8003c36:	dc28      	bgt.n	8003c8a <_printf_common+0x9a>
 8003c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c3c:	1e13      	subs	r3, r2, #0
 8003c3e:	6822      	ldr	r2, [r4, #0]
 8003c40:	bf18      	it	ne
 8003c42:	2301      	movne	r3, #1
 8003c44:	0692      	lsls	r2, r2, #26
 8003c46:	d42d      	bmi.n	8003ca4 <_printf_common+0xb4>
 8003c48:	4649      	mov	r1, r9
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c50:	47c0      	blx	r8
 8003c52:	3001      	adds	r0, #1
 8003c54:	d020      	beq.n	8003c98 <_printf_common+0xa8>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	68e5      	ldr	r5, [r4, #12]
 8003c5a:	f003 0306 	and.w	r3, r3, #6
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	bf18      	it	ne
 8003c62:	2500      	movne	r5, #0
 8003c64:	6832      	ldr	r2, [r6, #0]
 8003c66:	f04f 0600 	mov.w	r6, #0
 8003c6a:	68a3      	ldr	r3, [r4, #8]
 8003c6c:	bf08      	it	eq
 8003c6e:	1aad      	subeq	r5, r5, r2
 8003c70:	6922      	ldr	r2, [r4, #16]
 8003c72:	bf08      	it	eq
 8003c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bfc4      	itt	gt
 8003c7c:	1a9b      	subgt	r3, r3, r2
 8003c7e:	18ed      	addgt	r5, r5, r3
 8003c80:	341a      	adds	r4, #26
 8003c82:	42b5      	cmp	r5, r6
 8003c84:	d11a      	bne.n	8003cbc <_printf_common+0xcc>
 8003c86:	2000      	movs	r0, #0
 8003c88:	e008      	b.n	8003c9c <_printf_common+0xac>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	4652      	mov	r2, sl
 8003c8e:	4649      	mov	r1, r9
 8003c90:	4638      	mov	r0, r7
 8003c92:	47c0      	blx	r8
 8003c94:	3001      	adds	r0, #1
 8003c96:	d103      	bne.n	8003ca0 <_printf_common+0xb0>
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca0:	3501      	adds	r5, #1
 8003ca2:	e7c4      	b.n	8003c2e <_printf_common+0x3e>
 8003ca4:	2030      	movs	r0, #48	; 0x30
 8003ca6:	18e1      	adds	r1, r4, r3
 8003ca8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cb2:	4422      	add	r2, r4
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cba:	e7c5      	b.n	8003c48 <_printf_common+0x58>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	4622      	mov	r2, r4
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	4638      	mov	r0, r7
 8003cc4:	47c0      	blx	r8
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	d0e6      	beq.n	8003c98 <_printf_common+0xa8>
 8003cca:	3601      	adds	r6, #1
 8003ccc:	e7d9      	b.n	8003c82 <_printf_common+0x92>
	...

08003cd0 <_printf_i>:
 8003cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	460c      	mov	r4, r1
 8003cd6:	7e27      	ldrb	r7, [r4, #24]
 8003cd8:	4691      	mov	r9, r2
 8003cda:	2f78      	cmp	r7, #120	; 0x78
 8003cdc:	4680      	mov	r8, r0
 8003cde:	469a      	mov	sl, r3
 8003ce0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ce2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ce6:	d807      	bhi.n	8003cf8 <_printf_i+0x28>
 8003ce8:	2f62      	cmp	r7, #98	; 0x62
 8003cea:	d80a      	bhi.n	8003d02 <_printf_i+0x32>
 8003cec:	2f00      	cmp	r7, #0
 8003cee:	f000 80d9 	beq.w	8003ea4 <_printf_i+0x1d4>
 8003cf2:	2f58      	cmp	r7, #88	; 0x58
 8003cf4:	f000 80a4 	beq.w	8003e40 <_printf_i+0x170>
 8003cf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d00:	e03a      	b.n	8003d78 <_printf_i+0xa8>
 8003d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d06:	2b15      	cmp	r3, #21
 8003d08:	d8f6      	bhi.n	8003cf8 <_printf_i+0x28>
 8003d0a:	a001      	add	r0, pc, #4	; (adr r0, 8003d10 <_printf_i+0x40>)
 8003d0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003d10:	08003d69 	.word	0x08003d69
 8003d14:	08003d7d 	.word	0x08003d7d
 8003d18:	08003cf9 	.word	0x08003cf9
 8003d1c:	08003cf9 	.word	0x08003cf9
 8003d20:	08003cf9 	.word	0x08003cf9
 8003d24:	08003cf9 	.word	0x08003cf9
 8003d28:	08003d7d 	.word	0x08003d7d
 8003d2c:	08003cf9 	.word	0x08003cf9
 8003d30:	08003cf9 	.word	0x08003cf9
 8003d34:	08003cf9 	.word	0x08003cf9
 8003d38:	08003cf9 	.word	0x08003cf9
 8003d3c:	08003e8b 	.word	0x08003e8b
 8003d40:	08003dad 	.word	0x08003dad
 8003d44:	08003e6d 	.word	0x08003e6d
 8003d48:	08003cf9 	.word	0x08003cf9
 8003d4c:	08003cf9 	.word	0x08003cf9
 8003d50:	08003ead 	.word	0x08003ead
 8003d54:	08003cf9 	.word	0x08003cf9
 8003d58:	08003dad 	.word	0x08003dad
 8003d5c:	08003cf9 	.word	0x08003cf9
 8003d60:	08003cf9 	.word	0x08003cf9
 8003d64:	08003e75 	.word	0x08003e75
 8003d68:	680b      	ldr	r3, [r1, #0]
 8003d6a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d6e:	1d1a      	adds	r2, r3, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	600a      	str	r2, [r1, #0]
 8003d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0a4      	b.n	8003ec6 <_printf_i+0x1f6>
 8003d7c:	6825      	ldr	r5, [r4, #0]
 8003d7e:	6808      	ldr	r0, [r1, #0]
 8003d80:	062e      	lsls	r6, r5, #24
 8003d82:	f100 0304 	add.w	r3, r0, #4
 8003d86:	d50a      	bpl.n	8003d9e <_printf_i+0xce>
 8003d88:	6805      	ldr	r5, [r0, #0]
 8003d8a:	600b      	str	r3, [r1, #0]
 8003d8c:	2d00      	cmp	r5, #0
 8003d8e:	da03      	bge.n	8003d98 <_printf_i+0xc8>
 8003d90:	232d      	movs	r3, #45	; 0x2d
 8003d92:	426d      	negs	r5, r5
 8003d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d98:	230a      	movs	r3, #10
 8003d9a:	485e      	ldr	r0, [pc, #376]	; (8003f14 <_printf_i+0x244>)
 8003d9c:	e019      	b.n	8003dd2 <_printf_i+0x102>
 8003d9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003da2:	6805      	ldr	r5, [r0, #0]
 8003da4:	600b      	str	r3, [r1, #0]
 8003da6:	bf18      	it	ne
 8003da8:	b22d      	sxthne	r5, r5
 8003daa:	e7ef      	b.n	8003d8c <_printf_i+0xbc>
 8003dac:	680b      	ldr	r3, [r1, #0]
 8003dae:	6825      	ldr	r5, [r4, #0]
 8003db0:	1d18      	adds	r0, r3, #4
 8003db2:	6008      	str	r0, [r1, #0]
 8003db4:	0628      	lsls	r0, r5, #24
 8003db6:	d501      	bpl.n	8003dbc <_printf_i+0xec>
 8003db8:	681d      	ldr	r5, [r3, #0]
 8003dba:	e002      	b.n	8003dc2 <_printf_i+0xf2>
 8003dbc:	0669      	lsls	r1, r5, #25
 8003dbe:	d5fb      	bpl.n	8003db8 <_printf_i+0xe8>
 8003dc0:	881d      	ldrh	r5, [r3, #0]
 8003dc2:	2f6f      	cmp	r7, #111	; 0x6f
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2308      	moveq	r3, #8
 8003dc8:	230a      	movne	r3, #10
 8003dca:	4852      	ldr	r0, [pc, #328]	; (8003f14 <_printf_i+0x244>)
 8003dcc:	2100      	movs	r1, #0
 8003dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dd2:	6866      	ldr	r6, [r4, #4]
 8003dd4:	2e00      	cmp	r6, #0
 8003dd6:	bfa8      	it	ge
 8003dd8:	6821      	ldrge	r1, [r4, #0]
 8003dda:	60a6      	str	r6, [r4, #8]
 8003ddc:	bfa4      	itt	ge
 8003dde:	f021 0104 	bicge.w	r1, r1, #4
 8003de2:	6021      	strge	r1, [r4, #0]
 8003de4:	b90d      	cbnz	r5, 8003dea <_printf_i+0x11a>
 8003de6:	2e00      	cmp	r6, #0
 8003de8:	d04d      	beq.n	8003e86 <_printf_i+0x1b6>
 8003dea:	4616      	mov	r6, r2
 8003dec:	fbb5 f1f3 	udiv	r1, r5, r3
 8003df0:	fb03 5711 	mls	r7, r3, r1, r5
 8003df4:	5dc7      	ldrb	r7, [r0, r7]
 8003df6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dfa:	462f      	mov	r7, r5
 8003dfc:	42bb      	cmp	r3, r7
 8003dfe:	460d      	mov	r5, r1
 8003e00:	d9f4      	bls.n	8003dec <_printf_i+0x11c>
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d10b      	bne.n	8003e1e <_printf_i+0x14e>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	07df      	lsls	r7, r3, #31
 8003e0a:	d508      	bpl.n	8003e1e <_printf_i+0x14e>
 8003e0c:	6923      	ldr	r3, [r4, #16]
 8003e0e:	6861      	ldr	r1, [r4, #4]
 8003e10:	4299      	cmp	r1, r3
 8003e12:	bfde      	ittt	le
 8003e14:	2330      	movle	r3, #48	; 0x30
 8003e16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e1e:	1b92      	subs	r2, r2, r6
 8003e20:	6122      	str	r2, [r4, #16]
 8003e22:	464b      	mov	r3, r9
 8003e24:	4621      	mov	r1, r4
 8003e26:	4640      	mov	r0, r8
 8003e28:	f8cd a000 	str.w	sl, [sp]
 8003e2c:	aa03      	add	r2, sp, #12
 8003e2e:	f7ff fedf 	bl	8003bf0 <_printf_common>
 8003e32:	3001      	adds	r0, #1
 8003e34:	d14c      	bne.n	8003ed0 <_printf_i+0x200>
 8003e36:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3a:	b004      	add	sp, #16
 8003e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e40:	4834      	ldr	r0, [pc, #208]	; (8003f14 <_printf_i+0x244>)
 8003e42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e46:	680e      	ldr	r6, [r1, #0]
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003e4e:	061f      	lsls	r7, r3, #24
 8003e50:	600e      	str	r6, [r1, #0]
 8003e52:	d514      	bpl.n	8003e7e <_printf_i+0x1ae>
 8003e54:	07d9      	lsls	r1, r3, #31
 8003e56:	bf44      	itt	mi
 8003e58:	f043 0320 	orrmi.w	r3, r3, #32
 8003e5c:	6023      	strmi	r3, [r4, #0]
 8003e5e:	b91d      	cbnz	r5, 8003e68 <_printf_i+0x198>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	f023 0320 	bic.w	r3, r3, #32
 8003e66:	6023      	str	r3, [r4, #0]
 8003e68:	2310      	movs	r3, #16
 8003e6a:	e7af      	b.n	8003dcc <_printf_i+0xfc>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	f043 0320 	orr.w	r3, r3, #32
 8003e72:	6023      	str	r3, [r4, #0]
 8003e74:	2378      	movs	r3, #120	; 0x78
 8003e76:	4828      	ldr	r0, [pc, #160]	; (8003f18 <_printf_i+0x248>)
 8003e78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e7c:	e7e3      	b.n	8003e46 <_printf_i+0x176>
 8003e7e:	065e      	lsls	r6, r3, #25
 8003e80:	bf48      	it	mi
 8003e82:	b2ad      	uxthmi	r5, r5
 8003e84:	e7e6      	b.n	8003e54 <_printf_i+0x184>
 8003e86:	4616      	mov	r6, r2
 8003e88:	e7bb      	b.n	8003e02 <_printf_i+0x132>
 8003e8a:	680b      	ldr	r3, [r1, #0]
 8003e8c:	6826      	ldr	r6, [r4, #0]
 8003e8e:	1d1d      	adds	r5, r3, #4
 8003e90:	6960      	ldr	r0, [r4, #20]
 8003e92:	600d      	str	r5, [r1, #0]
 8003e94:	0635      	lsls	r5, r6, #24
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	d501      	bpl.n	8003e9e <_printf_i+0x1ce>
 8003e9a:	6018      	str	r0, [r3, #0]
 8003e9c:	e002      	b.n	8003ea4 <_printf_i+0x1d4>
 8003e9e:	0671      	lsls	r1, r6, #25
 8003ea0:	d5fb      	bpl.n	8003e9a <_printf_i+0x1ca>
 8003ea2:	8018      	strh	r0, [r3, #0]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4616      	mov	r6, r2
 8003ea8:	6123      	str	r3, [r4, #16]
 8003eaa:	e7ba      	b.n	8003e22 <_printf_i+0x152>
 8003eac:	680b      	ldr	r3, [r1, #0]
 8003eae:	1d1a      	adds	r2, r3, #4
 8003eb0:	600a      	str	r2, [r1, #0]
 8003eb2:	681e      	ldr	r6, [r3, #0]
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	6862      	ldr	r2, [r4, #4]
 8003eba:	f000 f82f 	bl	8003f1c <memchr>
 8003ebe:	b108      	cbz	r0, 8003ec4 <_printf_i+0x1f4>
 8003ec0:	1b80      	subs	r0, r0, r6
 8003ec2:	6060      	str	r0, [r4, #4]
 8003ec4:	6863      	ldr	r3, [r4, #4]
 8003ec6:	6123      	str	r3, [r4, #16]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ece:	e7a8      	b.n	8003e22 <_printf_i+0x152>
 8003ed0:	4632      	mov	r2, r6
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	4640      	mov	r0, r8
 8003ed6:	6923      	ldr	r3, [r4, #16]
 8003ed8:	47d0      	blx	sl
 8003eda:	3001      	adds	r0, #1
 8003edc:	d0ab      	beq.n	8003e36 <_printf_i+0x166>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	079b      	lsls	r3, r3, #30
 8003ee2:	d413      	bmi.n	8003f0c <_printf_i+0x23c>
 8003ee4:	68e0      	ldr	r0, [r4, #12]
 8003ee6:	9b03      	ldr	r3, [sp, #12]
 8003ee8:	4298      	cmp	r0, r3
 8003eea:	bfb8      	it	lt
 8003eec:	4618      	movlt	r0, r3
 8003eee:	e7a4      	b.n	8003e3a <_printf_i+0x16a>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	4632      	mov	r2, r6
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	47d0      	blx	sl
 8003efa:	3001      	adds	r0, #1
 8003efc:	d09b      	beq.n	8003e36 <_printf_i+0x166>
 8003efe:	3501      	adds	r5, #1
 8003f00:	68e3      	ldr	r3, [r4, #12]
 8003f02:	9903      	ldr	r1, [sp, #12]
 8003f04:	1a5b      	subs	r3, r3, r1
 8003f06:	42ab      	cmp	r3, r5
 8003f08:	dcf2      	bgt.n	8003ef0 <_printf_i+0x220>
 8003f0a:	e7eb      	b.n	8003ee4 <_printf_i+0x214>
 8003f0c:	2500      	movs	r5, #0
 8003f0e:	f104 0619 	add.w	r6, r4, #25
 8003f12:	e7f5      	b.n	8003f00 <_printf_i+0x230>
 8003f14:	080041cd 	.word	0x080041cd
 8003f18:	080041de 	.word	0x080041de

08003f1c <memchr>:
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	b510      	push	{r4, lr}
 8003f20:	b2c9      	uxtb	r1, r1
 8003f22:	4402      	add	r2, r0
 8003f24:	4293      	cmp	r3, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	d101      	bne.n	8003f2e <memchr+0x12>
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	e003      	b.n	8003f36 <memchr+0x1a>
 8003f2e:	7804      	ldrb	r4, [r0, #0]
 8003f30:	3301      	adds	r3, #1
 8003f32:	428c      	cmp	r4, r1
 8003f34:	d1f6      	bne.n	8003f24 <memchr+0x8>
 8003f36:	bd10      	pop	{r4, pc}

08003f38 <memcpy>:
 8003f38:	440a      	add	r2, r1
 8003f3a:	4291      	cmp	r1, r2
 8003f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f40:	d100      	bne.n	8003f44 <memcpy+0xc>
 8003f42:	4770      	bx	lr
 8003f44:	b510      	push	{r4, lr}
 8003f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f4a:	4291      	cmp	r1, r2
 8003f4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f50:	d1f9      	bne.n	8003f46 <memcpy+0xe>
 8003f52:	bd10      	pop	{r4, pc}

08003f54 <memmove>:
 8003f54:	4288      	cmp	r0, r1
 8003f56:	b510      	push	{r4, lr}
 8003f58:	eb01 0402 	add.w	r4, r1, r2
 8003f5c:	d902      	bls.n	8003f64 <memmove+0x10>
 8003f5e:	4284      	cmp	r4, r0
 8003f60:	4623      	mov	r3, r4
 8003f62:	d807      	bhi.n	8003f74 <memmove+0x20>
 8003f64:	1e43      	subs	r3, r0, #1
 8003f66:	42a1      	cmp	r1, r4
 8003f68:	d008      	beq.n	8003f7c <memmove+0x28>
 8003f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f72:	e7f8      	b.n	8003f66 <memmove+0x12>
 8003f74:	4601      	mov	r1, r0
 8003f76:	4402      	add	r2, r0
 8003f78:	428a      	cmp	r2, r1
 8003f7a:	d100      	bne.n	8003f7e <memmove+0x2a>
 8003f7c:	bd10      	pop	{r4, pc}
 8003f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f86:	e7f7      	b.n	8003f78 <memmove+0x24>

08003f88 <_free_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4605      	mov	r5, r0
 8003f8c:	2900      	cmp	r1, #0
 8003f8e:	d043      	beq.n	8004018 <_free_r+0x90>
 8003f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f94:	1f0c      	subs	r4, r1, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bfb8      	it	lt
 8003f9a:	18e4      	addlt	r4, r4, r3
 8003f9c:	f000 f8d0 	bl	8004140 <__malloc_lock>
 8003fa0:	4a1e      	ldr	r2, [pc, #120]	; (800401c <_free_r+0x94>)
 8003fa2:	6813      	ldr	r3, [r2, #0]
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	b933      	cbnz	r3, 8003fb6 <_free_r+0x2e>
 8003fa8:	6063      	str	r3, [r4, #4]
 8003faa:	6014      	str	r4, [r2, #0]
 8003fac:	4628      	mov	r0, r5
 8003fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fb2:	f000 b8cb 	b.w	800414c <__malloc_unlock>
 8003fb6:	42a3      	cmp	r3, r4
 8003fb8:	d90a      	bls.n	8003fd0 <_free_r+0x48>
 8003fba:	6821      	ldr	r1, [r4, #0]
 8003fbc:	1862      	adds	r2, r4, r1
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	bf01      	itttt	eq
 8003fc2:	681a      	ldreq	r2, [r3, #0]
 8003fc4:	685b      	ldreq	r3, [r3, #4]
 8003fc6:	1852      	addeq	r2, r2, r1
 8003fc8:	6022      	streq	r2, [r4, #0]
 8003fca:	6063      	str	r3, [r4, #4]
 8003fcc:	6004      	str	r4, [r0, #0]
 8003fce:	e7ed      	b.n	8003fac <_free_r+0x24>
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	b10b      	cbz	r3, 8003fda <_free_r+0x52>
 8003fd6:	42a3      	cmp	r3, r4
 8003fd8:	d9fa      	bls.n	8003fd0 <_free_r+0x48>
 8003fda:	6811      	ldr	r1, [r2, #0]
 8003fdc:	1850      	adds	r0, r2, r1
 8003fde:	42a0      	cmp	r0, r4
 8003fe0:	d10b      	bne.n	8003ffa <_free_r+0x72>
 8003fe2:	6820      	ldr	r0, [r4, #0]
 8003fe4:	4401      	add	r1, r0
 8003fe6:	1850      	adds	r0, r2, r1
 8003fe8:	4283      	cmp	r3, r0
 8003fea:	6011      	str	r1, [r2, #0]
 8003fec:	d1de      	bne.n	8003fac <_free_r+0x24>
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	4401      	add	r1, r0
 8003ff4:	6011      	str	r1, [r2, #0]
 8003ff6:	6053      	str	r3, [r2, #4]
 8003ff8:	e7d8      	b.n	8003fac <_free_r+0x24>
 8003ffa:	d902      	bls.n	8004002 <_free_r+0x7a>
 8003ffc:	230c      	movs	r3, #12
 8003ffe:	602b      	str	r3, [r5, #0]
 8004000:	e7d4      	b.n	8003fac <_free_r+0x24>
 8004002:	6820      	ldr	r0, [r4, #0]
 8004004:	1821      	adds	r1, r4, r0
 8004006:	428b      	cmp	r3, r1
 8004008:	bf01      	itttt	eq
 800400a:	6819      	ldreq	r1, [r3, #0]
 800400c:	685b      	ldreq	r3, [r3, #4]
 800400e:	1809      	addeq	r1, r1, r0
 8004010:	6021      	streq	r1, [r4, #0]
 8004012:	6063      	str	r3, [r4, #4]
 8004014:	6054      	str	r4, [r2, #4]
 8004016:	e7c9      	b.n	8003fac <_free_r+0x24>
 8004018:	bd38      	pop	{r3, r4, r5, pc}
 800401a:	bf00      	nop
 800401c:	20000090 	.word	0x20000090

08004020 <_malloc_r>:
 8004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004022:	1ccd      	adds	r5, r1, #3
 8004024:	f025 0503 	bic.w	r5, r5, #3
 8004028:	3508      	adds	r5, #8
 800402a:	2d0c      	cmp	r5, #12
 800402c:	bf38      	it	cc
 800402e:	250c      	movcc	r5, #12
 8004030:	2d00      	cmp	r5, #0
 8004032:	4606      	mov	r6, r0
 8004034:	db01      	blt.n	800403a <_malloc_r+0x1a>
 8004036:	42a9      	cmp	r1, r5
 8004038:	d903      	bls.n	8004042 <_malloc_r+0x22>
 800403a:	230c      	movs	r3, #12
 800403c:	6033      	str	r3, [r6, #0]
 800403e:	2000      	movs	r0, #0
 8004040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004042:	f000 f87d 	bl	8004140 <__malloc_lock>
 8004046:	4921      	ldr	r1, [pc, #132]	; (80040cc <_malloc_r+0xac>)
 8004048:	680a      	ldr	r2, [r1, #0]
 800404a:	4614      	mov	r4, r2
 800404c:	b99c      	cbnz	r4, 8004076 <_malloc_r+0x56>
 800404e:	4f20      	ldr	r7, [pc, #128]	; (80040d0 <_malloc_r+0xb0>)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	b923      	cbnz	r3, 800405e <_malloc_r+0x3e>
 8004054:	4621      	mov	r1, r4
 8004056:	4630      	mov	r0, r6
 8004058:	f000 f862 	bl	8004120 <_sbrk_r>
 800405c:	6038      	str	r0, [r7, #0]
 800405e:	4629      	mov	r1, r5
 8004060:	4630      	mov	r0, r6
 8004062:	f000 f85d 	bl	8004120 <_sbrk_r>
 8004066:	1c43      	adds	r3, r0, #1
 8004068:	d123      	bne.n	80040b2 <_malloc_r+0x92>
 800406a:	230c      	movs	r3, #12
 800406c:	4630      	mov	r0, r6
 800406e:	6033      	str	r3, [r6, #0]
 8004070:	f000 f86c 	bl	800414c <__malloc_unlock>
 8004074:	e7e3      	b.n	800403e <_malloc_r+0x1e>
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	1b5b      	subs	r3, r3, r5
 800407a:	d417      	bmi.n	80040ac <_malloc_r+0x8c>
 800407c:	2b0b      	cmp	r3, #11
 800407e:	d903      	bls.n	8004088 <_malloc_r+0x68>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	441c      	add	r4, r3
 8004084:	6025      	str	r5, [r4, #0]
 8004086:	e004      	b.n	8004092 <_malloc_r+0x72>
 8004088:	6863      	ldr	r3, [r4, #4]
 800408a:	42a2      	cmp	r2, r4
 800408c:	bf0c      	ite	eq
 800408e:	600b      	streq	r3, [r1, #0]
 8004090:	6053      	strne	r3, [r2, #4]
 8004092:	4630      	mov	r0, r6
 8004094:	f000 f85a 	bl	800414c <__malloc_unlock>
 8004098:	f104 000b 	add.w	r0, r4, #11
 800409c:	1d23      	adds	r3, r4, #4
 800409e:	f020 0007 	bic.w	r0, r0, #7
 80040a2:	1ac2      	subs	r2, r0, r3
 80040a4:	d0cc      	beq.n	8004040 <_malloc_r+0x20>
 80040a6:	1a1b      	subs	r3, r3, r0
 80040a8:	50a3      	str	r3, [r4, r2]
 80040aa:	e7c9      	b.n	8004040 <_malloc_r+0x20>
 80040ac:	4622      	mov	r2, r4
 80040ae:	6864      	ldr	r4, [r4, #4]
 80040b0:	e7cc      	b.n	800404c <_malloc_r+0x2c>
 80040b2:	1cc4      	adds	r4, r0, #3
 80040b4:	f024 0403 	bic.w	r4, r4, #3
 80040b8:	42a0      	cmp	r0, r4
 80040ba:	d0e3      	beq.n	8004084 <_malloc_r+0x64>
 80040bc:	1a21      	subs	r1, r4, r0
 80040be:	4630      	mov	r0, r6
 80040c0:	f000 f82e 	bl	8004120 <_sbrk_r>
 80040c4:	3001      	adds	r0, #1
 80040c6:	d1dd      	bne.n	8004084 <_malloc_r+0x64>
 80040c8:	e7cf      	b.n	800406a <_malloc_r+0x4a>
 80040ca:	bf00      	nop
 80040cc:	20000090 	.word	0x20000090
 80040d0:	20000094 	.word	0x20000094

080040d4 <_realloc_r>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	4607      	mov	r7, r0
 80040d8:	4614      	mov	r4, r2
 80040da:	460e      	mov	r6, r1
 80040dc:	b921      	cbnz	r1, 80040e8 <_realloc_r+0x14>
 80040de:	4611      	mov	r1, r2
 80040e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80040e4:	f7ff bf9c 	b.w	8004020 <_malloc_r>
 80040e8:	b922      	cbnz	r2, 80040f4 <_realloc_r+0x20>
 80040ea:	f7ff ff4d 	bl	8003f88 <_free_r>
 80040ee:	4625      	mov	r5, r4
 80040f0:	4628      	mov	r0, r5
 80040f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040f4:	f000 f830 	bl	8004158 <_malloc_usable_size_r>
 80040f8:	42a0      	cmp	r0, r4
 80040fa:	d20f      	bcs.n	800411c <_realloc_r+0x48>
 80040fc:	4621      	mov	r1, r4
 80040fe:	4638      	mov	r0, r7
 8004100:	f7ff ff8e 	bl	8004020 <_malloc_r>
 8004104:	4605      	mov	r5, r0
 8004106:	2800      	cmp	r0, #0
 8004108:	d0f2      	beq.n	80040f0 <_realloc_r+0x1c>
 800410a:	4631      	mov	r1, r6
 800410c:	4622      	mov	r2, r4
 800410e:	f7ff ff13 	bl	8003f38 <memcpy>
 8004112:	4631      	mov	r1, r6
 8004114:	4638      	mov	r0, r7
 8004116:	f7ff ff37 	bl	8003f88 <_free_r>
 800411a:	e7e9      	b.n	80040f0 <_realloc_r+0x1c>
 800411c:	4635      	mov	r5, r6
 800411e:	e7e7      	b.n	80040f0 <_realloc_r+0x1c>

08004120 <_sbrk_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	2300      	movs	r3, #0
 8004124:	4d05      	ldr	r5, [pc, #20]	; (800413c <_sbrk_r+0x1c>)
 8004126:	4604      	mov	r4, r0
 8004128:	4608      	mov	r0, r1
 800412a:	602b      	str	r3, [r5, #0]
 800412c:	f7fc ff06 	bl	8000f3c <_sbrk>
 8004130:	1c43      	adds	r3, r0, #1
 8004132:	d102      	bne.n	800413a <_sbrk_r+0x1a>
 8004134:	682b      	ldr	r3, [r5, #0]
 8004136:	b103      	cbz	r3, 800413a <_sbrk_r+0x1a>
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	bd38      	pop	{r3, r4, r5, pc}
 800413c:	200001f4 	.word	0x200001f4

08004140 <__malloc_lock>:
 8004140:	4801      	ldr	r0, [pc, #4]	; (8004148 <__malloc_lock+0x8>)
 8004142:	f000 b811 	b.w	8004168 <__retarget_lock_acquire_recursive>
 8004146:	bf00      	nop
 8004148:	200001fc 	.word	0x200001fc

0800414c <__malloc_unlock>:
 800414c:	4801      	ldr	r0, [pc, #4]	; (8004154 <__malloc_unlock+0x8>)
 800414e:	f000 b80c 	b.w	800416a <__retarget_lock_release_recursive>
 8004152:	bf00      	nop
 8004154:	200001fc 	.word	0x200001fc

08004158 <_malloc_usable_size_r>:
 8004158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800415c:	1f18      	subs	r0, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	bfbc      	itt	lt
 8004162:	580b      	ldrlt	r3, [r1, r0]
 8004164:	18c0      	addlt	r0, r0, r3
 8004166:	4770      	bx	lr

08004168 <__retarget_lock_acquire_recursive>:
 8004168:	4770      	bx	lr

0800416a <__retarget_lock_release_recursive>:
 800416a:	4770      	bx	lr

0800416c <_init>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	bf00      	nop
 8004170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004172:	bc08      	pop	{r3}
 8004174:	469e      	mov	lr, r3
 8004176:	4770      	bx	lr

08004178 <_fini>:
 8004178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417a:	bf00      	nop
 800417c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417e:	bc08      	pop	{r3}
 8004180:	469e      	mov	lr, r3
 8004182:	4770      	bx	lr
